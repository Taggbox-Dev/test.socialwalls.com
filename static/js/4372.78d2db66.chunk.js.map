{"version":3,"file":"static/js/4372.78d2db66.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/networkIcon.js","app/Display/dashboard-new/components/common/slideSection.js","app/Display/dashboard-new/components/skeleton/wallsSkeleton.js","app/Display/dashboard-new/components/createdWalls.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst NetworkIcon = (props) => {\r\n  return (\r\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(NetworkIcon);\r\n","        import React, { useEffect, useState } from \"react\";\r\n        import { Splide, SplideTrack } from \"@splidejs/react-splide\";\r\n        import \"../../../analytics-new/assets/css/slide.scss\";\r\n        import '@splidejs/react-splide/css';\r\n \r\n        const CreatedWalls = ({ setactiveWall, section, totalRecord, splideRef, children}) => {\r\n\r\n        const [currentSlide, setCurrentSlide] = useState(0);\r\n \r\n        useEffect(() => {\r\n\r\n          if(section && setactiveWall){\r\n\r\n                 const splideInstance = splideRef.current.splide;\r\n\r\n                //  splideInstance.on('click', (e) => {\r\n                //     if(e.slide.className.includes('is-active')){\r\n\r\n                //         const wallId =  e.slide.getAttribute('data-wallId')\r\n                //         const feedList =  e.slide.getAttribute('data-feedList')\r\n                //        // nevigationRedirect(wallId,4,feedList);\r\n\r\n                //         }else{\r\n                //         splideRef.current.splide.go(e.index); // Move to the clicked slide\r\n                //      }\r\n                //   });\r\n                 \r\n                 splideInstance.on('move', (newIndex) => {\r\n                    setCurrentSlide(newIndex);\r\n                  });\r\n                    \r\n                if (splideRef.current && totalRecord>1) {\r\n                  splideRef.current.splide.on(\"move\", (newIndex) => {\r\n                    manageSlider(newIndex)\r\n                    setactiveWall(newIndex)\r\n                 });\r\n              }else{\r\n                manageSlider()\r\n                setactiveWall(1)\r\n              }\r\n          }\r\n        }, []);\r\n\r\n      \r\n        const manageSlider=(index=null)=>{\r\n  \r\n            const totalList = totalRecord * 2;   \r\n            const newIndexCondition = totalRecord-1;\r\n\r\n            const toggleDisplay = (displayStyle) => {\r\n\r\n                const slideWalls = document.getElementsByClassName(`splide__slide_walls`)\r\n\r\n                for (let i = (totalRecord+1); i <= totalList; i++) {\r\n                  if(slideWalls && slideWalls.length){\r\n                      let updateKey = totalRecord-1\r\n                      let elementNew = document.getElementById(slideWalls[i+updateKey].id);\r\n                       if (elementNew) elementNew.style.display = displayStyle;\r\n                  }\r\n                }\r\n            };\r\n\r\n            if (index === newIndexCondition || index==null) {\r\n                if(index==null){\r\n                   const Ispreview = document.getElementsByClassName(`is-prev`)\r\n                   const splideListUl = document.getElementsByClassName(`splide__list_ul`)\r\n                   const Isnext = document.getElementsByClassName(`is-next`)\r\n\r\n                    if(Ispreview.length) Ispreview[0].style.display=\"none\"\r\n                    if(Isnext.length) Isnext[0].style.display=\"none\"\r\n                    if(splideListUl) splideListUl[0].querySelector('ul').style.transform =\"translateX(0)\";\r\n                 }else{\r\n                    toggleDisplay('none');\r\n                }\r\n             } else {\r\n                toggleDisplay('block');\r\n            }\r\n        }\r\n\r\n        const settings = {\r\n            start: 0,\r\n            type: \"loop\",\r\n           //rewind: true,\r\n            speed: 1000,\r\n            perMove: 1,\r\n            loop: true,\r\n            interval: 5000,\r\n            drag: section==1 ? false : true,\r\n            //clones: 1,\r\n            perPage: section==1 ? 0 : totalRecord>3 ? 3 : totalRecord,\r\n            autoWidth: section==1 ? true : false,\r\n            gap: section==1 ? 15 : -15,\r\n            autoplay: section==1 ? false : true,\r\n            pagination: false,\r\n            arrows: section === 1 ? totalRecord !== 1 : true, \r\n            fixedHeight: true,\r\n            breakpoints: {\r\n                0: {\r\n                    perPage: 1\r\n                },\r\n                579: {\r\n                    perPage: 2\r\n                },\r\n                767: {\r\n                    perPage: 2,\r\n                },\r\n                1300: {\r\n                    perPage: 2,\r\n                },\r\n                1600: {\r\n                    perPage: 3,\r\n                }\r\n            }\r\n        };\r\n          \r\n\r\n        return (\r\n            <Splide  className={section ? 'splide__list_ul' : ''} ref={splideRef} hasTrack={false} options={settings}>\r\n                <SplideTrack>\r\n                 {children}</SplideTrack>\r\n\r\n                 <div className=\"splide__arrows splide__arrows--ltr tb_g_h_arrow_wrapper_\" role=\"navigation\" aria-label=\"Slider Navigation Wrapper\">\r\n                    <div role=\"navigation\" className=\"tb_g_h_arrow splide__arrow splide__arrow--prev tb_g_h_arrow_left__ tb__icon tb-arrow-left-alt\" aria-labelledby=\"Navigation Previous Slide\"> <button disabled={currentSlide === 0 && section==1}><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M10.8284 12.0007L15.7782 16.9504L14.364 18.3646L8 12.0007L14.364 5.63672L15.7782 7.05093L10.8284 12.0007Z\"></path></svg></button></div>\r\n                    <div role=\"navigation\" className=\"tb_g_h_arrow splide__arrow splide__arrow--next tb_g_h_arrow_right__ tb__icon tb-arrow-right-alt\" aria-labelledby=\"Navigation Next Slide\"> <button disabled={currentSlide === totalRecord - 1 && section==1}><svg xmlns=\"http://www.w3.org/2000/svg\" width={\"20px\"} height={\"20px\"} viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z\"></path></svg> </button></div>\r\n                </div> \r\n            </Splide>\r\n         );\r\n       };\r\n\r\n export default CreatedWalls;\r\n","import React from \"react\";\r\n\r\nconst Network = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-grow-1 mb-3\">\r\n      <div class=\"symbol symbol-45 symbol-light me-2 social_user_img\">\r\n        <span class=\"sk_img\"></span>\r\n      </div>\r\n      <div class=\"d-flex text-left flex-column conn_user_info w-25\">\r\n        <div class=\"sk_line sk_line_height_12\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Action = () => {\r\n  return <div class=\"sk_line sk_line_height_28 me-2\"></div>;\r\n};\r\n\r\nconst WallsSkeleton = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-wrap justify-content-between\">\r\n      {[1, 2].map(() => {\r\n        return (\r\n          <div className=\"col-6 px-2\">\r\n            <div class=\"ex-graphmin-height w-100\">\r\n              <div class=\"ex-recentwbox d-block p-4\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <div class=\"ex-recentwright w-100 mb-3\">\r\n                      <div\r\n                        class=\"sk_rect btn-min-w sk_img_thumb\"\r\n                        style={{ paddingBottom: \"55%\" }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <div class=\"w-100\">\r\n                      <div class=\"ex-recentwleft w-50\">\r\n                        <div class=\"sk_line sk_line_height_12\"></div>\r\n                        <div class=\"sk_line sk_line_80 sk_line_height_8\"></div>\r\n                      </div>\r\n                      <div className=\"mt-5\">\r\n                        <Network />\r\n                        <Network />\r\n                        <Network />\r\n                      </div>\r\n                      <div class=\"ex-recentwright d-flex w-100\">\r\n                        <Action />\r\n                        <Action />\r\n                        <Action />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(WallsSkeleton);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Card, CardBody, Dropdown } from \"react-bootstrap\";\r\nimport { SplideSlide } from \"@splidejs/react-splide\";\r\nimport SlideSection from \"./common/slideSection\";\r\nimport NetworkIcon from \"../../analytics-new/layout/common/networkIcon\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { getWidgetWallData } from \"../../../../actions/wallDataAction\";\r\nimport { shallowEqual, useDispatch } from \"react-redux\";\r\nimport { getWallFeeds } from \"../../../../actions/display/analytics\";\r\nimport { toggleAddFeedsSection_D } from \"../../../../actions/display/showDisplayModalAction\";\r\nimport { openCreateNewWallPopup } from \"../../../../actions/display/wallsAction\";\r\nimport DropdownComponet from \"../../walls/component/modal/Dropdown\";\r\nimport WallsSkeleton from \"./skeleton/wallsSkeleton\";\r\nimport HoverVideoPlayer from \"react-hover-video-player\";\r\nimport { baseUrl } from \"../../../../utils\";\r\nimport CreateWall from \"./common/createWall\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst CreatedWalls = (props) => {\r\n  const { allWalllist, loader } = props;\r\n  const { userData } = useSelector(state => ({ wallReducer: state.wallReducer, userData : state.authenticated.userData}),shallowEqual)\r\n\r\n  const splideRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [upgrade, setUpgrade] = React.useState(false);\r\n  const [modalData, setModalData] = React.useState({\r\n    profanity: 0,\r\n    modalShow: false,\r\n    name: \"\",\r\n    url: \"\",\r\n    wall_id: null,\r\n    autoUpdate: 1,\r\n    rename_status: 0,\r\n    callbackWall : 0\r\n  });\r\n\r\n  const [activeWall, setactiveWall] = useState(0);\r\n  const { user, UserPlan } = props.userData;\r\n\r\n  const callbackWall=(status)=>{\r\n  }\r\n\r\n  const handleCategoryClick = (startIndex) => {\r\n    if (splideRef.current) splideRef.current.splide.go(startIndex); // Move to the specific slide\r\n  };\r\n\r\n  const displayWindowOpen = (wallId) => {\r\n    dispatch(getWidgetWallData(user.ownerId, wallId));\r\n    dispatch(getWallFeeds(user.ownerId));\r\n    navigate(`/wall/preview/${wallId}`);\r\n  };\r\n\r\n  \r\n\r\n  const nevigationRedirect = (wallId=0,nevigation=0,feedId=0) =>{ \r\n\r\n     if(nevigation==1){\r\n      navigate(`/moderation/index/${wallId}`); \r\n      localStorage.setItem(\"wallId\", wallId)\r\n\r\n      }else if(nevigation==2){\r\n\r\n        navigate(`${![58].includes(UserPlan.planId)\r\n            ? \"/analytic-new/\"\r\n            : \"analytic/\"\r\n        }${wallId}`); \r\n        dispatch(getWidgetWallData(user.ownerId, wallId)) \r\n\r\n      }else if(nevigation==3){\r\n\r\n        displayWindowOpen(wallId)\r\n      \r\n      }else if(nevigation==4){  \r\n        if (!feedId.length) dispatch(toggleAddFeedsSection_D(true));\r\n        dispatch(getWidgetWallData(user.ownerId, wallId));\r\n        navigate(`/wall/index/${wallId}`)\r\n     }\r\n  }\r\n\r\n  \r\n  const clickToUpdateState = (data) => (event) => {  \r\n    dispatch(openCreateNewWallPopup(false));\r\n    const widgetCount = (allWalllist && allWalllist.length) ? allWalllist.length : 0;\r\n    if (widgetCount < userData.UserRule.walls || data.rename_status == 1)  setModalData(data)\r\n    else setUpgrade(true)\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"created-walls-section mb-5\">\r\n      <Card className=\"p-0 card-custom card-stretch\">\r\n          { allWalllist && Object.keys(allWalllist).length || loader ? (\r\n          <>\r\n            <Card.Header className=\"p-5\">\r\n              <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\r\n                <h6 class=\"card-label font-weight-bolder m-0 \">\r\n                  Created Walls\r\n                </h6>\r\n               { !loader ? <div className=\"\">\r\n                  <Link to={\"/walls\"} className=\"text-secondary font-size-base\">\r\n                    View All\r\n                  </Link>\r\n                </div> : null }\r\n              </div>\r\n            </Card.Header>\r\n\r\n         <CardBody className=\"p-5\">\r\n\r\n           { loader ? <WallsSkeleton/> : \r\n             <> \r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"custom-pagination\">\r\n                    { Object.keys(allWalllist).length && allWalllist.map((e, index) => (\r\n                      <button\r\n                        className={`btn  ${\r\n                          activeWall == index || Object.keys(allWalllist).length==1\r\n                            ? \"btn-primary\"\r\n                            : \"btn-outline-dark\"\r\n                        } me-1 rounded mb-1 text-capitalize overflow-hidden text-nowrap text-ellipsis text-capitalize mx-w-200`}\r\n                        key={index}\r\n                        onClick={() => {\r\n                          handleCategoryClick(index);\r\n                          setactiveWall(index);\r\n                        }}\r\n                      >\r\n                        {e.name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                 \r\n\r\n                  <div className=\"custom_primary_secondary d-flex justify-content-end mt-1\">\r\n                    <CreateWall modalData={modalData} widgetWallsData={allWalllist} upgrade={upgrade} clickToUpdateState={clickToUpdateState} setUpgrade={setUpgrade} setupdateWall={''} setModalData={setModalData} isCollaboratorRole={JSON.parse(localStorage.getItem('isCollaborator'))} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Splide Slider */}\r\n   \r\n              <SlideSection section={1} totalRecord={allWalllist.length} splideRef={splideRef} setactiveWall={setactiveWall}>\r\n                {allWalllist.map((e, index) => {\r\n                  return (\r\n                    <SplideSlide data-feedList={e.feedList} data-wallId={e.id} className={`splide__slide_walls`} key={index}>\r\n                      <div key={activeWall+index}  \r\n                        className={`created-walls-card h-100 splide__slide-${index}`}>\r\n                        <div className=\"created-walls-card-inner h-100 p-5\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                               <div  className=\"wall_cont_wrap innter_wall_cont_wrap_ cursor-pointer created-walls-card-img p-0\">\r\n                                  <a\r\n                                     to={`#`}\r\n                                      onClick={() => {  \r\n                                        nevigationRedirect(e.id,4,e.feedList);\r\n                                      }}\r\n                                    className=\"card card-custom overlay shadow-none overflow-hidden rounded-0\"\r\n                                  > \r\n                                     <HoverVideoPlayer\r\n                                          videoSrc={`${baseUrl(`theme-media/theme-video/${e.signageTheme}.mp4`)}`}\r\n                                          width={391} height={300}\r\n                                          style={{\r\n                                            width: '100%',\r\n                                            paddingTop: '-10px',\r\n                                          }}\r\n                                      />\r\n                                  <img\r\n                                    role=\"img\"\r\n                                    src={`${baseUrl(`theme-media/theme-thumb/${e.signageTheme}.png`)}`}\r\n                                    height={250}\r\n                                    width={\"100%\"}\r\n                                  />\r\n\r\n                              <div className=\"overlay-layer\">\r\n                                <img  src={baseUrl(`dashboard/icons/play-icon.svg`)} height={46} width={46} className=\"img-fluid\" alt=\"play\" />\r\n                              </div>\r\n                              </a>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                              <div className=\"mt-3 d-flex flex-column justify-content-between h-100\">\r\n                                <div className=\"\">\r\n                                  <div className=\"d-flex justify-content-between mb-8\">\r\n                                    <a\r\n                                      to={`#`}\r\n                                      onClick={() => {  \r\n                                        nevigationRedirect(e.id,4,e.feedList);\r\n                                      }}>\r\n                                      <div className=\"\">\r\n                                        <h5 className=\"mb-2 text-capitalize d-flex align-items-center\">\r\n                                          {e.name}\r\n                                          { e.activeScreen ?  <span className=\"status_active\"></span> : null }\r\n                                        </h5>\r\n                                        <p className=\"text-secondary text-capitalize m-0\">\r\n                                          {`${e.themeName} : ${e.themeLayout}`}\r\n                                        </p>\r\n                                      </div>\r\n                                    </a>\r\n                                    <div className=\"\">\r\n                                      <p className=\"text-secondary font-weight-bold font-size-h6 m-0\">\r\n                                        Posts: {e.totalPostCount}  \r\n                                      </p>\r\n                                    </div>\r\n                                  </div>\r\n                                  {e.feedList &&\r\n                                  Object.keys(e.feedList).length ? (\r\n                                    <div className=\"created-walls-network mb-8\">\r\n                                      <ul className=\"m-0\">\r\n                                        {e.feedList.map((fdata, key) => {\r\n                                          return (\r\n                                            <li className=\"d-flex align-items-center mb-4 \">\r\n                                              <NetworkIcon\r\n                                                isDashboard={\r\n                                                  \"me-2 text-center text-white\"\r\n                                                }\r\n                                                icon={fdata.socialIcon}\r\n                                              />\r\n                                              {fdata.name}\r\n                                            </li>\r\n                                          );\r\n                                        })}\r\n                                      </ul>\r\n                                    </div>\r\n                                  ) : null}\r\n                                </div>\r\n\r\n                                <div className=\"d-flex align-items-center justify-content-between mb-3\">\r\n                                  <div className=\"created-walls-report d-flex align-items-center\">\r\n                                    <a\r\n                                       onClick={ ()=>nevigationRedirect(e.id,1) }\r\n                                       href=\"#\"\r\n                                       className=\" d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M6.99979 7V3C6.99979 2.44772 7.4475 2 7.99979 2H20.9998C21.5521 2 21.9998 2.44772 21.9998 3V16C21.9998 16.5523 21.5521 17 20.9998 17H17V20.9925C17 21.5489 16.551 22 15.9925 22H3.00728C2.45086 22 2 21.5511 2 20.9925L2.00276 8.00748C2.00288 7.45107 2.4518 7 3.01025 7H6.99979ZM8.99979 7H15.9927C16.549 7 17 7.44892 17 8.00748V15H19.9998V4H8.99979V7ZM15 9H4.00255L4.00021 20H15V9ZM8.50242 18L4.96689 14.4645L6.3811 13.0503L8.50242 15.1716L12.7451 10.9289L14.1593 12.3431L8.50242 18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Moderate\r\n                                    </a>\r\n                                    <a\r\n                                      href=\"#\"\r\n                                       onClick={()=> nevigationRedirect(e.id,2) }\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M2 13H8V21H2V13ZM16 8H22V21H16V8ZM9 3H15V21H9V3ZM4 15V19H6V15H4ZM11 5V19H13V5H11ZM18 10V19H20V10H18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Analytic\r\n                                    </a>\r\n                                    <a\r\n                                      href=\"#\"\r\n                                      onClick={() => nevigationRedirect(e.id,3) }\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M4 16H20V5H4V16ZM13 18V20H17V22H7V20H11V18H2.9918C2.44405 18 2 17.5511 2 16.9925V4.00748C2 3.45107 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44892 22 4.00748V16.9925C22 17.5489 21.5447 18 21.0082 18H13Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Display\r\n                                    </a>\r\n                                  </div>\r\n                                  <div className=\"\">\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"p-0 border-0 bg-transparent\"\r\n                                    >\r\n                                      <div className=\"card-toolbar\">\r\n                                        <Dropdown onClick={()=>nevigationRedirect()} align={'end'}>\r\n                                          <Dropdown.Toggle className=\"btn btn-link btn-icon btn-sm btn-clean btn-after-none w-auto\">\r\n                                           <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              height={\"20px\"}\r\n                                              width={\"20px\"}\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5C14 3.9 13.1 3 12 3ZM12 17C10.9 17 10 17.9 10 19C10 20.1 10.9 21 12 21C13.1 21 14 20.1 14 19C14 17.9 13.1 17 12 17ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"></path>\r\n                                            </svg>\r\n                                          </Dropdown.Toggle>\r\n                                          <Dropdown.Menu style={{ width: 175 }}>\r\n                                            <DropdownComponet callbackWall={callbackWall}  props={{'wallsData' : e, 'clickToUpdateState' : clickToUpdateState }} clickToUpdateState={clickToUpdateState} ownerId={user.ownerId} userData={props.userData}/>\r\n                                          </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                      </div>\r\n                                    </button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </SplideSlide>\r\n                  );\r\n                })}\r\n              </SlideSection>\r\n             </> \r\n             }\r\n            </CardBody>\r\n          </>\r\n        ) : (\r\n          <div className=\"col-12\">\r\n            <div className=\"d-flex justify-content-center w-100\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={()=>clickToUpdateState({\r\n                  modalShow: true,\r\n                  wall_id: null,\r\n                  autoUpdate: 1,\r\n                  callbackWall : 1\r\n                })}\r\n                className=\"btn btn-link d-flex flex-wrap flex-column align-content-center add_card_button create-new-wall cursor-pointer px-5 w-100\"\r\n              >\r\n                <CreateWall firstWall={1} widgetWallsData={allWalllist} modalData={modalData} upgrade={upgrade} clickToUpdateState={clickToUpdateState} setUpgrade={setUpgrade} setupdateWall={''} setModalData={setModalData} isCollaboratorRole={JSON.parse(localStorage.getItem('isCollaborator'))} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(CreatedWalls);\r\n"],"names":["NetworkIcon","props","includes","icon","_jsxs","id","xmlns","width","height","viewBox","children","_jsx","d","fill","transform","className","isDashboard","size","React","_ref","setactiveWall","section","totalRecord","splideRef","currentSlide","setCurrentSlide","useState","useEffect","current","splide","on","newIndex","manageSlider","index","arguments","length","undefined","totalList","toggleDisplay","displayStyle","slideWalls","document","getElementsByClassName","i","updateKey","elementNew","getElementById","style","display","Ispreview","splideListUl","Isnext","querySelector","settings","start","type","speed","perMove","loop","interval","drag","perPage","autoWidth","gap","autoplay","pagination","arrows","fixedHeight","breakpoints","Splide","ref","hasTrack","options","SplideTrack","role","disabled","Network","class","Action","WallsSkeleton","map","paddingBottom","CreatedWalls","allWalllist","loader","userData","useSelector","state","wallReducer","authenticated","shallowEqual","useRef","dispatch","useDispatch","navigate","useNavigate","upgrade","setUpgrade","modalData","setModalData","profanity","modalShow","name","url","wall_id","autoUpdate","rename_status","callbackWall","activeWall","user","UserPlan","status","nevigationRedirect","wallId","nevigation","feedId","localStorage","setItem","planId","getWidgetWallData","ownerId","getWallFeeds","displayWindowOpen","toggleAddFeedsSection_D","clickToUpdateState","data","event","openCreateNewWallPopup","UserRule","walls","Card","Object","keys","_Fragment","Header","Link","to","CardBody","e","onClick","startIndex","go","CreateWall","widgetWallsData","setupdateWall","isCollaboratorRole","JSON","parse","getItem","SlideSection","SplideSlide","feedList","HoverVideoPlayer","videoSrc","baseUrl","signageTheme","paddingTop","src","alt","activeScreen","themeName","themeLayout","totalPostCount","fdata","key","socialIcon","href","Dropdown","align","Toggle","Menu","DropdownComponet","firstWall"],"sourceRoot":""}