{"version":3,"file":"static/js/7820.009615aa.chunk.js","mappings":"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","sources":["app/Display/analytics-new/content/components/authorInfo.js","app/Display/analytics-new/layout/common/networkIcon.js","app/Display/dashboard-new/components/skeleton/socialactionSkeleton.js","app/Display/dashboard-new/components/socialAction.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getFirstLetterOfString, manageSpace } from \"../../../../../utils\";\nimport moment from \"moment\";\nimport NetworkIcon from \"../../layout/common/networkIcon\";\n\nconst AuthorInfo = (props) => {\n\n  const { isSplide,link,networkId,topperfoming,picture,authorUsername,authorName }  =props\n  const [imageError, setImageError] = useState(false);\n\n  const redirectTo = (id, username, link) => {\n\n    if (![7].includes(id) && link && username) {\n\n      let redirectLink = ``\n\n      if (props.link.includes('tiktok')) {\n        redirectLink = `/search?q=${manageSpace(username)}`\n      } else if (props.link.includes('linkedin')) {\n        redirectLink = `/search/results/all/?keywords=${manageSpace(username)}`\n      }\n      else {\n        redirectLink = `/${manageSpace(username)}`\n      }\n      window.open(`https://${new URL(props.link).hostname}${redirectLink}`)\n    }\n  }\n\n  return (\n    props && props != undefined ?\n      <div onClick={() => redirectTo(props.networkId, props.authorUsername, props.link)} className={`d-flex align-items-center ${!props.topperfoming ? 'w-50' : 'me-10'}`}>\n\n        <div className=\"position-relative\">\n          <div className=\"symbol symbol-35 symbol-light me-3 con_user_img cursor-pointer rounded-circle overflow-hidden\">\n            {imageError ? (\n              <div className=\"symbol-image\">{getFirstLetterOfString(props.authorName)}</div>\n            ) : (\n              <img\n                onError={() => setImageError(true)}\n                src={props.picture}\n                className=\"img-fluid symbol-image\"\n                width={\"20px\"}\n                height={\"20px\"}\n              />\n            )}\n          </div>\n\n\n          {props.isIcon && !props.nIcon ? (\n            <div className=\"m_social_icon_new card-shadow position-absolute bg-white rounded-circle d-flex align-items-center justify-content-center\">\n              <NetworkIcon icon={props.isIcon} />\n            </div>\n          ) : null}\n        </div>\n        <div class=\"d-flex text-left flex-column conn_user_info cursor-pointer\">\n          <p class=\"text-dark mb-0 font-weight-boldest overflow-hidden text-nowrap text-ellipsis author_name text-capitalize\">\n            {props.authorName}\n          </p>\n          <p class=\"m-0 d-flex conn_auther_info\">\n            <small class=\"overflow-hidden text-nowrap text-ellipsis post_count me-2 \">\n              {props.authorUsername ? `@${props.authorUsername}` : props.authorName}\n            </small>\n            {props.date ?\n              <><small class=\"overflow-hidden text-nowrap text-ellipsis post_count me-2 \">.</small>\n                <small class=\"overflow-hidden text-nowrap text-ellipsis \">\n                  {moment(new Date(props.date * 1000)).fromNow()}\n                </small></> : null}\n          </p>\n        </div>\n      </div> : null\n  );\n};\n\nexport default React.memo(AuthorInfo);\n","import React from \"react\";\n\nconst NetworkIcon = (props) => {\n  return (\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\n  );\n};\n\nexport default React.memo(NetworkIcon);\n","import React from \"react\";\nconst SocialactionSkeleton = () => {\n  return (\n    <div\n      class=\"scroll scroll-pull\"\n      data-scroll=\"true\"\n      data-wheel-propagation=\"true\"\n    >\n      {[1, 2, 3, 4].map(() => {\n        return (\n          <div class=\"d-flex align-items-center p-2 border rounded mb-3\">\n            <div class=\"d-flex align-items-center flex-grow-1\">\n              <div class=\"symbol symbol-45 symbol-light me-2 con_user_img\">\n                <span class=\"sk_img\"></span>\n              </div>\n              <div class=\"d-flex text-left flex-column conn_user_info w-25\">\n                <div class=\"sk_line sk_line_height_12 mb-2\"></div>\n                <div class=\"sk_line sk_line_50 sk_line_height_10 mt-2\"></div>\n              </div>\n            </div>\n            <div class=\"conn_status connnected text-right w-25\">\n              <div class=\"sk_line sk_line_height_12\"></div>\n              <div class=\"sk_line sk_line_80 sk_line_height_10\"></div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(SocialactionSkeleton);\n","    import React, { useEffect } from \"react\";\n    import { Card } from \"react-bootstrap\";\n    import AuthorInfo from \"../../analytics-new/content/components/authorInfo\";\n    import { useDispatch } from \"react-redux\";\n    import {\n    baseUrl,\n    isAppleSafari,\n    showAddAccountAlertNew,\n    } from \"../../../../utils\";\n    import { Link } from \"react-router-dom\";\n    import parse from \"html-react-parser\";\n    import SocialactionSkeleton from \"./skeleton/socialactionSkeleton\";\n    import { addUserAccount } from \"../../../Authorization/connectSocialAcc\";\n    import { MediaBaseUrl } from \"../../../../actions/api\";\n\n    const SocialAction = (props) => {\n    const { connectedAccounts, feeds, loader } = props;\n    const channel = isAppleSafari() ? window : new BroadcastChannel(\"connect\");\n    const dispatch = useDispatch();\n\n    const connectaccount = (item, reconnect) => {\n        let refresh = 0;\n        if (reconnect) {\n        refresh = 1;\n        }\n        localStorage.setItem(\"refresh\", refresh);\n        dispatch(showAddAccountAlertNew(item, \"dashboardConnect\"));\n    };\n\n    const readAuthenticationCode = (event) => {\n        const response = JSON.parse(event.data);\n        const { data, networkId, type } = response;\n        if (type == \"dashboardConnect\")\n        addUserAccount(\n            networkId,\n            data,\n            () => this.props.getSocialAccounts(),\n            localStorage.getItem(\"ownerId\"),\n            0,\n            Number(localStorage.getItem(\"refresh\"))\n        );\n        localStorage.removeItem(\"refresh\");\n    };\n\n    useEffect(() => {\n        channel.addEventListener(\"message\", readAuthenticationCode);\n        return () => {\n        channel.removeEventListener(\"message\", readAuthenticationCode);\n        };\n    }, []);\n\n    return (\n        <div className=\"col-md-6 mb-5\">\n        <div className=\"socialAccount-post-section h-100\">\n            <Card className=\"p-0 card-custom card-stretch\">\n            <Card.Header className=\"p-5\">\n                <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\n                <h6 class=\"card-label font-weight-bolder m-0 \">\n                    Social Accounts\n                </h6>\n                {connectedAccounts && Object.keys(connectedAccounts).length ? (\n                    <div className=\"\">\n                    <Link\n                        to={`/transactions#connectedAccounts`}\n                        className=\"text-secondary font-size-base\"\n                    >\n                        View All\n                    </Link>\n                    </div>\n                ) : null}\n                </div>\n            </Card.Header>\n            <Card.Body className=\"p-5\">\n                {loader ? (\n                <SocialactionSkeleton />\n                ) : (feeds && Object.keys(feeds).length) ||\n                (connectedAccounts && Object.keys(connectedAccounts).length) ? (\n                <>\n                    {feeds.map((feeddata, index) => {\n                    var btntext = \"\";\n                    if (feeddata.Feed.accountId == \"\") {\n                        btntext = \"Connect\";\n                    } else {\n                        btntext = \"Reconnect\";\n                    }\n\n                    return (\n                        <div className=\"mb-3\">\n                        <div class=\"mb-4 last-child-mb-0 d-block text-secondary cursor-pointer\">\n                            <div class=\"p-5 border rounded\">\n                            <div\n                                className=\"d-flex align-items-center pt-2 pb-2 users_row justify-content-between\"\n                                key={index}\n                            >\n                                <div className=\"d-flex align-items-center flex-grow-1\">\n                                <div className=\"symbol symbol-45 symbol-light me-4 con_user_img ms-1 flex-shrink-0\">\n                                   { ![\"fa-twitter\"].includes(feeddata.Network.icon) ? <span\n                                    style={{\n                                        backgroundImage: `url(${baseUrl(\n                                        `social-icons-feed/${feeddata.Network.icon}.svg`\n                                        )})`,\n                                        backgroundSize: \"70%\",\n                                        backgroundPosition: \"center\",\n                                        backgroundRepeat: \"no-repeat\",\n                                    }}\n                                    ></span> : \n                                       <span>\n                                         <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg> \n                                    </span>\n                                }\n                                </div>\n\n                                <div className=\"d-flex text-left flex-column conn_user_info w-75 flex-grow-1\">\n                                    <p\n                                    title=\"From Hashtag(#)\"\n                                    className=\"text-dark m-0 text-nowrap d-flex align-items-center\"\n                                    >\n                                    <strong className=\"text-dark mb-0 font-weight-boldest overflow-hidden text-nowrap text-ellipsis mx-width-250 text-capitalize\">\n                                        {parse(feeddata.Feed.feedName)}\n                                    </strong>\n                                    {feeddata.Feed.socialLink ? (\n                                        <Link\n                                            to={feeddata.Feed.socialLink}\n                                            target=\"_blank\"\n                                        >\n                                            <i className=\"fa fa-external-link-alt icon-nm ms-1\"></i>\n                                        </Link>\n                                        ) : null}\n                                    </p>\n                                </div>\n                                </div>\n\n                                <div className=\"conn_status disconnnected text-right flex-shrink-0\">\n                                {![10, 19, 15, 7, 23, 29].includes(\n                                    feeddata.Network.id\n                                ) && (\n                                    <span\n                                    className={`reconnect${feeddata.Feed.id}`}\n                                    >\n                                    <a\n                                        onClick={() =>\n                                        connectaccount(\n                                            feeddata.Network,\n                                            feeddata.Feed.accountId !== \"\"\n                                        )\n                                        }\n                                        className=\"resetAction btn btn-outline-primary btn-xs\"\n                                    >\n                                        {\" \"}\n                                        {btntext}\n                                    </a>\n                                    </span>\n                                )}\n                                </div>\n                            </div>\n                            </div>\n                        </div>\n                        </div>\n                    );\n                    })}\n\n                    {connectedAccounts && Object.keys(connectedAccounts).length\n                    ? connectedAccounts.map((e) => {\n                        const getData = e.ConnectedAccounts;\n                        return (\n                            <div className=\"mb-3\">\n                            <div class=\"mb-4 last-child-mb-0 d-block text-secondary cursor-pointer\">\n                                <div class=\"p-5 border rounded\">\n                                {\" \"}\n                                <div class=\" d-flex align-items-center justify-content-between\">\n                                   <AuthorInfo\n                                    isIcon={e.Network.icon}\n                                    picture={getData.profilePicture}\n                                    authorUsername={e.accountName}\n                                    authorName={getData.accountName}\n                                    link={\"\"}\n                                    networkId={getData.networkId}\n                                    />\n                                    <div className=\"\">\n                                    <h5>\n                                        {getData.api == 2 ? (\n                                        <div className=\"conn_status connnected text-right\">\n                                            <div className=\"conn_status_wrap font-size-lg m-0\">\n                                            <p className=\"font-weight-bolder acc_status m-0\">\n                                                <span className=\"conn_icon me-1 \">\n                                                <svg\n                                                    width=\"14\"\n                                                    height=\"14\"\n                                                    viewBox=\"0 0 14 14\"\n                                                    fill=\"none\"\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                                >\n                                                    <path\n                                                    fill-rule=\"evenodd\"\n                                                    clip-rule=\"evenodd\"\n                                                    d=\"M6.14055e-06 8.00755C0.18814 7.32675 0.822793 6.55563 1.9199 6.78186C2.78723 7.02731 3.50083 7.78774 4.0703 9.02982C7.26277 4.66659 10.0078 1.66443 13.6325 0.538126C13.9557 0.463669 14.1259 0.481481 13.89 0.744398C10.1443 3.72251 6.7572 8.04156 4.12498 13.4117C4.06359 13.5371 3.84323 13.5277 3.77008 13.3911C2.96558 11.9547 2.39412 10.554 1.58944 9.11781C1.23074 8.37519 0.77644 7.84047 6.14055e-06 8.00755Z\"\n                                                    fill=\"url(#paint0_diamond_1883_3)\"\n                                                    />\n                                                    <defs>\n                                                    <radialGradient\n                                                        id=\"paint0_diamond_1883_3\"\n                                                        cx=\"0\"\n                                                        cy=\"0\"\n                                                        r=\"1\"\n                                                        gradientUnits=\"userSpaceOnUse\"\n                                                        gradientTransform=\"translate(3.39231 4.44707) rotate(43.0921) scale(13.5428 24.6143)\"\n                                                    >\n                                                        <stop stop-color=\"#6AC259\" />\n                                                        <stop\n                                                        offset=\"0.5393\"\n                                                        stop-color=\"#6AC259\"\n                                                        />\n                                                        <stop\n                                                        offset=\"1\"\n                                                        stop-color=\"#6AC259\"\n                                                        />\n                                                    </radialGradient>\n                                                    </defs>\n                                                </svg>\n                                                </span>{\" \"}\n                                                Connected\n                                            </p>\n                                            </div>\n                                            <small className=\"font-size-sm\">\n                                            {e.Network.name} Profile\n                                            </small>\n                                        </div>\n                                        ) : (\n                                        <div className=\"conn_status disconnnected text-right\">\n                                            <div className=\"conn_status_wrap\">\n                                            {![10, 19, 15, 7, 23, 29].includes(\n                                                e.Network.id\n                                            ) && (\n                                                <a\n                                                onClick={() =>\n                                                    connectaccount(e.Network, true)\n                                                }\n                                                className=\"btn btn-outline-primary openGoogleReconnect btn-xs\"\n                                                data-action=\"reconnect\"\n                                                data-src={``}\n                                                >\n                                                Reconnect\n                                                </a>\n                                            )}\n                                            </div>\n                                            <small>{e.Network.name} Profile</small>\n                                        </div>\n                                        )}\n                                    </h5>\n                                    </div>\n                                </div>\n                                </div>\n                            </div>\n                            </div>\n                        );\n                        })\n                    : null}\n                </>\n                ) : (\n                <div\n                    className=\"not_connected_err not_connected_err_new flex-center overlay-layer d-flex flex-column flex-center\"\n                    style={{\n                    backgroundImage: `url(${MediaBaseUrl}error/not-connected-new.png)`,\n                    }}\n                >\n                    <div className=\"not_conne_overlay d-flex flex-column flex-center\">\n                    <Link\n                        to={`/transactions#connectedAccounts`}\n                        className=\"btn btn-primary\"\n                    >\n                        Connect\n                    </Link>\n                    </div>\n                </div>\n                )}\n            </Card.Body>\n            </Card>\n        </div>\n        </div>\n    );\n    };\n\n    export default React.memo(SocialAction);\n"],"names":["AuthorInfo","props","isSplide","link","networkId","topperfoming","picture","authorUsername","authorName","imageError","setImageError","useState","undefined","_jsxs","onClick","redirectTo","id","username","includes","redirectLink","manageSpace","window","open","URL","hostname","className","children","_jsx","getFirstLetterOfString","onError","src","width","height","isIcon","nIcon","NetworkIcon","icon","class","date","_Fragment","moment","Date","fromNow","React","xmlns","viewBox","d","fill","transform","isDashboard","size","SocialactionSkeleton","map","SocialAction","connectedAccounts","feeds","loader","channel","isAppleSafari","BroadcastChannel","dispatch","useDispatch","connectaccount","item","reconnect","refresh","localStorage","setItem","showAddAccountAlertNew","readAuthenticationCode","event","response","JSON","parse","data","type","addUserAccount","getSocialAccounts","getItem","Number","removeItem","useEffect","addEventListener","removeEventListener","Card","Header","Object","keys","length","Link","to","Body","feeddata","index","btntext","Feed","accountId","Network","style","backgroundImage","baseUrl","backgroundSize","backgroundPosition","backgroundRepeat","title","feedName","socialLink","target","e","getData","ConnectedAccounts","profilePicture","accountName","api","cx","cy","r","gradientUnits","gradientTransform","offset","name","MediaBaseUrl"],"sourceRoot":""}