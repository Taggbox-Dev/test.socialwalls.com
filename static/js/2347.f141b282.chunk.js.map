{"version":3,"file":"static/js/2347.f141b282.chunk.js","mappings":"uLAIA,MAAMA,UAA4BC,EAAAA,UAChCC,WAAAA,CAAYC,GACVC,MAAMD,GAEN,MAAME,GAAIC,EAAAA,EAAAA,IAAoBH,EAAMI,MAEpCC,KAAKC,MAAQ,CACXC,OAAQ,CAAC,CACPH,KAAMF,EAAEM,SAEVC,QAAS,CACJC,OAAS,CAAC,WACVC,MAAO,CACNC,OAAQ,IACRC,KAAMb,EAAMa,KACZC,WAAY,CACVC,SAAS,EACTC,OAAQ,MACRC,iBAAkB,CAChBC,MAAO,MAGXC,QAAS,CACPC,MAAM,GAERC,KAAM,CACJN,SAAS,IAGfO,YAAa,CACTC,IAAK,CACHC,aAAc,EACdC,YAAY,EACZC,UAAW,KAGfC,WAAY,CACVZ,SAAS,GAEXa,OAAQ,CACNC,MAAO,UAEZC,OAAQ,CACHV,MAAM,EAENW,WAAY,CACVN,WAAY,GACZO,SAAU,IAIfC,QAAS,CACNlB,SAAS,EACTmB,OAAQ,SAAAC,GAAsD,IAA7C,OAAE5B,EAAM,YAAE6B,EAAW,eAAEC,EAAc,EAAEC,GAAGH,EACzD,MAAO,uLAE4DG,EAAEC,OAAOC,MAAMC,WAAWL,8CAC9E7B,EAAO6B,GAAaC,4CAErC,GAEJK,YAAa,CACXC,OAAQ,CACN,CACEC,EAAI1C,EAAEM,OAAON,EAAE2C,UACfT,YAAalC,EAAEM,OAAON,EAAE2C,UACxBC,OAAQ,CACNC,MAAM7C,EAAE8C,UAAUC,OAAa,GAC/BC,UAAW,UACXC,YAAa,OACbC,YAAa,EACbC,MAAO,SACPC,SAAU,iBAEZC,MAAO,CACJC,YAAa,aAepBhB,MAAO,CAAC,CACNI,EAAG1C,EAAEM,OAAON,EAAE2C,UACdW,YAAa,OACbD,MAAO,CACLC,YAAa,OACbC,MAAO,CACLC,MAAO,OACPC,WAAY,YAKpBhC,WAAY,CACVZ,SAAS,GAEXyB,MAAO,CACLC,WAAYvC,EAAE8C,WAEhBY,KAAM,CACJpB,MAAO,CACLqB,MAAO,CACLzC,MAAM,KAIZ0C,MAAO,CACLC,UAAU,EACVC,UAAW,CACT5C,MAAM,GAERZ,OAAQ,CACNyD,QAAS,GACTC,UAAW,SAAUC,GAEnB,OAAOA,EAAMlB,OADK,GACgBkB,EAAMC,UAAU,EADhC,IACgD,MAAQD,CAC5E,KAKV,CAEAE,MAAAA,GACE,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,OAAKE,GAAG,QAAOD,UACZD,EAAAA,EAAAA,KAACG,EAAAA,EAAc,CAAChE,QAASJ,KAAKC,MAAMG,QAASF,OAAQF,KAAKC,MAAMC,OAAQM,KAAK,MAAMD,OAAQ,SAIpG,EAGF,S","sources":["app/Display/analytics-new/layout/common/graph/assetsTypeAreaChart.js"],"sourcesContent":["import React from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { reArrangeSeriesData } from \"../../../../../../utils\";\r\n\r\nclass ChartDataBasedOnUrl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const e = reArrangeSeriesData(props.data)\r\n  \r\n    this.state = {\r\n      series: [{\r\n        data: e.labels\r\n      }],\r\n      options: {\r\n           colors:  ['#546FED'],\r\n           chart: {\r\n            height: 350,\r\n            type: props.type,\r\n            animations: {\r\n              enabled: true,\r\n              easing: 'bar',\r\n              dynamicAnimation: {\r\n                speed: 1000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n          },\r\n        plotOptions: {\r\n            bar: {\r\n              borderRadius: 8,\r\n              horizontal: true,\r\n              barHeight: 15,  // Controls the height of the bar\r\n            } \r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n       legend: {\r\n            show: true,\r\n    //        position: 'top',\r\n            itemMargin: {\r\n              horizontal: 20,\r\n              vertical: 0\r\n            },\r\n          },\r\n          \r\n         tooltip: {\r\n            enabled: true, \r\n            custom: function({ series, seriesIndex, dataPointIndex, w }) {\r\n              return `\r\n                <div style=\"padding: 10px; background-color: #fff; border: 1px solid #ccc; border-radius: 5px;\">\r\n                   <span style=\"color:#9b9ea3; font-size:13px\"> ${dataPointIndex,w.config.xaxis.categories[seriesIndex]}</span><br/>\r\n                   <strong>${series[seriesIndex][dataPointIndex]} Hours </strong>\r\n                </div>`;\r\n            }\r\n          },\r\n        annotations: {\r\n          points: [\r\n            {\r\n              x:  e.labels[e.maxIndex], // Dynamically set based on last category\r\n              seriesIndex: e.labels[e.maxIndex],\r\n              marker: {\r\n                size: e.newSeries.length > 0 ? 0 : 0, // Highlight the last marker\r\n                fillColor: \"#546FED\",\r\n                strokeColor: \"#fff\",\r\n                strokeWidth: 2,\r\n                shape: \"circle\",\r\n                cssClass: \"screen-marker\", // Apply custom CSS class for blinking effect\r\n              },\r\n              label: {\r\n                 borderColor: \"#546FED\",\r\n              //    offsetY: 0, // Move the label 10px upwards\r\n              // //   position: 'left', // or 'right', 'top', 'bottom'\r\n              //    text: e.newSeries[e.maxIndex] ?  e.newSeries[e.maxIndex] + ' '+  e.series[e.maxIndex]+ ' Hours' : '',\r\n              //    style: {\r\n              //     color: \"#546FED\",\r\n              //     background: \"transparent\", // Make label background transparent\r\n              //     zIndex: 0, // Lower z-index to ensure marker is on top\r\n              //     flexWrap: 'wrap',\r\n              //     wordWrap: 'break-word' ,\r\n              //     transform: 'rotate(90deg)', // Rotate the text to create a vertical effect\r\n              //   },\r\n               // orientation: \"vertical\", // Custom orientation for vertical label\r\n               },\r\n            }],\r\n          xaxis: [{\r\n            x: e.labels[e.maxIndex],\r\n            borderColor: '#000',\r\n            label: {\r\n              borderColor: '#fff',\r\n              style: {\r\n                color: '#000',\r\n                background: '#fff',\r\n              },\r\n            }\r\n          }],\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        xaxis: {\r\n          categories: e.newSeries,\r\n        },\r\n        grid: {\r\n          xaxis: {\r\n            lines: {\r\n              show: true\r\n            }\r\n          }\r\n        },\r\n        yaxis: {\r\n          reversed: false,\r\n          axisTicks: {\r\n            show: true\r\n          },\r\n          labels: {\r\n            rotate: -35, // Rotate the labels by -35 degrees\r\n            formatter: function (value) {\r\n              const maxLength = 12; // Define your max length\r\n              return value.length > maxLength ? value.substring(0, maxLength) + '...' : value;\r\n            }\r\n          }\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"chart\">\r\n           <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={350} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartDataBasedOnUrl"],"names":["ChartDataBasedOnUrl","React","constructor","props","super","e","reArrangeSeriesData","data","this","state","series","labels","options","colors","chart","height","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","plotOptions","bar","borderRadius","horizontal","barHeight","dataLabels","stroke","curve","legend","itemMargin","vertical","tooltip","custom","_ref","seriesIndex","dataPointIndex","w","config","xaxis","categories","annotations","points","x","maxIndex","marker","size","newSeries","length","fillColor","strokeColor","strokeWidth","shape","cssClass","label","borderColor","style","color","background","grid","lines","yaxis","reversed","axisTicks","rotate","formatter","value","substring","render","_jsx","children","id","ReactApexChart"],"sourceRoot":""}