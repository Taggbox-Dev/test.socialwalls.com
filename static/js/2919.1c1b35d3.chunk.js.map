{"version":3,"file":"static/js/2919.1c1b35d3.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/graph/sentimentChart.js","app/Display/analytics-new/layout/skeleton/imageSkeleton.js","app/Display/dashboard-new/components/liveTrend.js"],"sourcesContent":["\nimport React, { PureComponent } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport moment from \"moment\";\nexport default class SentimentChart extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    const getData = this.props.contentAnalyticsData.newSeries && this.props.contentAnalyticsData.newSeries[0]['data']\n    const lastCategory = getData && Object.keys(getData).length && getData.length-1; // Use dynamic category if needed\n    const seriesData   = getData && Object.keys(getData).length && getData;\n    const maxData = getData && Object.keys(getData).length && getData.some(value => value[1] > 0) ? 1 : 0;\n\n    const uniqueData = getData && Object.keys(getData).length && getData.reduce((acc, item) => {\n      let getItem = Number(item[1])\n       if (!acc.includes(getItem)) {\n        acc.push(getItem);\n      }\n      return acc;\n    }, []);\n    \n   \n    this.state = {\n      series: this.props.contentAnalyticsData.newSeries,\n      options: {\n        colors: [\"#546FED\"],\n        chart: {\n          id: \"area-datetime\",\n          toolbar: { show: false },\n          type: \"line\",\n          animations: {\n            enabled: true,\n            easing: \"linear\",\n            dynamicAnimation: {\n              speed: 1000,\n            },\n          },\n          height: 350,\n          zoom: { enabled: false },\n        },\n        legend: {\n          show: true,\n          position: \"top\",\n          itemMargin: {\n            horizontal: 20,\n            vertical: 0,\n          },\n        },\n        dataLabels: { enabled: false },\n        markers: { \n        size: maxData && uniqueData.length>1 ? 4 : 0, style: \"hollow\" },\n        stroke: {\n          width: [maxData ? 4 : 0],\n          curve: \"straight\",\n        },\n        xaxis: {\n          type: \"datetime\", \n          min: this.props.contentAnalyticsData.unixDate && this.props.contentAnalyticsData?.unixDate[0],\n          max: (this.props.contentAnalyticsData.unixDate && this.props.contentAnalyticsData?.unixDate[lastCategory]) + (2 * 60 * 60 * 1000), // Subtract 2 hours from the end time\n          labels: {  \n            formatter: (value) => {\n              console.log(moment(value).format('HH:mm'),'valuevaluevalue')\n              return moment(value).format('HH:mm')\n            }\n          },\n          tooltip: {\n            shared: true,\n            intersect: false, // Allows tooltip to show when hovering near the points\n            formatter: function (value) {\n              return moment(value).format('DD-MM-YY HH:mm')\n            },\n            \n          }\n          ,tickPlacement: 'on', // Optional: places ticks directly on the x-axis labels\n\n        },\n        yaxis: {\n          min: 0,   // Fixing the y-axis minimum value to 0\n          max: 100, // Fixing the y-axis maximum value to 100\n          labels: {\n            formatter: function (value) {\n              return Math.round(value); // Rounds the value to the nearest integer\n            }\n          }\n        },\n      \n        annotations: {\n          points: [\n            {\n              x: seriesData ? lastCategory && seriesData[lastCategory][0]-1 : 0, // Dynamically set based on last category\n              y: seriesData ? lastCategory && seriesData[lastCategory][1] : 0, // Last data point\n              marker: {\n                size: maxData ? 10 : 0, // Highlight the last marker\n                fillColor: \"#546FED\",\n                strokeColor: \"#2545d7\",\n                shape: \"circle\",\n                cssClass: \"blinking-marker\", // Apply custom CSS class for blinking effect\n              },\n              label: {\n                borderColor: \"#546FED\",\n                offsetY: -10, // Move the label higher to avoid overlap\n                offsetX: -10, // Move the label higher to avoid overlap\n                style: {\n                  color: \"#546FED\",\n                  background: \"transparent\", // Make label background transparent\n                  zIndex: 0, // Lower z-index to ensure marker is on top\n                },\n                //text: `${lastCategory && seriesData[lastCategory][1]}`,\n              },\n            }],\n          yaxis: [\n            {\n              y: 30,\n              y2: 0,\n              borderColor: \"transparent\",\n              fillColor: \"#f7caca\", // Color for 0-30 range\n            },\n            {\n              y: 60,\n              y2: 30,\n              borderColor: \"transparent\",\n              fillColor: \"#f9debe\", // Color for 30-60 range\n            },\n            {\n              y: 100,\n              y2: 60,\n              borderColor: \"transparent\",\n              fillColor: \"#cfe7d5\", // Color for 60-100 range\n            },\n          ],\n        },\n        tooltip: {\n          enabled: true,\n          x: { format: \"dd MMM yyyy\" },\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\n\n             const seriesData = series[0][dataPointIndex]\n              return (!maxData ? \"\" : \n                seriesData<=30 ?\n                `<div class=\"apexcharts-tooltip-item bg-red\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji5.svg\">` +\n                `<div><strong>Negative</strong><br/>` + `${seriesData}%` +`</div></div>`\n                  : seriesData<=60 ? \n                `<div class=\"apexcharts-tooltip-item bg-yelow\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji3.svg\">` + \n                `<div><strong>Neutral</strong><br/>` + `${seriesData}%` + `</div></div>`\n                  :\n                `<div class=\"apexcharts-tooltip-item bg-green\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji1.svg\">` +\n                `<div><strong>Positive</strong><br/>` + `${seriesData}%` + `</div></div>`\n              )\n          },\n        },\n        grid: {\n          show: false, // Enable or disable the entire grid (optional)\n        },\n      },\n      responsive: [\n        {\n          // breakpoint: 991,\n          options: {\n            chart: {\n              height: 300,\n            },\n          },\n          // breakpoint: 767,\n          options: {\n            chart: {\n              height: 280,\n            },\n          },\n        },\n      ],\n    };\n  }\n\n  render() {\n\n    return (\n     <> \n      <ReactApexChart\n        options={this.state.options}\n        series={this.state.series}\n        type=\"line\"\n        height={350}\n      />\n           \n     </> \n    );\n  }\n}\n","import React from \"react\";\nimport { baseUrl } from \"../../../../../utils\";\n\nconst ImageSkeleton = (props) => {\n  return (\n    <div className=\"py-1 text-center\" style={{ backgroundImage: `url(${baseUrl(`dashboard/analytic/content-analytis-5.svg`)})` }}></div>\n  );\n};\n\nexport default React.memo(ImageSkeleton)","import React, { useState } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport SentimentChart from \"../../analytics-new/layout/common/graph/sentimentChart\";\nimport { reArrangeSeriesSentiment } from \"../../../../utils\";\nimport { getsentimentLiveTrendMore } from \"../../../../actions/display/dashboardActions\";\nimport { useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport ImageSkeleton from \"../../analytics-new/layout/skeleton/imageSkeleton\";\nimport { togglePlanSection_D } from \"../../../../actions/display/showDisplayModalAction\";\n\nconst LiveTrend = (props) => {\n\n    const { live_trend, loader, leaderBoard, nevigationRedirect, isUpgrade } = props\n\n    const [activeTime, setActiveTime] = useState(0);\n    const dispatch = useDispatch();\n\n    const getSentimentData = (value) => {\n        setActiveTime(value);\n        dispatch(getsentimentLiveTrendMore(value));\n    };\n\n    const initialScore = live_trend?.initiallastScore?.length\n        ? Number(live_trend.initiallastScore[0].sentiment)\n        : null;\n\n    if (initialScore) live_trend.data[0] = initialScore;\n\n    const sentimentAnalytics = live_trend && Object.keys(live_trend).length\n        ? reArrangeSeriesSentiment([live_trend], 1)\n        : [];\n\n    const hasData = live_trend?.initiallastScore?.length > 0;\n    const hasLeaderboard = leaderBoard?.data?.length > 0;\n\n    return (\n        <div className={`mb-5 col-lg-${hasData || hasLeaderboard ? '5' : '5'}`}>\n            <div className=\"created-walls-section h-100\">\n                <Card className=\"p-0 card-custom card-stretch\">\n                    <Card.Header className=\"p-5 mb-8\">\n                        <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\n                            <h6 className=\"card-label font-weight-bolder m-0\">Live Sentiment  Trend</h6>\n                            <div className=\"text-secondary font-size-sm\">\n                                {moment().format('hh:mm A MMMM D, YYYY')}\n                            </div>\n                        </div>\n                    </Card.Header>\n\n                    {(hasLeaderboard || hasData || loader) && isUpgrade ? (\n                        <>\n                            <div className=\"date-filter date-filter-2\">\n                                <Form.Select\n                                    value={activeTime}\n                                    onChange={(e) => getSentimentData(e.target.value)}\n                                    size=\"md\"\n                                >\n                                    <option value={1}>Last 24 Hours</option>\n                                    <option value={2}>Last 48 Hours</option>\n                                </Form.Select>\n                            </div>\n\n                            { loader ? (\n                                 <div className=\"home-sentiment h-100\"><ImageSkeleton img={4} /></div>\n                            ) : (\n                                <SentimentChart contentAnalyticsData={sentimentAnalytics} type=\"line\" />\n                            )}\n                        </>\n                     ) : (\n\n                        <div className=\"p-6 card-body\">\n                            <div className={`not_connected_err ${hasLeaderboard ? 'not_connected_err_new_2' : 'not_connected_err_new'} flex-center overlay-layer d-flex flex-column flex-center`}>\n                                <p className=\"text-dark w-70 text-center font-size-h6\">\n                                     { !isUpgrade ? `Create a feed and instantly discover your audience's sentiments about your event in real time.` : \n                                     `Find out what your audience feels about the event with AI sentiment analysis.` }\n                                </p>\n                                <div className=\"not_conne_overlay d-flex flex-column flex-center\">\n                                    <a\n                                        onClick={() => !isUpgrade ? dispatch(togglePlanSection_D(true)) : nevigationRedirect()}\n                                        className=\"btn btn-primary\"\n                                        href=\"#\"\n                                    >\n                                        { !isUpgrade ? 'Upgrade Now' : 'Add Feed' }\n                                    </a>\n                                </div>\n                                \n                            </div>\n                        </div>\n                    )}\n                </Card>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(LiveTrend);\n"],"names":["SentimentChart","PureComponent","constructor","props","_this$props$contentAn","_this$props$contentAn2","super","getData","this","contentAnalyticsData","newSeries","lastCategory","Object","keys","length","seriesData","maxData","some","value","uniqueData","reduce","acc","item","getItem","Number","includes","push","state","series","options","colors","chart","id","toolbar","show","type","animations","enabled","easing","dynamicAnimation","speed","height","zoom","legend","position","itemMargin","horizontal","vertical","dataLabels","markers","size","style","stroke","width","curve","xaxis","min","unixDate","max","labels","formatter","console","log","moment","format","tooltip","shared","intersect","tickPlacement","yaxis","Math","round","annotations","points","x","y","marker","fillColor","strokeColor","shape","cssClass","label","borderColor","offsetY","offsetX","color","background","zIndex","y2","custom","_ref","seriesIndex","dataPointIndex","w","grid","responsive","render","_jsx","_Fragment","children","ReactApexChart","ImageSkeleton","className","backgroundImage","baseUrl","React","LiveTrend","_live_trend$initialla","_live_trend$initialla2","_leaderBoard$data","live_trend","loader","leaderBoard","nevigationRedirect","isUpgrade","activeTime","setActiveTime","useState","dispatch","useDispatch","initialScore","initiallastScore","sentiment","data","sentimentAnalytics","reArrangeSeriesSentiment","hasData","hasLeaderboard","_jsxs","Card","Header","Form","Select","onChange","e","getSentimentData","target","getsentimentLiveTrendMore","img","onClick","togglePlanSection_D","href"],"sourceRoot":""}