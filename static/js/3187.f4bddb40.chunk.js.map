{"version":3,"file":"static/js/3187.f4bddb40.chunk.js","mappings":"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","sources":["app/Display/analytics-new/content/components/tagCloud.js","app/Display/analytics-new/layout/common/sectionHeading.js","app/Display/analytics-new/utils/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4plugins_wordCloud from \"@amcharts/amcharts4/plugins/wordCloud\";\nimport SVG from \"react-inlinesvg\";\nimport { toAbsoluteUrl } from \"../../utils\";\nimport { Card, CardBody } from \"react-bootstrap\";\nimport SectionHeading from \"../../layout/common/sectionHeading\";\n\nclass Tagcloud extends PureComponent {\n  state = {\n    noData: false,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    var chart = am4core.create(\"wordCloud\", am4plugins_wordCloud.WordCloud);\n    var series = chart.series.push(new am4plugins_wordCloud.WordCloudSeries());\n\n    series.accuracy = 4;\n    series.step = 15;\n    series.rotationThreshold = 0.7;\n    series.maxCount = 200;\n    series.minWordLength = 2;\n    series.fontFamily = \"inter, sans-serif\";\n    series.maxFontSize = am4core.percent(Object(this.props.wordCloud).length>15 ? 30 : 15);\n    chart.logo.disabled = true;\n    series.colors = new am4core.ColorSet();\n    series.angles = [0, -90];\n    series.fontWeight = \"600\";\n    series.dataFields.word = \"tag\";\n    series.dataFields.value = \"count\";\n    series.labels.template.propertyFields.fill = \"color\";\n    series.labels.template.tooltipText = \"{word}:\\n[bold]{value}[/]\";\n    series.data = this.props.wordCloud;\n    setTimeout(() => this.setState({ isLoading: false }), 2000);\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    const { wordCloud } = this.props;\n\n    return (\n      <>\n        <Card className=\"sw-card-custom gutter-b card-shadow mb-5\">\n         <SectionHeading  section={2}  title={'Word Cloud'} />\n          <CardBody className=\"p-5\">\n                <div className=\"overflow-hidden\">\n                  <div\n                    id=\"wordCloud\"\n                    style={{\n                      width: \"100%\",\n                      minHeight: 350,\n                      display: !isLoading && wordCloud.length ? `block` : `none`,\n                    }}\n                  ></div>\n                </div>\n                {isLoading || !wordCloud.length ? (\n                  <SVG\n                    className=\"text-muted\"\n                    src={toAbsoluteUrl(\"/svg/word-cloud-1.svg\")}\n                    height={370}\n                    width={'100%'}\n                  />\n                ) : null}\n             \n          </CardBody>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default Tagcloud;\n","import { Button, CardHeader, CardTitle } from \"react-bootstrap\";\nimport { baseUrl } from \"../../../../../utils\";\n\nconst SectionHeading = (props) => {\n\n  const { title, section, cardTitleCss, icon, iconFull, selectedWallFeed, moreData, total, handlePopup, headingMargin, isDashboard } = props\n\n  // && selectedWallFeed && Object.keys(selectedWallFeed).length\n\n  return (\n    <CardHeader className={`${section==1 ? 'p-0 border-0' : section==2 ? 'p-5' : section==3 ? 'p-0 pb-3' : 'px-5 pt-5 border-0 pb-0'}`}>\n      <CardTitle className={cardTitleCss ? cardTitleCss : `mb-0 d-flex align-items-center justify-content-between ${isDashboard ? isDashboard : \"\"}`}>\n        <h6 class={`card-label font-weight-bolder ${!headingMargin ? 'm-0' : ''} `}>\n         { icon ? <img src={baseUrl(`dashboard/analytic/${icon}.svg`)}  height={\"20px\"} width={\"20px\"} /> : null }\n         { iconFull ? <img src={iconFull}  height={\"20px\"} width={\"20px\"} />  : null }   {title}</h6>\n         { (total > 5) || moreData ? (\n          <Button\n            variant=\"link\"\n            className=\"p-0\"\n            onClick={() => handlePopup(true)}\n          >\n            See More\n          </Button>\n        ) : null\n        }\n      </CardTitle>\n    </CardHeader>\n  );\n};\n\nexport default SectionHeading;\n","import axios from 'axios';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../actions/display/analytics';\nimport store from '../../../../redux/store';\nimport { ENV, INSTAGRAM_IMAGE_VIDEO_UPDATE, NoCameraImgPost } from '../../../../actions/api';\nimport moment from 'moment';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${ENV}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n "],"names":["Tagcloud","PureComponent","constructor","arguments","state","noData","isLoading","componentDidMount","chart","am4core","am4plugins_wordCloud","series","push","accuracy","step","rotationThreshold","maxCount","minWordLength","fontFamily","maxFontSize","Object","this","props","wordCloud","length","logo","disabled","colors","angles","fontWeight","dataFields","word","value","labels","template","propertyFields","fill","tooltipText","data","setTimeout","setState","render","_jsx","_Fragment","children","_jsxs","Card","className","SectionHeading","section","title","CardBody","id","style","width","minHeight","display","SVG","src","toAbsoluteUrl","height","cardTitleCss","icon","iconFull","selectedWallFeed","moreData","total","handlePopup","headingMargin","isDashboard","CardHeader","CardTitle","class","baseUrl","Button","variant","onClick","pathname","kFormatter","newValue","suffixNum","Math","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date","moment","format"],"sourceRoot":""}