{"version":3,"file":"static/js/6125.2d69dad1.chunk.js","mappings":"oJAEI,MAAMA,EAAMC,IAEZ,MAAM,aAAEC,EAAY,UAAEC,EAAS,MAAEC,EAAK,YAAEC,EAAW,MAAEC,GAAUL,EAmDzDM,EAAgBC,IAClB,MAAM,MAAEJ,EAAK,MAACE,EAAK,QAAEG,EAAO,cAAEC,GAAkBT,EAC1CU,EAA8B,GAAlBC,SAASJ,GAAa,EAAII,SAASJ,GAAQ,EAE7DE,EAAc,EAAE,EAAEN,EAAOI,EAAMF,EAAOG,EADvBG,SAASN,GAASM,SAASD,GACY,EAY1D,OACIE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEZ,GACFC,EAAQ,GACRF,GACAc,OAAOC,KAAKf,GAAcgB,OAAS,GAC/BC,EAAAA,EAAAA,MAAA,OAAKC,MAAM,iHAAgHL,SAAA,EACvHI,EAAAA,EAAAA,MAAA,OAAKC,MAAM,oFAAmFL,SAAA,EAC1FF,EAAAA,EAAAA,KAAA,KAAGO,MAAM,yDAAyDC,QAAUC,GA7C/DC,MACzB,MAAM,MAAEnB,EAAK,MAACE,EAAK,QAAEG,EAAO,aAAEP,EAAY,cAAEQ,GAAkBT,EAC9D,IAAIO,EAAO,EAYX,GAVAN,GACAc,OAAOC,KAAKf,GAAcgB,OAAS,GACnChB,EAAaG,cAEbG,EAAON,EAAaG,YAAc,EACtB,GAARG,GACAE,EAAc,EAAEF,EAAK,EAAE,EAAE,EAAE,EAAE,IAI7BA,GAAQA,EAAO,EAAG,CAClB,MAAMG,EAA8B,GAAlBC,SAASJ,GAAa,EAAII,SAASJ,GAAQ,EAE7DE,EAAc,EAAE,EAAEN,EAAOI,EAAMF,EAAOG,EADvBG,SAASN,GAASK,EAErC,GA2B8Fa,GAAuBT,UACzGF,EAAAA,EAAAA,KAAA,KAAGO,MAAM,qCAGRlB,EAAauB,OAASvB,EAAauB,MAAMP,OAAS,EACjDhB,EAAauB,MAAMC,KAAI,CAACC,EAAMC,IACrBhB,SAASgB,GAAc,GAC1Bf,EAAAA,EAAAA,KAAA,KACAQ,QAASA,IAAMd,EAAaoB,GAC5BE,UAAW,yDACP3B,EAAaG,aAAesB,EAAO,SAAW,gBACpCZ,SAEbY,IAEDf,SAASgB,GAAc,EACvBvB,EAAc,GACdQ,EAAAA,EAAAA,KAAA,KACIQ,QAASA,IAAMd,EAAaoB,GAC5BE,UAAW,yDACX3B,EAAaG,aAAesB,EAAO,SAAW,gBAChCZ,SAEbY,KAGLd,EAAAA,EAAAA,KAAA,KAAGO,MAAM,wDAAuDL,SAAC,QAIjEH,SAASgB,GAAc,EACvBvB,EAAc,GACdQ,EAAAA,EAAAA,KAAA,KACIQ,QAASA,IAAMd,EAAaoB,GAC5BE,UAAW,0DACX3B,EAAaG,aAAesB,EAAO,SAAW,gBAChCZ,SAEbY,IAGLf,SAASV,EAAauB,MAAMP,QAAUb,IAClCQ,EAAAA,EAAAA,KAAA,KACAQ,QAASA,IAAMd,EAAaoB,GAC5BE,UAAW,yDACP3B,EAAaG,YAAc,SAAW,gBAC5BU,SAEbV,IAILO,SAASV,EAAauB,MAAMP,QAAU,GAAKU,EAC3ChB,SAASV,EAAauB,MAAMP,QAAU,EAAIb,IAC1CQ,EAAAA,EAAAA,KAAA,KAAGO,MAAM,wDAAuDL,SAAC,QAIjEH,SAASV,EAAauB,MAAMP,QAAU,GAAKU,GAC3Cf,EAAAA,EAAAA,KAAA,KACAQ,QAASA,IAAMd,EAAaoB,GAC5BE,UAAW,0DACP3B,EAAaG,aAAesB,EAAO,SAAW,gBACpCZ,SAEbY,IAED,OAEN,MACFd,EAAAA,EAAAA,KAAA,KACAO,MAAM,yDACNC,QAAUC,GAjJGC,MAEzB,MAAM,MAACnB,EAAK,MAACE,EAAK,QAAEG,EAAO,aAAEP,EAAY,cAAGQ,GAAkBT,EAE9D,IAAIO,EAAO,EAYX,GAVAN,GACAc,OAAOC,KAAKf,GAAcgB,OAAS,GACnChB,EAAaG,cAEbG,EAAON,EAAaG,YAAc,EAC9BG,GAAQN,EAAa4B,YACrBpB,EAAc,EAAEL,EAAY,EAAE,EAAE,EAAE,EAAE,IAKxCG,GACAN,GACAc,OAAOC,KAAKf,GAAcgB,OAAS,GACnChB,EAAa4B,YAActB,EACzB,CACE,MAAMG,EAA8B,GAAlBC,SAASJ,GAAa,EAAII,SAASJ,GAAQ,EAE7DE,EAAc,EAAE,EAAEN,EAAOI,EAAMF,EAAOG,EADvBG,SAASN,GAASK,EAErC,GAwH4BoB,GAAuBhB,UAEvCF,EAAAA,EAAAA,KAAA,KAAGO,MAAM,kDAIZD,EAAAA,EAAAA,MAAA,OAAKC,MAAM,gDAA+CL,SAAA,EACxDI,EAAAA,EAAAA,MAAA,UACCC,MAAM,6EACNY,MAAO,CAAEC,MAAO,IAChBC,SAAWZ,GAnGAC,KACvB,MAAM,MAAEnB,EAAK,QAAEK,EAAO,cAAEC,GAAkBT,EAIpCkC,EADY,EACHvB,SAASW,EAAMa,OAAOC,OACrC3B,EAAc,EAHM,EAGQN,EAAO,EAAGmB,EAAMa,OAAOC,MAAO5B,EAAS0B,EAAO,EA6F/CG,CAAkBhB,GACjCe,MAAO/B,EAAMS,SAAA,EAEbF,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAGiB,MAAO,GAAGtB,SAAC,QAG5BF,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAGiB,MAAO,GAAGtB,SAAC,QAG5BF,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAGiB,MAAO,GAAGtB,SAAC,WAI5BI,EAAAA,EAAAA,MAAA,QAAMC,MAAM,yCAAwCL,SAAA,CAAC,oBACjCb,EAAaG,YAAY,UAC5CH,EAAa4B,WAAW,UAAU1B,WAI3C,MACD,EAMP,EAFoBmC,EAAAA,KAAWvC,E,iFCnL/B,MAAMwC,EAAMvC,IACZ,MAAM,iBAAEwC,EAAgB,gBAAEC,EAAe,iBAAEC,EAAgB,YAAEC,GAAgB3C,EAe7E,OAJA4C,EAAAA,EAAAA,YAAU,KATWC,MACjB,IAAIC,EAAYC,SAASC,eAAe,wBACpCC,EAAU,KACdH,EAAUI,iBAAiB,SAAU7B,IACrC8B,aAAaF,GACbA,EAAUG,YAAW,IAAMV,EAAiBI,EAAUV,QAAQ,IAAK,GACjE,EAIFS,EAAc,GACf,KAGCjC,EAAAA,EAAAA,KAAA,OAAKgB,UAAU,qDAAoDd,UAgCnEF,EAAAA,EAAAA,KAAA,QAAMyC,SAAWhC,GAAMA,EAAEiC,iBAAiBxC,UACtCF,EAAAA,EAAAA,KAAA,OAAKO,MAAM,iBAAgBL,UAC3BI,EAAAA,EAAAA,MAAA,OAAKC,MAAM,gDAA+CL,SAAA,EACtDF,EAAAA,EAAAA,KAAA,SACAO,MAAM,4BACNoC,GAAG,uBACHC,KAAK,OACLb,YAAaA,GAA4B,oBAEzC/B,EAAAA,EAAAA,KAAA,QAAAE,UACAF,EAAAA,EAAAA,KAAA,KAAGO,MAAM,8CAKX,EAKV,EADoBmB,EAAAA,KAAWC,E,uLC/DnC,MAAMkB,EAAqBnB,EAAAA,MAAW,IACpC,kCAIF,MAAMoB,UAAyBC,EAAAA,UAAUC,WAAAA,GAAA,IAAAC,EAAA,SAAAC,WAAAD,EAAAE,KAAA,KACvCC,MAAQ,CACNC,YAAa,KACb/D,WAAW,EACXC,MAAO,EACPE,MAAO,GACP6B,OAAQ,EACRjC,aAAc,CAAC,EACfG,YAAa,EACbI,QAAS,GACT0D,SAAU,MACX,KASDC,iBAAmB,WAAmB,IAAlBC,EAAQN,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAE7B,MAAM,aAAEQ,EAAY,MAAEnE,EAAK,SAAEoE,GAAaV,EAAK7D,OACzC,iBAAEwE,EAAgB,WAAEC,EAAU,aAAEC,GAAiBJ,GACjD,YAAElE,EAAW,MAAEC,EAAK,OAAE6B,EAAM,SAAEgC,EAAQ,QAAE1D,GAAYqD,EAAKG,MAE/D,IAAIW,EAAWH,EAAiBI,KAAKrB,GACjCsB,EAAYJ,EAAWI,UACvBC,EAAUL,EAAWK,QAErBC,EAAU,GACVL,GAAgBA,EAAazD,OAAS,GACxCyD,EAAajD,KAAKuD,IAChBD,EAAQE,KAAKD,EAAM5C,MAAM,IAI7ByB,EAAKqB,SAAS,CAAEhF,WAAW,IAC3BqE,EAASI,GAAUQ,EAAAA,EAAAA,IAAWN,IAAYM,EAAAA,EAAAA,IAAWL,GAAUC,EAAQK,OAAQhB,EAAWF,GAAYA,EAASjD,OAAS,EAAId,EAAQE,EAAQ6B,EAAQkC,EAAWF,EAASjD,OAAS,EAAI,EAAIiB,EAAS7B,EAAO,EAAG6D,GACzMmB,MAAMC,IACL,MAAM,aAAEC,GAAiBD,EAASE,KAE7BpB,EAEHP,EAAKqB,SAAS,CAAE/E,MAAOoF,EAAapF,MAAOF,cAAcwF,EAAAA,EAAAA,GAASF,EAAapF,MAAOC,EAAaC,EAAOG,GAAUyD,YAAasB,EAAaC,KAAMtF,WAAW,IAFlJ2D,EAAKqB,SAAS,CAAEjB,YAAasB,EAAaC,KAAMtF,WAAW,GAE+F,IAE1KwF,OAAOC,IACNC,QAAQD,MAAM,eAAgBA,EAAM,GAE1C,EAAC,KAGDlF,cAAgB,SAACoF,GAAyF,IAA9EzF,EAAW0D,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAG3D,EAAK2D,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAGvD,EAAIuD,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAGzD,EAAKyD,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAGtD,EAAOsD,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAAG5B,EAAM4B,UAAA7C,OAAA,QAAAoD,IAAAP,UAAA,GAAAA,UAAA,GAAG,EAChF,GAAb+B,EACFhC,EAAKqB,SAAS,CAAE9E,YAAaA,IACT,GAAbyF,EACPhC,EAAKqB,SACH,CAAEjF,cAAcwF,EAAAA,EAAAA,GAAStF,EAAOI,EAAMF,EAAOG,GAAU0B,OAAQA,IAC/D,IAAM2B,EAAKM,qBAEO,GAAb0B,EACPhC,EAAKqB,SACH,CACE9E,YAAaG,EACbN,cAAcwF,EAAAA,EAAAA,GAAStF,EAAOI,EAAMF,EAAOG,GAC3C0B,OAAQA,IAEV,IAAM2B,EAAKM,qBAEO,GAAb0B,GACPhC,EAAKqB,SACH,CACE7E,MAAOA,EACPJ,cAAcwF,EAAAA,EAAAA,GAAStF,EAAOC,EAAaC,EAAOG,GAClD0B,OAAQA,IAEV,IAAM2B,EAAKM,oBAEjB,EAAC,KAGDzB,iBAAoBN,IAClB2B,KAAKmB,SAAS,CAAEhB,SAAU9B,EAAOhC,YAAa,IAAK,IAAM2D,KAAKI,iBAAiB,IAAG,CACnF,CAtED2B,iBAAAA,GACE,MAAM,MAAE3F,GAAU4D,KAAK/D,OACjB,MAAEK,EAAK,YAAED,EAAW,QAAEI,GAAYuD,KAAKC,MACzC7D,GAAO4D,KAAKmB,SAAS,CAAE/E,MAAOA,EAAOF,cAAcwF,EAAAA,EAAAA,GAAStF,EAAOC,EAAaC,EAAOG,KAAY,IAAMuD,KAAKI,oBACpH,CAoEA4B,MAAAA,GACE,MAAM,gBAAEtD,EAAe,iBAAED,EAAgB,QAAEhC,EAAO,aAAEwF,GAAiBjC,KAAK/D,OACpE,UAAEE,EAAS,YAAE+D,EAAW,MAAE9D,EAAK,MAAEE,EAAK,aAAEJ,EAAY,YAAEG,GAAgB2D,KAAKC,MAEjF,OACE9C,EAAAA,EAAAA,MAAA,OAAKC,MAAM,6CAA4CL,SAAA,EACrDF,EAAAA,EAAAA,KAACqF,EAAAA,EAAW,CAACzD,iBAAkBA,EAAkBC,gBAAiBA,EAAiBC,iBAAkBqB,KAAKrB,oBAC1G9B,EAAAA,EAAAA,KAAA,OAAKgB,UAAU,kCAAiCd,UAC9CI,EAAAA,EAAAA,MAACgF,EAAAA,EAAK,CAACC,YAAU,EAAArF,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAAE,UACEI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,OAAQlB,SAAC,WAG7BF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,OAAQlB,SAAC,SAG3B,CAAC,GAAGsF,SAASJ,GAGL,MAFRpF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,OAAQlB,SAAC,eAG/BF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,OAAQlB,SAAC,WAG7BF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,OAAQlB,SAAC,kBAG7BF,EAAAA,EAAAA,KAAA,MAAImB,MAAO,CAAEC,MAAO,eAGxBpB,EAAAA,EAAAA,KAAA,SAAAE,SAEIZ,GAAYgB,EAAAA,EAAAA,MAACmF,EAAAA,SAAQ,CAACC,UAAU1F,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,IAAMC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAAC6C,EAAkB,IAAG,OAC3DQ,GAAeA,EAAYhD,OAAS,EAAKgD,EAAYxC,KAAI,CAAC8E,EAAOC,KAAWtF,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EAC3EF,EAAAA,EAAAA,KAAA,MAAAE,SAAK0F,EAAS,KACd5F,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,CAACC,QAASH,EAAMI,MAAOC,eAAgBL,EAAMM,OAAO3C,SAAU4C,OAAQP,EAAMQ,QAAQC,KAAMC,WAAYV,EAAMM,OAAOK,KAAMC,UAAWZ,EAAMY,UAAWC,KAAMb,EAAMc,UAE5K,CAAC,GAAGjB,SAASJ,GAGL,MAFRpF,EAAAA,EAAAA,KAAA,MAAAE,UACEI,EAAAA,EAAAA,MAAA,KAAGU,UAAW,SAAQjB,SAAS4F,EAAMM,OAAOS,UAAY,EAAI,GAAK,UAAWxG,SAAA,EAACF,EAAAA,EAAAA,KAAA,UAAQgB,UAAU,YAAWd,UAAEyG,EAAAA,EAAAA,IAAWhB,EAAMM,OAAOS,YAAmB,IAAEf,EAAMM,OAAOS,UAAY3G,SAAS4F,EAAMM,OAAOS,UAAY,EAAI,YAAc,iBAE1O1G,EAAAA,EAAAA,KAAA,MAAAE,UACEI,EAAAA,EAAAA,MAAA,KAAGU,UAAW,yBAAwBjB,SAAS4F,EAAMiB,WAAa,EAAI,GAAK,UAAW1G,SAAA,EAACF,EAAAA,EAAAA,KAAA,UAAQgB,UAAU,YAAWd,UAAEyG,EAAAA,EAAAA,IAAWhB,EAAMiB,aAAoB,IAAEjB,EAAMiB,WAAa7G,SAAS4F,EAAMiB,WAAa,EAAI,QAAU,aAE5N5G,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAC6G,EAAAA,EAAc,CAACC,UAAWnB,EAAMmB,eAEnC9G,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,OAAKgB,UAAU,yBAAwBd,UACrCF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAa,CAACP,KAAMb,EAAMc,MAAON,QAASR,EAAMQ,QAAQxD,eAI3D3C,EAAAA,EAAAA,KAAA,MAAAE,UACFI,EAAAA,EAAAA,MAAA,MAAI0G,QAAS,EAAE9G,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAACiH,EAAAA,EAAY,iBAQ1CjH,EAAAA,EAAAA,KAACkH,EAAAA,EAAW,CAAC5H,UAAWA,EAAWC,MAAOA,EAAOF,aAAcA,EAAcO,QAASA,EAASJ,YAAaA,EAAaC,MAAOA,EAAOI,cAAesD,KAAKtD,kBAGjK,EAEF,MAMA,GAAesH,EAAAA,EAAAA,KANU/D,IAChB,CACLM,aAAcN,EAAMM,gBAIxB,CAAwCZ,E,yGCzKjC,MAAMsE,EAAgBC,GAAY,yCAA2CA,EAsLvEV,EAAcnF,IAKvB,IAGI,IAAI8F,EAAW9F,EACf,GAAIA,GAAS,IAAM,CAIf,IAHA,IACI+F,EAAYC,KAAKC,OAAO,GAAKjG,GAAOnB,OAAS,GAC7CqH,EAAa,GACRC,EAAY,EAAGA,GAAa,EAAGA,IAAa,CAGjD,KAFAD,EAAaE,YAAyB,GAAbL,EAAkB/F,EAAQgG,KAAKK,IAAI,IAAMN,GAAc/F,GAAOsG,YAAYH,KAC7D,IAAII,QAAQ,kBAAmB,IAC/C1H,QAAU,EAAK,KACzC,CACIqH,EAAa,GAAK,IAAGA,EAAaA,EAAWM,QAAQ,IACzDV,EAAWI,EATI,CAAC,GAAI,IAAK,IAAK,IAAK,KASFH,EACrC,CACA,OAAOD,CACX,CACA,MAAOW,GACH,OAAOT,KAAKU,IAAI1G,GAAS,IAAMgG,KAAKW,KAAK3G,IAAWgG,KAAKU,IAAI1G,GAAS,KAAMwG,QAAQ,GAAM,IAAMR,KAAKW,KAAK3G,GAASgG,KAAKU,IAAI1G,EAChI,GA2OS+C,EAAc6D,GAChBC,IAAOD,GAAME,OAAO,sB","sources":["app/Display/analytics-new/layout/common/popup/paggination.js","app/Display/analytics-new/layout/common/popup/popupSearch.js","app/Display/analytics-new/layout/popup/authorpostsPopup.js","app/Display/analytics-new/utils/index.js"],"sourcesContent":["    import React from \"react\";\n\n    const PN = (props) => {\n\n    const { paginateData, isLoading, total, currentPage, limit } = props  \n\n    const onNextNavigateClick = (event) => {  \n        \n        const {total,limit, maxPage, paginateData,  managePagging } = props  \n\n        let page = 1;\n        if (\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.currentPage\n        ) {\n        page = paginateData.currentPage + 1;\n        if (page <= paginateData.totalPages) {\n            managePagging(1,currentPage,0,0,0,0,0)\n        }\n        }\n\n        if (\n        page &&\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.totalPages >= page\n        ) {\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n            const offset = parseInt(limit) * pageCount;\n            managePagging(2,0,total, page, limit, maxPage, offset)\n        }\n    };\n\n    const onPrevNavigateClick = (event) => {  \n        const { total,limit, maxPage, paginateData, managePagging } = props  \n        let page = 1;\n        if (\n        paginateData &&\n        Object.keys(paginateData).length > 0 &&\n        paginateData.currentPage\n        ) {\n        page = paginateData.currentPage - 1;\n        if (page != 0) {\n            managePagging(1,page,0,0,0,0,0)\n        }\n        }\n\n        if (page && page > 0) {\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n            const offset = parseInt(limit) * pageCount;\n            managePagging(2,0,total, page, limit, maxPage, offset)\n        }\n    };\n\n    const onUpdatePage = (page) => { \n        const { total,limit, maxPage, managePagging } = props  \n        const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\n        const offset = parseInt(limit) * parseInt(pageCount);\n        managePagging(3,0,total, page, limit, maxPage, offset)\n    };\n\n    const onUpdateDataLimit = (event) => {  \n        const { total, maxPage, managePagging } = props  \n\n        const currentPage = 1;\n        const pageCount = 0;\n        const offset = parseInt(event.target.value) * pageCount;\n        managePagging(4,currentPage,total, 0, event.target.value, maxPage, offset)\n    };\n\n    return (\n        <>\n        {!isLoading &&\n        total > 0 &&\n        paginateData &&\n        Object.keys(paginateData).length > 0 ? (\n            <div class=\"w-100 d-flex justify-content-lg-between justify-content-center align-items-center flex-wrap py-sm-4 px-0 pt-3 \">\n                <div class=\"d-flex flex-wrap py-sm-2 me-sm-3 justify-content-sm-normal justify-content-center\">\n                    <a class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\" onClick={(e) => onPrevNavigateClick(e)}>\n                    <i class=\"fa-solid fa-caret-left icon-md\"></i>\n                    </a>\n\n                    {paginateData.pages && paginateData.pages.length > 0\n                    ? paginateData.pages.map((item, pagesIndex) => {\n                        return parseInt(pagesIndex) < 3 ? (\n                            <a\n                            onClick={() => onUpdatePage(item)}\n                            className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\n                                paginateData.currentPage == item ? `active` : ``\n                            }  me-2 my-1`}\n                            >\n                            {item}\n                            </a>\n                        ) : parseInt(pagesIndex) < 4 ? (\n                            currentPage < 6 ? (\n                            <a\n                                onClick={() => onUpdatePage(item)}\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\n                                paginateData.currentPage == item ? `active` : ``\n                                }  me-2 my-1`}\n                            >\n                                {item}\n                            </a>\n                            ) : (\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\n                                ...\n                            </a>\n                            )\n                        ) : parseInt(pagesIndex) < 5 ? (\n                            currentPage < 6 ? (\n                            <a\n                                onClick={() => onUpdatePage(item)}\n                                className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\n                                paginateData.currentPage == item ? `active` : ``\n                                }  me-2 my-1`}\n                            >\n                                {item}\n                            </a>\n                            ) : (\n                            parseInt(paginateData.pages.length) > currentPage && (\n                                <a\n                                onClick={() => onUpdatePage(item)}\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\n                                    paginateData.currentPage ? `active` : ``\n                                }  me-2 my-1`}\n                                >\n                                {currentPage}\n                                </a>\n                            )\n                            )\n                        ) : parseInt(paginateData.pages.length) - 2 == pagesIndex ? (\n                            parseInt(paginateData.pages.length) - 1 > currentPage && (\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\n                                ...\n                            </a>\n                            )\n                        ) : parseInt(paginateData.pages.length) - 1 == pagesIndex ? (\n                            <a\n                            onClick={() => onUpdatePage(item)}\n                            className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\n                                paginateData.currentPage == item ? `active` : ``\n                            }  me-2 my-1`}\n                            >\n                            {item}\n                            </a>\n                        ) : null;\n                        })\n                    : null}\n                    <a\n                    class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\"\n                    onClick={(e) => onNextNavigateClick(e)}\n                    >\n                    <i class=\"fa-solid fa-caret-right icon-md icon-xs\"></i>\n                    </a>\n                </div>\n\n                 <div class=\"d-flex align-items-center py-1 shwoing-filter\">\n                   <select\n                    class=\"form-control form-control-sm font-weight-bold me-4 border-0 bg-light false\"\n                    style={{ width: 75 }}\n                    onChange={(e)=>onUpdateDataLimit(e)}\n                    value={limit}\n                    >\n                    <option class=\"\" value={10}>\n                        10\n                    </option>\n                    <option class=\"\" value={20}>\n                        20\n                    </option>\n                    <option class=\"\" value={50}>\n                        50\n                    </option>\n                    </select>\n                    <span class=\"react-bootstrap-table-pagination-total\">\n                    &nbsp;Showing rows {paginateData.currentPage} to&nbsp;\n                    {paginateData.totalPages} of&nbsp;{total}\n                    </span>\n                </div> \n            </div>\n        ) : null}\n        </>\n    );\n    };\n\n    const Paggination = React.memo(PN);\n\n    export default Paggination;\n","    import { Button } from \"react-bootstrap\";\n    import Loader from \"react-loader-spinner\";\n    import SVG from \"react-inlinesvg\";\n    import React, { useEffect } from \"react\";\n    import { toAbsoluteUrl } from \"../../../utils\";\n\n    const PS = (props) => {\n    const { isPdfDownloading, analyticsStatus, updateSearchText, placeholder } = props;\n\n    const onSearchText = () => {\n        let textInput = document.getElementById(\"searchTextInfluencer\");\n        let timeout = null;\n        textInput.addEventListener(\"input\", (e) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => updateSearchText(textInput.value), 1000);\n        });\n    };\n\n    useEffect(() => {\n        onSearchText()\n    }, []);\n\n    return (\n        <div className=\"d-flex align-items-center justify-content-end mb-3\">\n        {/* <Button\n            variant=\"dark me-4 px-4 px-sm-5 export-pdf d-flex align-items-center\"\n            size=\"sm\"\n            className={\n            isPdfDownloading\n                ? `d-flex pdf-loading`\n                : `d-flex ,${analyticsStatus?.trialAccessAPI ? `disabled` : ``}`\n            }\n            disabled={isPdfDownloading ? `disabled` : \"\"}\n        >\n            <span className=\"svg-icon svg-icon-sm\">\n            <SVG\n                className=\"h-75 align-self-end\"\n                src={toAbsoluteUrl(\"/svg/export.svg\")}\n            ></SVG>\n            </span>\n            <span className=\"btn_txt\">\n            {isPdfDownloading ? (\n                <Loader\n                type=\"ThreeDots\"\n                color=\"#333333\"\n                height={15}\n                width={25}\n                style={{ marginRight: 5 }}\n                />\n            ) : (\n                `Export`\n            )}\n            </span>\n        </Button> */}\n\n        <form onSubmit={(e) => e.preventDefault()}>\n            <div class=\"form-group m-0\">\n            <div class=\"input-icon input-icon-right position-relative\">\n                <input\n                class=\"form-control search-input\"\n                id=\"searchTextInfluencer\"\n                type=\"text\"\n                placeholder={placeholder ? placeholder : `Search Post...`}\n                />\n                <span>\n                <i class=\"fa fa-search icon-md text-muted\"></i>\n                </span>\n            </div>\n            </div>\n        </form>\n        </div>\n    );\n    };\n\n    const PopupSearch = React.memo(PS);\n    export default PopupSearch;\n","import React, { Component, Suspense } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Table } from \"react-bootstrap\";\nimport { kFormatter, dateFormat } from \"../../utils\";\nimport { paginate } from '../../../../../utils/paginate';\nimport DataNotFound from \"../../../analytics/components/notfound\";\nimport Paggination from \"../common/popup/paggination\";\nimport PopupSearch from \"../common/popup/popupSearch\";\nimport ConnectButton from \"../common/connectButton\";\nimport MultiPostMedia from \"../common/multiPostMedia\";\nimport AuthorInfo from \"../../content/components/authorInfo\";\nconst LeaderbordSkeleton = React.lazy(() =>\n  import(\"../skeleton/leaderbordSkeleton\")\n);\n\n\nclass AuthorpostsPopup extends Component {\n  state = {\n    fetchRecord: null,\n    isLoading: true,\n    total: 0,\n    limit: 10,\n    offset: 0,\n    paginateData: {},\n    currentPage: 1,\n    maxPage: 10,\n    username: null\n  }\n\n  componentDidMount() {\n    const { total } = this.props;\n    const { limit, currentPage, maxPage } = this.state;\n    if (total) this.setState({ total: total, paginateData: paginate(total, currentPage, limit, maxPage) }, () => this.onLoadFilterData())\n  }\n\n\n  onLoadFilterData = (isSearch = 0) => {\n\n    const { analyticwall, total, moreData } = this.props;\n    const { selectedWallFeed, dateFilter, selectedFeed } = analyticwall;\n    const { currentPage, limit, offset, username, maxPage } = this.state;\n\n    let wallData = selectedWallFeed.wall.id;\n    let startDate = dateFilter.startDate;\n    let endDate = dateFilter.endDate;\n\n    let feedIDs = [];\n    if (selectedFeed && selectedFeed.length > 0) {\n      selectedFeed.map((fItem) => {\n        feedIDs.push(fItem.value);\n      })\n    }\n\n    this.setState({ isLoading: true })\n    moreData(wallData, dateFormat(startDate), dateFormat(endDate), feedIDs.join(), isSearch ? username && username.length > 0 ? total : limit : offset, isSearch ? username.length > 0 ? 0 : offset : limit, 0, username)\n      .then((response) => {\n        const { responseData } = response.data;\n\n        if (!isSearch) this.setState({ fetchRecord: responseData.data, isLoading: false })\n        else\n          this.setState({ total: responseData.total, paginateData: paginate(responseData.total, currentPage, limit, maxPage), fetchRecord: responseData.data, isLoading: false })\n      })\n      .catch((error) => {\n        console.error(\"LAYOUT ISSUE\", error)\n      });\n  }\n\n\n  managePagging = (pageClick, currentPage = 0, total = 0, page = 0, limit = 0, maxPage = 0, offset = 0) => {\n    if (pageClick == 1)\n      this.setState({ currentPage: currentPage });\n    else if (pageClick == 2)\n      this.setState(\n        { paginateData: paginate(total, page, limit, maxPage), offset: offset },\n        () => this.onLoadFilterData()\n      );\n    else if (pageClick == 3)\n      this.setState(\n        {\n          currentPage: page,\n          paginateData: paginate(total, page, limit, maxPage),\n          offset: offset,\n        },\n        () => this.onLoadFilterData()\n      );\n    else if (pageClick == 4)\n      this.setState(\n        {\n          limit: limit,\n          paginateData: paginate(total, currentPage, limit, maxPage),\n          offset: offset,\n        },\n        () => this.onLoadFilterData()\n      );\n  }\n\n\n  updateSearchText = (value) => {\n    this.setState({ username: value, currentPage: 1 }, () => this.onLoadFilterData(1))\n  }\n\n  render() {\n    const { analyticsStatus, isPdfDownloading, maxPage, hideFollwers } = this.props;\n    const { isLoading, fetchRecord, total, limit, paginateData, currentPage } = this.state;\n\n    return (\n      <div class=\"influential_contributors_custom_modal px-5\">\n        <PopupSearch isPdfDownloading={isPdfDownloading} analyticsStatus={analyticsStatus} updateSearchText={this.updateSearchText} />\n        <div className=\"influential-data-list sw_theme \">\n          <Table responsive>\n            <thead>\n              <tr>\n                <th style={{ width: \"10%\" }}>\n                  S No.\n                </th>\n                <th style={{ width: \"25%\" }}>\n                  Name\n                </th>\n                {![1].includes(hideFollwers) ?\n                  <th style={{ width: \"15%\" }}>\n                    Followers\n                  </th> : null}\n                <th style={{ width: \"10%\" }}>\n                  Posts\n                </th>\n                <th style={{ width: \"25%\" }}>\n                  Recent Posts\n                </th>\n                <th style={{ width: \"15%\" }}></th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                isLoading ? <Suspense fallback={<></>}> <LeaderbordSkeleton /> </Suspense> :\n                  (fetchRecord && fetchRecord.length > 0) ? fetchRecord.map((mItem, mIndex) => <tr>\n                    <td>{mIndex + 1}</td>\n                    <td>\n                      <AuthorInfo picture={mItem.image} authorUsername={mItem.author.username} isIcon={mItem.network.icon} authorName={mItem.author.name} networkId={mItem.networkId} link={mItem.links} />\n                    </td>\n                    {![1].includes(hideFollwers) ?\n                      <td>\n                        <p className={`mb-0 ${parseInt(mItem.author.follower) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(mItem.author.follower)}</strong> {mItem.author.follower && parseInt(mItem.author.follower) > 1 ? `Followers` : `Follower`}</p>\n                      </td> : null}\n                    <td>\n                      <p className={`mb-lg-3 mt-sm-2 mb-0 ${parseInt(mItem.postCount) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(mItem.postCount)}</strong> {mItem.postCount && parseInt(mItem.postCount) > 1 ? `Posts` : `Post`}</p>\n                    </td>\n                    <td>\n                      <MultiPostMedia postsData={mItem.postsData} />\n                    </td>\n                    <td>\n                      <div className=\"conn_status connnected\">\n                        <ConnectButton link={mItem.links} network={mItem.network.id} />\n                      </div>\n                    </td>\n                  </tr>\n                  ) : <tr>\n                    <td colspan={6}> <DataNotFound />\n                    </td></tr>\n              }\n\n            </tbody>\n          </Table>\n\n        </div>\n        <Paggination isLoading={isLoading} total={total} paginateData={paginateData} maxPage={maxPage} currentPage={currentPage} limit={limit} managePagging={this.managePagging} />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    analyticwall: state.analyticwall,\n  }\n}\n\nexport default connect(mapStateToProps)(AuthorpostsPopup);","import axios from 'axios';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../actions/display/analytics';\nimport store from '../../../../redux/store';\nimport { ENV, INSTAGRAM_IMAGE_VIDEO_UPDATE, NoCameraImgPost } from '../../../../actions/api';\nimport moment from 'moment';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${ENV}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n "],"names":["PN","props","paginateData","isLoading","total","currentPage","limit","onUpdatePage","page","maxPage","managePagging","pageCount","parseInt","_jsx","_Fragment","children","Object","keys","length","_jsxs","class","onClick","e","event","onPrevNavigateClick","pages","map","item","pagesIndex","className","totalPages","onNextNavigateClick","style","width","onChange","offset","target","value","onUpdateDataLimit","React","PS","isPdfDownloading","analyticsStatus","updateSearchText","placeholder","useEffect","onSearchText","textInput","document","getElementById","timeout","addEventListener","clearTimeout","setTimeout","onSubmit","preventDefault","id","type","LeaderbordSkeleton","AuthorpostsPopup","Component","constructor","_this","arguments","this","state","fetchRecord","username","onLoadFilterData","isSearch","undefined","analyticwall","moreData","selectedWallFeed","dateFilter","selectedFeed","wallData","wall","startDate","endDate","feedIDs","fItem","push","setState","dateFormat","join","then","response","responseData","data","paginate","catch","error","console","pageClick","componentDidMount","render","hideFollwers","PopupSearch","Table","responsive","includes","Suspense","fallback","mItem","mIndex","AuthorInfo","picture","image","authorUsername","author","isIcon","network","icon","authorName","name","networkId","link","links","follower","kFormatter","postCount","MultiPostMedia","postsData","ConnectButton","colspan","DataNotFound","Paggination","connect","toAbsoluteUrl","pathname","newValue","suffixNum","Math","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","date","moment","format"],"sourceRoot":""}