{"version":3,"file":"static/js/1939.5681c6b0.chunk.js","mappings":"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","sources":["app/Display/analytics-new/content/index.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\r\nimport \"../assets/css/analytics.css\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAllContentData } from \"../../../../actions/analyticsNew\";\r\n\r\nconst TopCard = React.lazy(() => import(\"../layout/common/TopCard\"));\r\nconst SentimentPost = React.lazy(() =>\r\n  import(\"./components/sentimentPost\")\r\n);\r\nconst SentimentAnalytics = React.lazy(() =>\r\n  import(\"./components/sentimentAnalytics\")\r\n);\r\nconst LeaderBoard = React.lazy(() =>\r\n  import(\"./components/leaderBoard\")\r\n);\r\nconst TopeventVoice = React.lazy(() =>\r\n  import(\"./components/topeventVoice\")\r\n);\r\nconst PosttypeCount = React.lazy(() =>\r\n  import(\"./components/posttypeCount\")\r\n);\r\nconst TrueSense = React.lazy(() => import(\"./components/trueSense\"));\r\nconst AssetsLanguage = React.lazy(() =>\r\n  import(\"./components/assetsLanguage\")\r\n);\r\nconst AssetsNetwork = React.lazy(() =>\r\n  import(\"./components/assetsNetwork\")\r\n);\r\nconst Tagcloud = React.lazy(() => import(\"./components/tagCloud\"));\r\n\r\nconst ContentAnalytics = React.lazy(() =>\r\n  import(\"./components/aontentAnalytics\")\r\n);\r\n\r\nconst TopAiTags = React.lazy(() =>\r\n  import(\"./components/topAiTags\")\r\n);\r\n\r\nclass Content extends PureComponent {\r\n\r\n  componentDidMount() {\r\n    const { getAllContentData, analyticsRecords } = this.props;\r\n    if (!analyticsRecords.contentCount.length) getAllContentData()\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      contentAnalytics,\r\n      truSense,\r\n      sentimentPost,\r\n      getFlags,\r\n      leaderBoard,\r\n      topeventVoices,\r\n      wordCloud,\r\n      topaiTags,\r\n      postbyLanguage,\r\n      postbyNetwork,\r\n      postTypeCount,\r\n      sentiment_loader,\r\n      content_loader,\r\n      leader_board_loader,\r\n      top_event_loader,\r\n      word_loader,\r\n      trusense_loader,\r\n      top_ai_loader,\r\n      post_by_language_loader,\r\n      post_type_count_loader,\r\n      posts_by_network_loader,\r\n      get_wall_sentiment_live_trend_data,\r\n      get_wall_sentiment_live_trend_loader,\r\n      dateFilter\r\n    } = this.props.analyticsRecords;\r\n\r\n    const selectedWallFeed = { selectedWallFeed: this.props.selectedWallFeed }\r\n\r\n\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col lg={8}>\r\n            <Suspense fallback={<></>}>\r\n              <div className=\"row\">\r\n                <TopCard col={3} res={4} loader={content_loader} data={contentAnalytics} />\r\n              </div>\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <ContentAnalytics key={content_loader} loader={content_loader} contentAnalytics={contentAnalytics} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <SentimentAnalytics {...selectedWallFeed} loader={get_wall_sentiment_live_trend_loader} dateFilter={dateFilter} live_trend={get_wall_sentiment_live_trend_data}\r\n                sentimentPost={sentimentPost} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <SentimentPost loader={sentiment_loader} {...sentimentPost} {...selectedWallFeed} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <LeaderBoard loader={leader_board_loader} {...selectedWallFeed} leaderBoard={leaderBoard} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <TopeventVoice top_event_loader={top_event_loader} {...selectedWallFeed} topeventVoices={topeventVoices} />\r\n            </Suspense>\r\n          </Col>\r\n\r\n          <Col lg={4}>\r\n            <Suspense fallback={<></>}>\r\n              <TrueSense loader={trusense_loader} truSense={truSense} {...selectedWallFeed} dateFilter={dateFilter} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <Tagcloud key={word_loader} word_loader={word_loader} wordCloud={wordCloud} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <TopAiTags key={top_ai_loader} top_ai_loader={top_ai_loader} dateFilter={dateFilter} {...selectedWallFeed} topaiTags={topaiTags} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <PosttypeCount key={post_type_count_loader} loader={post_type_count_loader} {...selectedWallFeed} dateFilter={dateFilter} postTypeCount={postTypeCount} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <AssetsLanguage key={post_by_language_loader} loader={post_by_language_loader} dateFilter={dateFilter} getFlags={getFlags} detail={this.props.detail} {...selectedWallFeed} postbyLanguage={postbyLanguage} />\r\n            </Suspense>\r\n\r\n            <Suspense fallback={<></>}>\r\n              <AssetsNetwork loader={posts_by_network_loader} postbyNetwork={postbyNetwork} />\r\n            </Suspense>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst contentStateToProps = (state) => {\r\n  return {\r\n    analyticsRecords: state.analyticsRecords,\r\n    detail: state.appsMore.detail,\r\n    selectedWallFeed: state.analyticwall.selectedWallFeed.feeds\r\n  };\r\n};\r\n\r\nconst contentDispatchToProps = (dispatch) => {\r\n  return {\r\n    getAllContentData: () => dispatch(getAllContentData()),\r\n  };\r\n};\r\n\r\nexport default connect(contentStateToProps, contentDispatchToProps)(Content);\r\n"],"names":["TopCard","React","SentimentPost","SentimentAnalytics","LeaderBoard","TopeventVoice","PosttypeCount","TrueSense","AssetsLanguage","AssetsNetwork","Tagcloud","ContentAnalytics","TopAiTags","Content","PureComponent","componentDidMount","getAllContentData","analyticsRecords","this","props","contentCount","length","render","contentAnalytics","truSense","sentimentPost","getFlags","leaderBoard","topeventVoices","wordCloud","topaiTags","postbyLanguage","postbyNetwork","postTypeCount","sentiment_loader","content_loader","leader_board_loader","top_event_loader","word_loader","trusense_loader","top_ai_loader","post_by_language_loader","post_type_count_loader","posts_by_network_loader","get_wall_sentiment_live_trend_data","get_wall_sentiment_live_trend_loader","dateFilter","selectedWallFeed","_jsx","_Fragment","children","_jsxs","Row","Col","lg","Suspense","fallback","className","col","res","loader","data","live_trend","detail","connect","state","appsMore","analyticwall","feeds","dispatch"],"sourceRoot":""}