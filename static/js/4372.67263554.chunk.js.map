{"version":3,"file":"static/js/4372.67263554.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/networkIcon.js","app/Display/dashboard-new/components/common/slideSection.js","app/Display/dashboard-new/components/skeleton/wallsSkeleton.js","app/Display/dashboard-new/components/createdWalls.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst NetworkIcon = (props) => {\r\n  return (\r\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(NetworkIcon);\r\n","        import React, { useEffect } from \"react\";\r\n        import { Splide, SplideTrack } from \"@splidejs/react-splide\";\r\n        import \"../../../analytics-new/assets/css/slide.scss\";\r\n\r\n        const CreatedWalls = ({ setactiveWall, section, totalRecord, splideRef, children}) => {\r\n\r\n        useEffect(() => {\r\n\r\n\r\n          if(section && setactiveWall){\r\n\r\n                if (splideRef.current && totalRecord>1) {\r\n                  splideRef.current.splide.on(\"move\", (newIndex) => {\r\n                    manageSlider(newIndex)\r\n                    setactiveWall(newIndex)\r\n                 });\r\n              }else{\r\n                manageSlider()\r\n                setactiveWall(1)\r\n              }\r\n          }\r\n        }, []);\r\n        \r\n        const manageSlider=(index=null)=>{\r\n  \r\n            const totalList = totalRecord * 2;   \r\n            const newIndexCondition = totalRecord-1;\r\n\r\n            const toggleDisplay = (displayStyle) => {\r\n\r\n                const slideWalls = document.getElementsByClassName(`splide__slide_walls`)\r\n\r\n                for (let i = (totalRecord+1); i <= totalList; i++) {\r\n\r\n                  if(slideWalls && slideWalls.length){\r\n                      let updateKey = totalRecord-1\r\n                      let elementNew = document.getElementById(slideWalls[i+updateKey].id);\r\n                       if (elementNew) elementNew.style.display = displayStyle;\r\n                  }\r\n                }\r\n            };\r\n\r\n            if (index === newIndexCondition || index==null) {\r\n                if(index==null){\r\n                   const Ispreview = document.getElementsByClassName(`is-prev`)\r\n                   const splideListUl = document.getElementsByClassName(`splide__list_ul`)\r\n                   const Isnext = document.getElementsByClassName(`is-next`)\r\n\r\n                    if(Ispreview.length) Ispreview[0].style.display=\"none\"\r\n                    if(Isnext.length) Isnext[0].style.display=\"none\"\r\n                    if(splideListUl) splideListUl[0].querySelector('ul').style.transform =\"translateX(0)\";\r\n                 }else{\r\n                    toggleDisplay('none');\r\n                }\r\n             } else {\r\n                toggleDisplay('block');\r\n            }\r\n        }\r\n\r\n        const settings = {\r\n            start: 0,\r\n            type: \"loop\",\r\n           //rewind: true,\r\n            speed: 1000,\r\n            perMove: 1,\r\n            loop: true,\r\n            interval: 5000,\r\n            drag: section==1 ? false : true,\r\n            //clones: 1,\r\n            perPage: section==1 ? 0 : totalRecord>3 ? 3 : totalRecord,\r\n            autoWidth: section==1 ? true : false,\r\n            gap: section==1 ? 15 : -15,\r\n            autoplay: section==1 ? false : true,\r\n            pagination: false,\r\n            arrows: section === 1 ? totalRecord !== 1 : true, \r\n            fixedHeight: true,\r\n            breakpoints: {\r\n                0: {\r\n                    perPage: 1\r\n                },\r\n                579: {\r\n                    perPage: 2\r\n                },\r\n                767: {\r\n                    perPage: 2,\r\n                },\r\n                1300: {\r\n                    perPage: 2,\r\n                },\r\n                1600: {\r\n                    perPage: 3,\r\n                }\r\n            }\r\n        };\r\n          \r\n\r\n        return (\r\n            <Splide className={section ? 'splide__list_ul' : ''} ref={splideRef} hasTrack={false} options={settings}>\r\n               <SplideTrack>{children}</SplideTrack>\r\n            </Splide>\r\n         );\r\n       };\r\n\r\n export default CreatedWalls;\r\n","import React from \"react\";\r\n\r\nconst Network = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-grow-1 mb-3\">\r\n      <div class=\"symbol symbol-45 symbol-light me-2 social_user_img\">\r\n        <span class=\"sk_img\"></span>\r\n      </div>\r\n      <div class=\"d-flex text-left flex-column conn_user_info w-25\">\r\n        <div class=\"sk_line sk_line_height_12\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Action = () => {\r\n  return <div class=\"sk_line sk_line_height_28 me-2\"></div>;\r\n};\r\n\r\nconst WallsSkeleton = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-wrap justify-content-between\">\r\n      {[1, 2].map(() => {\r\n        return (\r\n          <div className=\"col-6 px-2\">\r\n            <div class=\"ex-graphmin-height w-100\">\r\n              <div class=\"ex-recentwbox d-block p-4\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <div class=\"ex-recentwright w-100 mb-3\">\r\n                      <div\r\n                        class=\"sk_rect btn-min-w sk_img_thumb\"\r\n                        style={{ paddingBottom: \"55%\" }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <div class=\"w-100\">\r\n                      <div class=\"ex-recentwleft w-50\">\r\n                        <div class=\"sk_line sk_line_height_12\"></div>\r\n                        <div class=\"sk_line sk_line_80 sk_line_height_8\"></div>\r\n                      </div>\r\n                      <div className=\"mt-5\">\r\n                        <Network />\r\n                        <Network />\r\n                        <Network />\r\n                      </div>\r\n                      <div class=\"ex-recentwright d-flex w-100\">\r\n                        <Action />\r\n                        <Action />\r\n                        <Action />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(WallsSkeleton);\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Card, CardBody, Dropdown } from \"react-bootstrap\";\r\nimport { SplideSlide } from \"@splidejs/react-splide\";\r\nimport SlideSection from \"./common/slideSection\";\r\nimport NetworkIcon from \"../../analytics-new/layout/common/networkIcon\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { getWidgetWallData } from \"../../../../actions/wallDataAction\";\r\nimport { shallowEqual, useDispatch } from \"react-redux\";\r\nimport { getWallFeeds } from \"../../../../actions/display/analytics\";\r\nimport { toggleAddFeedsSection_D } from \"../../../../actions/display/showDisplayModalAction\";\r\nimport { openCreateNewWallPopup } from \"../../../../actions/display/wallsAction\";\r\nimport DropdownComponet from \"../../walls/component/modal/Dropdown\";\r\nimport WallsSkeleton from \"./skeleton/wallsSkeleton\";\r\nimport HoverVideoPlayer from \"react-hover-video-player\";\r\nimport { baseUrl } from \"../../../../utils\";\r\nimport CreateWall from \"./common/createWall\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst CreatedWalls = (props) => {\r\n  const { allWalllist, loader } = props;\r\n  const { wallReducer ,userData } = useSelector(state => ({ wallReducer: state.wallReducer, userData : state.authenticated.userData}),shallowEqual)\r\n  const widgetWallsData = wallReducer.widgetWallsData;\r\n\r\n  const splideRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [upgrade, setUpgrade] = React.useState(false);\r\n  const [modalData, setModalData] = React.useState({\r\n    profanity: 0,\r\n    modalShow: false,\r\n    name: \"\",\r\n    url: \"\",\r\n    wall_id: null,\r\n    autoUpdate: 1,\r\n    rename_status: 0,\r\n    callbackWall : 0\r\n  });\r\n\r\n  const [activeWall, setactiveWall] = useState(0);\r\n  const { user, UserPlan } = props.userData;\r\n\r\n  const callbackWall=(status)=>{\r\n  }\r\n\r\n  const handleCategoryClick = (startIndex) => {\r\n    if (splideRef.current) splideRef.current.splide.go(startIndex); // Move to the specific slide\r\n  };\r\n\r\n  const displayWindowOpen = (wallId) => {\r\n    dispatch(getWidgetWallData(user.ownerId, wallId));\r\n    dispatch(getWallFeeds(user.ownerId));\r\n    navigate(`/wall/preview/${wallId}`);\r\n  };\r\n\r\n  const getEditorwall = (feed, id) => {\r\n    if (!feed.length) dispatch(toggleAddFeedsSection_D(true));\r\n    dispatch(getWidgetWallData(user.ownerId, id));\r\n  };\r\n\r\n  const clickToUpdateState = (data) => (event) => {\r\n    dispatch(openCreateNewWallPopup(false));\r\n    const widgetCount = (widgetWallsData && widgetWallsData.length) ? widgetWallsData.length : 0;\r\n    if (widgetCount < userData.UserRule.walls || data.rename_status == 1)  setModalData(data)\r\n    else setUpgrade(true)\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"created-walls-section mb-5\">\r\n      <Card className=\"p-0 card-custom card-stretch\">\r\n          { allWalllist && Object.keys(allWalllist).length || loader ? (\r\n          <>\r\n            <Card.Header className=\"p-5\">\r\n              <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\r\n                <h6 class=\"card-label font-weight-bolder m-0 \">\r\n                  Created Walls\r\n                </h6>\r\n               { !loader ? <div className=\"\">\r\n                  <Link to={\"/walls\"} className=\"text-secondary font-size-base\">\r\n                    View All\r\n                  </Link>\r\n                </div> : null }\r\n              </div>\r\n            </Card.Header>\r\n\r\n         <CardBody className=\"p-5\">\r\n\r\n           { loader ? <WallsSkeleton/> : \r\n             <> \r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"custom-pagination\">\r\n                    { Object.keys(allWalllist).length>1 && allWalllist.map((e, index) => (\r\n                      <button\r\n                        className={`btn ${\r\n                          activeWall == index\r\n                            ? \"btn-primary\"\r\n                            : \"btn-outline-dark\"\r\n                        } me-1 rounded mb-1`}\r\n                        key={index}\r\n                        onClick={() => {\r\n                          handleCategoryClick(index);\r\n                          setactiveWall(index);\r\n                        }}\r\n                      >\r\n                        {e.name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                 \r\n\r\n                  <div className=\"custom_primary_secondary d-flex justify-content-sm-end mt-1\">\r\n                    <CreateWall modalData={modalData} upgrade={upgrade} clickToUpdateState={clickToUpdateState} setUpgrade={setUpgrade} setupdateWall={''} setModalData={setModalData} isCollaboratorRole={JSON.parse(localStorage.getItem('isCollaborator'))} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Splide Slider */}\r\n   \r\n              <SlideSection  section={1} totalRecord={allWalllist.length} splideRef={splideRef} setactiveWall={setactiveWall}>\r\n                {allWalllist.map((e, index) => {\r\n                  return (\r\n                    <SplideSlide className={`splide__slide_walls`} key={index}>\r\n                      <div key={activeWall+index}  \r\n                        className={`created-walls-card h-100 splide__slide-${index}`}>\r\n                        <div className=\"created-walls-card-inner h-100 p-5\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                               <div  className=\"wall_cont_wrap innter_wall_cont_wrap_ cursor-pointer created-walls-card-img p-0\">\r\n                                <Link\r\n                                    to={`/wall/index/${e.id}`}\r\n                                    className=\"card card-custom overlay shadow-none overflow-hidden rounded-0\"\r\n                                    onClick={() => {\r\n                                      getEditorwall(e.feedList, e.id);\r\n                                    }}\r\n                                  >\r\n\r\n                                     <HoverVideoPlayer\r\n                                          videoSrc={`${baseUrl(`theme-media/theme-video/${e.signageTheme}.mp4`)}`}\r\n                                          width={391} height={300}\r\n                                          style={{\r\n                                            width: '100%',\r\n                                            paddingTop: '-10px',\r\n                                          }}\r\n                                      />\r\n                                  <img\r\n                                    role=\"img\"\r\n                                    src={`${baseUrl(`theme-media/theme-thumb/${e.signageTheme}.png`)}`}\r\n                                    height={250}\r\n                                    width={\"100%\"}\r\n                                  />\r\n\r\n                              <div className=\"overlay-layer\">\r\n                                <img  src={baseUrl(`dashboard/icons/play-icon.svg`)} height={46} width={46} className=\"img-fluid\" alt=\"play\" />\r\n                              </div>\r\n                              </Link>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                              <div className=\"mt-3 d-flex flex-column justify-content-between h-100\">\r\n                                <div className=\"\">\r\n                                  <div className=\"d-flex justify-content-between mb-8\">\r\n                                    <Link\r\n                                      to={`/wall/index/${e.id}`}\r\n                                      onClick={() => {\r\n                                        getEditorwall(e.feedList, e.id);\r\n                                      }}\r\n                                    >\r\n                                      <div className=\"\">\r\n                                        <h5 className=\"mb-2 text-capitalize d-flex align-items-center\">\r\n                                          {e.name}\r\n                                          { e.activeScreen ?  <span className=\"status_active\"></span> : null }\r\n                                        </h5>\r\n                                        <p className=\"text-secondary text-capitalize m-0\">\r\n                                          {`${e.themeName} : ${e.themeLayout}`}\r\n                                        </p>\r\n                                      </div>\r\n                                    </Link>\r\n                                    <div className=\"\">\r\n                                      <p className=\"text-secondary font-weight-bold font-size-h6 m-0\">\r\n                                        Posts: {e.totalPostCount}\r\n                                      </p>\r\n                                    </div>\r\n                                  </div>\r\n                                  {e.feedList &&\r\n                                  Object.keys(e.feedList).length ? (\r\n                                    <div className=\"created-walls-network mb-8\">\r\n                                      <ul className=\"m-0\">\r\n                                        {e.feedList.map((fdata, key) => {\r\n                                          return (\r\n                                            <li className=\"d-flex align-items-center mb-4 \">\r\n                                              <NetworkIcon\r\n                                                isDashboard={\r\n                                                  \"me-2 text-center text-white\"\r\n                                                }\r\n                                                icon={fdata.socialIcon}\r\n                                              />\r\n                                              {fdata.name}\r\n                                            </li>\r\n                                          );\r\n                                        })}\r\n                                      </ul>\r\n                                    </div>\r\n                                  ) : null}\r\n                                </div>\r\n\r\n                                <div className=\"d-flex align-items-center justify-content-between mb-3\">\r\n                                  <div className=\"created-walls-report d-flex align-items-center\">\r\n                                    <a\r\n                                       onClick={()=>{ navigate(`/moderation/index/${e.id}`); localStorage.setItem(\"wallId\", e.id) }}\r\n                                       href=\"#\"\r\n                                       className=\" d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M6.99979 7V3C6.99979 2.44772 7.4475 2 7.99979 2H20.9998C21.5521 2 21.9998 2.44772 21.9998 3V16C21.9998 16.5523 21.5521 17 20.9998 17H17V20.9925C17 21.5489 16.551 22 15.9925 22H3.00728C2.45086 22 2 21.5511 2 20.9925L2.00276 8.00748C2.00288 7.45107 2.4518 7 3.01025 7H6.99979ZM8.99979 7H15.9927C16.549 7 17 7.44892 17 8.00748V15H19.9998V4H8.99979V7ZM15 9H4.00255L4.00021 20H15V9ZM8.50242 18L4.96689 14.4645L6.3811 13.0503L8.50242 15.1716L12.7451 10.9289L14.1593 12.3431L8.50242 18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Moderate\r\n                                    </a>\r\n                                    <a\r\n                                      href=\"#\"\r\n                                      onClick={()=>{ navigate(`${\r\n                                        ![58].includes(UserPlan.planId)\r\n                                          ? \"/analytic-new/\"\r\n                                          : \"analytic/\"\r\n                                      }${e.id}`); dispatch(\r\n                                        getWidgetWallData(user.ownerId, e.id)\r\n                                      ) }}\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M2 13H8V21H2V13ZM16 8H22V21H16V8ZM9 3H15V21H9V3ZM4 15V19H6V15H4ZM11 5V19H13V5H11ZM18 10V19H20V10H18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Analytic\r\n                                    </a>\r\n                                    <a\r\n                                      href=\"#\"\r\n                                      onClick={() => displayWindowOpen(e.id)}\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M4 16H20V5H4V16ZM13 18V20H17V22H7V20H11V18H2.9918C2.44405 18 2 17.5511 2 16.9925V4.00748C2 3.45107 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44892 22 4.00748V16.9925C22 17.5489 21.5447 18 21.0082 18H13Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Display\r\n                                    </a>\r\n                                  </div>\r\n                                  <div className=\"\">\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"p-0 border-0 bg-transparent\"\r\n                                    >\r\n                                      <div className=\"card-toolbar\">\r\n                                        <Dropdown align={'end'}>\r\n                                          <Dropdown.Toggle className=\"btn btn-link btn-icon btn-sm btn-clean btn-after-none w-auto\">\r\n                                           <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              height={\"20px\"}\r\n                                              width={\"20px\"}\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5C14 3.9 13.1 3 12 3ZM12 17C10.9 17 10 17.9 10 19C10 20.1 10.9 21 12 21C13.1 21 14 20.1 14 19C14 17.9 13.1 17 12 17ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"></path>\r\n                                            </svg>\r\n                                          </Dropdown.Toggle>\r\n                                          <Dropdown.Menu style={{ width: 175 }}>\r\n                                            <DropdownComponet callbackWall={callbackWall}  props={{'wallsData' : e, 'clickToUpdateState' : clickToUpdateState }} clickToUpdateState={clickToUpdateState} ownerId={user.ownerId} userData={props.userData}/>\r\n                                          </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                      </div>\r\n                                    </button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </SplideSlide>\r\n                  );\r\n                })}\r\n              </SlideSection>\r\n             </> \r\n             }\r\n            </CardBody>\r\n          </>\r\n        ) : (\r\n          <div className=\"col-12\">\r\n            <div className=\"d-flex justify-content-center w-100\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={clickToUpdateState({\r\n                  modalShow: true,\r\n                  wall_id: null,\r\n                  autoUpdate: 1,\r\n                  callbackWall : 1\r\n                })}\r\n                className=\"btn btn-link d-flex flex-wrap flex-column align-content-center add_card_button create-new-wall cursor-pointer px-5 w-100\"\r\n              >\r\n                <div className=\"add_wall_icon\">\r\n                  <span className=\"svg-icon\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width={\"20px\"} viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                      <path d=\"M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z\"></path>\r\n                    </svg>{\" \"}\r\n                  </span>\r\n                </div>\r\n                <h5 class=\"text-center mt-5 mb-0\"><span class=\"add_wall_card_txt popUp hide-on-desktop createWallbtn btn-link\">Create New Wall</span></h5>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(CreatedWalls);\r\n"],"names":["NetworkIcon","props","includes","icon","_jsxs","id","xmlns","width","height","viewBox","children","_jsx","d","fill","transform","className","isDashboard","size","React","_ref","setactiveWall","section","totalRecord","splideRef","useEffect","current","splide","on","newIndex","manageSlider","index","arguments","length","undefined","totalList","toggleDisplay","displayStyle","slideWalls","document","getElementsByClassName","i","updateKey","elementNew","getElementById","style","display","Ispreview","splideListUl","Isnext","querySelector","settings","start","type","speed","perMove","loop","interval","drag","perPage","autoWidth","gap","autoplay","pagination","arrows","fixedHeight","breakpoints","Splide","ref","hasTrack","options","SplideTrack","Network","class","Action","WallsSkeleton","map","paddingBottom","CreatedWalls","allWalllist","loader","wallReducer","userData","useSelector","state","authenticated","shallowEqual","widgetWallsData","useRef","dispatch","useDispatch","navigate","useNavigate","upgrade","setUpgrade","modalData","setModalData","profanity","modalShow","name","url","wall_id","autoUpdate","rename_status","callbackWall","activeWall","useState","user","UserPlan","status","getEditorwall","feed","toggleAddFeedsSection_D","getWidgetWallData","ownerId","clickToUpdateState","data","event","openCreateNewWallPopup","UserRule","walls","Card","Object","keys","_Fragment","Header","Link","to","CardBody","e","onClick","startIndex","go","CreateWall","setupdateWall","isCollaboratorRole","JSON","parse","localStorage","getItem","SlideSection","SplideSlide","feedList","HoverVideoPlayer","videoSrc","baseUrl","signageTheme","paddingTop","role","src","alt","activeScreen","themeName","themeLayout","totalPostCount","fdata","key","socialIcon","setItem","href","planId","displayWindowOpen","wallId","getWallFeeds","Dropdown","align","Toggle","Menu","DropdownComponet"],"sourceRoot":""}