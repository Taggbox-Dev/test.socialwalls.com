{"version":3,"file":"static/js/4372.669fa696.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/networkIcon.js","app/Display/analytics-new/layout/common/percentDifference.js","app/Display/dashboard-new/components/common/slideSection.js","app/Display/dashboard-new/components/skeleton/wallsSkeleton.js","app/Display/dashboard-new/components/createdWalls.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst NetworkIcon = (props) => {\r\n  return (\r\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(NetworkIcon);\r\n","    import React from \"react\";\r\nimport { kFormatter } from \"../../../../../utils\";\r\n\r\n    const PercentDifference = (props) => {\r\n\r\n        \r\n\r\n    return props.difference>0 ? (\r\n        <span\r\n        className={`score-count text-${\r\n            props.flag == 1 ? \"success\" : \"danger\"\r\n        } d-flex align-items-center ms-2`}\r\n        >\r\n        {props.flag == 1 ? (\r\n            <svg\r\n            class=\"me-1\"\r\n            width=\"18\"\r\n            height=\"16\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"currentColor\"\r\n            >\r\n            <path d=\"M12 8L18 14H6L12 8Z\" fill={`#02a100`}></path>\r\n            </svg>\r\n        ) : (\r\n            <svg\r\n            className=\"me-1\"\r\n            width=\"12\"\r\n            height=\"12\"\r\n            viewBox=\"0 0 6 4\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n            <g clip-path=\"url(#clip0_1717_12)\">\r\n                <path d=\"M3 3.5L0 0.5H6L3 3.5Z\" fill={`#f64e60`} />\r\n            </g>\r\n            </svg>\r\n        )}\r\n\r\n        \r\n        {`${kFormatter(Math.abs(props.difference))}%`}\r\n        </span>\r\n    ) : null;\r\n    };\r\n\r\n    export default React.memo(PercentDifference);\r\n","    import React, { useEffect, useState } from \"react\";\r\n    import { Splide, SplideTrack } from \"@splidejs/react-splide\";\r\n    import \"../../../analytics-new/assets/css/slide.scss\";\r\n    import \"@splidejs/react-splide/css\";\r\n\r\n    const CreatedWalls = ({\r\n      setactiveWall,\r\n      section,\r\n      totalRecord,\r\n      splideRef,\r\n      children,\r\n    }) => {\r\n      const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n      useEffect(() => {\r\n        if (section && setactiveWall) {\r\n          const splideInstance = splideRef.current.splide;\r\n\r\n          splideInstance.on(\"click\", (e) => {\r\n            splideRef.current.splide.go(e.index); // Move to the clicked slide\r\n          });\r\n\r\n          splideRef.current?.splide.on(\"move\", (newIndex) => {\r\n            setCurrentSlide(newIndex);\r\n            manageSlider(newIndex);\r\n            setactiveWall(newIndex);\r\n          });\r\n\r\n          if (!splideRef.current || totalRecord <= 1) {\r\n            manageSlider();\r\n            setactiveWall(1);\r\n          }\r\n        }else{\r\n          splideRef.current?.splide.on(\"move\", (newIndex) => {\r\n            setactiveWall(newIndex);\r\n          });\r\n        }\r\n      }, []);\r\n\r\n      const manageSlider = (index = null) => {\r\n        const totalList = totalRecord * 2;\r\n        const newIndexCondition = totalRecord - 1;\r\n\r\n        const toggleDisplay = (displayStyle) => {\r\n          const slideWalls = document.getElementsByClassName(`splide__slide_walls`);\r\n\r\n          for (let i = totalRecord + 1; i <= totalList; i++) {\r\n            if (slideWalls && slideWalls.length) {\r\n              let updateKey = totalRecord - 1;\r\n              let elementNew =\r\n                slideWalls[i + updateKey] &&\r\n                document.getElementById(slideWalls[i + updateKey].id);\r\n              if (elementNew) elementNew.style.display = displayStyle;\r\n            }\r\n          }\r\n        };\r\n\r\n        if (index === newIndexCondition || index == null) {\r\n          if (index == null) {\r\n            const Ispreview = document.getElementsByClassName(`is-prev`);\r\n            const splideListUl = document.getElementsByClassName(`splide__list_ul`);\r\n            const Isnext = document.getElementsByClassName(`is-next`);\r\n\r\n            if (Ispreview.length) Ispreview[0].style.display = \"none\";\r\n            if (Isnext.length) Isnext[0].style.display = \"none\";\r\n            if (splideListUl)\r\n              splideListUl[0].querySelector(\"ul\").style.transform = \"translateX(0)\";\r\n          } else {\r\n            toggleDisplay(\"none\");\r\n          }\r\n        } else {\r\n          toggleDisplay(\"block\");\r\n        }\r\n      };\r\n\r\n      const createBreakpointSettings = (perPage, isWall, clones, postCount) => ({\r\n          perPage,\r\n          clones: clones,\r\n          autoplay: isWall && postCount > perPage,\r\n          drag: totalPost>1 && postCount > perPage,\r\n          loop: postCount > perPage,\r\n          //arrows: postCount > perPage,\r\n      });\r\n\r\n      const totalPost = totalRecord || 0;\r\n      const canSlide = totalPost > 3;\r\n      const perPagePost = canSlide ? 3 : totalPost;\r\n\r\n      const settings = {\r\n        start: 0,\r\n        type: \"loop\",\r\n        //rewind: true,\r\n        speed: 1000,\r\n        perMove: 1,\r\n        loop: true,\r\n        lazyLoad: 'nearby', \r\n        interval: 5000,\r\n        drag: true,\r\n        //clones: 1,\r\n        perPage: section == 1 ? 0 : totalRecord > 3 ? 3 : totalRecord,\r\n        autoWidth: section == 1 ? true : false,\r\n        gap: section == 1 ? 15 : -15,\r\n        autoplay: section == 1 ? false : true,\r\n        pagination: false,\r\n        arrows: section === 1 ? totalRecord !== 1 : true,\r\n        fixedHeight: true,\r\n        breakpoints: {\r\n          0: createBreakpointSettings(1,1, perPagePost, totalPost),\r\n          579: createBreakpointSettings(1,1, perPagePost, totalPost),\r\n          1300: createBreakpointSettings(2,1, 0, totalPost),\r\n          1600: createBreakpointSettings(3,section==1 ? 0 : 1, 0, totalPost),\r\n        },\r\n      };\r\n\r\n      return (\r\n        <Splide\r\n          className={section ? \"splide__list_ul\" : \"\"}\r\n          ref={splideRef}\r\n          hasTrack={false}\r\n          options={settings}\r\n          \r\n        >\r\n          <SplideTrack>{children}</SplideTrack>\r\n\r\n          <div\r\n            className=\"splide__arrows splide__arrows--ltr tb_g_h_arrow_wrapper_\"\r\n            role=\"navigation\"\r\n            aria-label=\"Slider Navigation Wrapper\"\r\n          >\r\n            <div\r\n              role=\"navigation\"\r\n              className=\"tb_g_h_arrow splide__arrow splide__arrow--prev tb_g_h_arrow_left__ tb__icon tb-arrow-left-alt\"\r\n              aria-labelledby=\"Navigation Previous Slide\"\r\n            >\r\n              {\" \"}\r\n              <button disabled={currentSlide === 0 && section == 1}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"currentColor\"\r\n                >\r\n                  <path d=\"M10.8284 12.0007L15.7782 16.9504L14.364 18.3646L8 12.0007L14.364 5.63672L15.7782 7.05093L10.8284 12.0007Z\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n            <div\r\n              role=\"navigation\"\r\n              className=\"tb_g_h_arrow splide__arrow splide__arrow--next tb_g_h_arrow_right__ tb__icon tb-arrow-right-alt\"\r\n              aria-labelledby=\"Navigation Next Slide\"\r\n            >\r\n              {\" \"}\r\n              <button disabled={currentSlide === totalRecord - 1 && section == 1}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width={\"20px\"}\r\n                  height={\"20px\"}\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"currentColor\"\r\n                >\r\n                  <path d=\"M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z\"></path>\r\n                </svg>{\" \"}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Splide>\r\n      );\r\n    };\r\n\r\n    export default CreatedWalls;\r\n","import React from \"react\";\r\n\r\nconst Network = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-grow-1 mb-3\">\r\n      <div class=\"symbol symbol-45 symbol-light me-2 social_user_img\">\r\n        <span class=\"sk_img\"></span>\r\n      </div>\r\n      <div class=\"d-flex text-left flex-column conn_user_info w-25\">\r\n        <div class=\"sk_line sk_line_height_12\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Action = () => {\r\n  return <div class=\"sk_line sk_line_height_28 me-2\"></div>;\r\n};\r\n\r\nconst WallsSkeleton = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-wrap justify-content-between\">\r\n      {[1, 2].map(() => {\r\n        return (\r\n          <div className=\"col-6 px-2\">\r\n            <div class=\"ex-graphmin-height w-100\">\r\n              <div class=\"ex-recentwbox d-block p-4\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <div class=\"ex-recentwright w-100 mb-3\">\r\n                      <div\r\n                        class=\"sk_rect btn-min-w sk_img_thumb\"\r\n                        style={{ paddingBottom: \"55%\" }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <div class=\"w-100\">\r\n                      <div class=\"ex-recentwleft w-50\">\r\n                        <div class=\"sk_line sk_line_height_12\"></div>\r\n                        <div class=\"sk_line sk_line_80 sk_line_height_8\"></div>\r\n                      </div>\r\n                      <div className=\"mt-5\">\r\n                        <Network />\r\n                        <Network />\r\n                        <Network />\r\n                      </div>\r\n                      <div class=\"ex-recentwright d-flex w-100\">\r\n                        <Action />\r\n                        <Action />\r\n                        <Action />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(WallsSkeleton);\r\n","  import React, { useRef, useState } from \"react\";\r\n  import { Card, CardBody, Dropdown } from \"react-bootstrap\";\r\n  import { SplideSlide } from \"@splidejs/react-splide\";\r\n  import SlideSection from \"./common/slideSection\";\r\n  import NetworkIcon from \"../../analytics-new/layout/common/networkIcon\";\r\n  import { Link, useNavigate } from \"react-router-dom\";\r\n  import { getWidgetWallData } from \"../../../../actions/wallDataAction\";\r\n  import { shallowEqual, useDispatch } from \"react-redux\";\r\n  import { getWallFeeds } from \"../../../../actions/display/analytics\";\r\n  import { toggleAddFeedsSection_D } from \"../../../../actions/display/showDisplayModalAction\";\r\n  import { openCreateNewWallPopup } from \"../../../../actions/display/wallsAction\";\r\n  import DropdownComponet from \"../../walls/component/modal/Dropdown\";\r\n  import WallsSkeleton from \"./skeleton/wallsSkeleton\";\r\n  import HoverVideoPlayer from \"react-hover-video-player\";\r\n  import { baseUrl, kFormatter } from \"../../../../utils\";\r\n  import CreateWall from \"./common/createWall\";\r\n  import { useSelector } from \"react-redux\";\r\n  import PercentDifference from \"../../analytics-new/layout/common/percentDifference\";\r\n\r\n  const CreatedWalls = (props) => {\r\n    const { allWalllist, loader } = props;\r\n    const { userData } = useSelector(\r\n      (state) => ({\r\n        wallReducer: state.wallReducer,\r\n        userData: state.authenticated.userData,\r\n      }),\r\n      shallowEqual\r\n    );\r\n\r\n    const splideRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [upgrade, setUpgrade] = React.useState(false);\r\n    const [modalData, setModalData] = React.useState({\r\n      profanity: 0,\r\n      modalShow: false,\r\n      name: \"\",\r\n      url: \"\",\r\n      wall_id: null,\r\n      autoUpdate: 1,\r\n      rename_status: 0,\r\n      callbackWall: 0,\r\n    });\r\n\r\n    const [activeWall, setactiveWall] = useState(0);\r\n    const { user, UserPlan } = props.userData;\r\n\r\n    const callbackWall = (status) => {};\r\n\r\n    const handleCategoryClick = (startIndex) => {\r\n      if (splideRef.current) splideRef.current.splide.go(startIndex); // Move to the specific slide\r\n    };\r\n\r\n    const displayWindowOpen = (wallId) => {\r\n      dispatch(getWidgetWallData(user.ownerId, wallId));\r\n      dispatch(getWallFeeds(user.ownerId));\r\n      navigate(`/wall/preview/${wallId}`);\r\n    };\r\n\r\n    \r\n    const nevigationRedirect = (activeIndex, wallId = 0, nevigation = 0, feedId = 0) => {\r\n\r\n      if (allWalllist.length != 1 && !activeIndex ) return;\r\n     \r\n      switch (nevigation) {\r\n        case 1:\r\n          navigate(`/moderation/index/${wallId}`);\r\n          localStorage.setItem(\"wallId\", wallId);\r\n          break;\r\n          \r\n        case 2:\r\n          const analyticPath = ![58].includes(UserPlan?.planId) ? \"/analytic-new/\" : \"analytic/\";\r\n          navigate(`${analyticPath}${wallId}`);\r\n          dispatch(getWidgetWallData(user?.ownerId, wallId));\r\n          break;\r\n          \r\n        case 3:\r\n          displayWindowOpen(wallId);\r\n          break;\r\n          \r\n        case 4:\r\n          if (!feedId?.length) dispatch(toggleAddFeedsSection_D(true));\r\n          dispatch(getWidgetWallData(user?.ownerId, wallId));\r\n          navigate(`/wall/index/${wallId}`);\r\n          break;\r\n          \r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    const clickToUpdateState = (data) => (event) => {\r\n      dispatch(openCreateNewWallPopup(false));\r\n      const widgetCount =\r\n        allWalllist && allWalllist.length ? allWalllist.length : 0;\r\n      if (widgetCount < userData.UserRule.walls || data.rename_status == 1)\r\n        setModalData(data);\r\n      else setUpgrade(true);\r\n    };\r\n\r\n    return (\r\n      <div className=\"created-walls-section mb-5\">\r\n        <Card className=\"p-0 card-custom card-stretch\">\r\n          {(allWalllist && Object.keys(allWalllist).length) || loader ? (\r\n            <>\r\n              <Card.Header className=\"p-5\">\r\n                <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\r\n                  <h6 class=\"card-label font-weight-bolder m-0 \">\r\n                    My Walls\r\n                  </h6>\r\n                  {!loader ? (\r\n                    <div className=\"\">\r\n                      <Link\r\n                        to={\"/walls\"}\r\n                        className=\"text-secondary font-size-base\"\r\n                      >\r\n                        View All\r\n                      </Link>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </Card.Header>\r\n\r\n              <CardBody className=\"p-5\">\r\n                {loader ? (\r\n                  <WallsSkeleton />\r\n                ) : (\r\n                  <>\r\n                    <div className=\"row mb-5 \">\r\n                      <div className=\"col-sm-8\">\r\n                        <div className=\"custom-pagination\">\r\n                          {Object.keys(allWalllist).length &&\r\n                            allWalllist.map((e, index) => (\r\n                              <button\r\n                                className={`btn ${\r\n                                  activeWall == index ||\r\n                                  Object.keys(allWalllist).length == 1\r\n                                    ? \"btn-primary\"\r\n                                    : \"btn-outline-dark\"\r\n                                } me-2 mb-1 text-capitalize overflow-hidden text-nowrap text-ellipsis text-capitalize mx-w-200`}\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  handleCategoryClick(index);\r\n                                  setactiveWall(index);\r\n                                }}\r\n                              >\r\n                                {e.name}\r\n                              </button>\r\n                            ))}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-sm-4\">\r\n                        <div className=\"custom_primary_secondary d-flex justify-content-end mt-1\">\r\n                          <CreateWall\r\n                            modalData={modalData}\r\n                            widgetWallsData={allWalllist}\r\n                            upgrade={upgrade}\r\n                            clickToUpdateState={clickToUpdateState}\r\n                            setUpgrade={setUpgrade}\r\n                            setupdateWall={\"\"}\r\n                            setModalData={setModalData}\r\n                            isCollaboratorRole={JSON.parse(\r\n                              localStorage.getItem(\"isCollaborator\")\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Splide Slider */}\r\n\r\n                    <SlideSection\r\n                      section={1}\r\n                      totalRecord={allWalllist.length}\r\n                      splideRef={splideRef}\r\n                      setactiveWall={setactiveWall}\r\n                    >\r\n                      {allWalllist.map((e, index) => {\r\n\r\n                        const activewallIndex = activeWall===index\r\n                        return (\r\n                          <SplideSlide\r\n                            data-feedList={e.feedList}\r\n                            data-wallId={e.id}\r\n                            className={`splide__slide_walls`}\r\n                            key={index}\r\n                          >\r\n                            <div\r\n                              key={activeWall + index}\r\n                              className={`created-walls-card h-100 splide__slide-${index}`}\r\n                            >\r\n                              <div className={`created-walls-card-inner h-100 p-5 ${(activeWall === index || allWalllist.length==1) ? 'overlay-hide' : ''}`}>\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-md-6 nevigation-wall\">\r\n                                    <div className=\"wall_cont_wrap innter_wall_cont_wrap_ cursor-pointer created-walls-card-img p-0\">\r\n                                      <a\r\n                                        to={`#`}\r\n                                        onClick={() =>  nevigationRedirect(activewallIndex,\r\n                                                e.id,\r\n                                                4,\r\n                                                e.feedList\r\n                                              )\r\n                                          }\r\n                                        className=\"card card-custom overlay shadow-none overflow-hidden rounded-0\"\r\n                                      >\r\n                                        {(activeWall === index || allWalllist.length==1) ? (\r\n                                          <>\r\n                                            <video\r\n                                            className=\"tb_post_modal_video w-100 h-100 mx-h-470\"\r\n                                            muted\r\n                                            autoPlay={true}\r\n                                            data-type=\"video\"\r\n                                            data-load={0}\r\n                                            loop\r\n                                            src={`${baseUrl(\r\n                                              `theme-media/theme-video/${e.signageTheme}.mp4?v=45445`\r\n                                            )}`}\r\n                                            style={{\r\n                                              width: \"100%\",\r\n                                              paddingTop: \"-10px\",\r\n                                            }}\r\n                                          ></video>  <img\r\n                                          role=\"img\"\r\n                                          src={`${baseUrl(\r\n                                            `theme-media/theme-thumb/${e.signageTheme}.png`\r\n                                          )}`}\r\n                                          height={260}\r\n                                          width={\"100%\"}\r\n                                        />\r\n                                          </>\r\n                                        ) : (\r\n                                          <>\r\n                                           <HoverVideoPlayer className=\"position-absolute h-100\"\r\n                                            videoSrc={`${baseUrl(\r\n                                              `theme-media/theme-video/${e.signageTheme}.mp4?v=454`\r\n                                            )}`}\r\n                                            width={391}\r\n                                            height={300}\r\n                                            style={{\r\n                                              width: \"100%\",\r\n                                              paddingTop: \"-10px\",\r\n                                            }}\r\n                                          /> <img\r\n                                          role=\"img\"\r\n                                          src={`${baseUrl(\r\n                                            `theme-media/theme-thumb/${e.signageTheme}.png`\r\n                                          )}`}\r\n                                          height={260}\r\n                                          width={\"100%\"}\r\n                                        />\r\n                                          </>\r\n                                        )}\r\n                                        \r\n\r\n                                        <div className=\"overlay-layer\">\r\n                                          <img\r\n                                            src={baseUrl(\r\n                                              `dashboard/icons/play-icon.svg`\r\n                                            )}\r\n                                            height={46}\r\n                                            width={46}\r\n                                            className=\"img-fluid\"\r\n                                            alt=\"play\"\r\n                                          />\r\n                                        </div>\r\n                                      </a>\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"col-md-6\">\r\n                                    <div className=\"mt-3 d-flex flex-column justify-content-between h-100\">\r\n                                      <div className=\"wall_section-2\">\r\n                                        <div className=\"d-flex justify-content-between mb-8\">\r\n                                          <a\r\n                                            to={`#`}\r\n                                            onClick={() =>\r\n                                            (activeWall === index || allWalllist.length==1)\r\n                                                ? nevigationRedirect(activewallIndex,\r\n                                                    e.id,\r\n                                                    4,\r\n                                                    e.feedList\r\n                                                  )\r\n                                                : {}\r\n                                            }\r\n                                          >\r\n                                            <div className=\"\">\r\n                                              <h5 className=\"mb-2 text-capitalize d-flex align-items-center nevigation-wall\">\r\n                                                {e.name}\r\n                                                {e.activeScreen ? (\r\n                                                  <span className=\"status_active\"></span>\r\n                                                ) : null}\r\n                                              </h5>\r\n                                              <p className=\"text-secondary text-capitalize m-0\">\r\n                                                {`${e.themeName} : ${e.themeLayout}`}\r\n                                              </p>\r\n                                            </div>\r\n                                          </a>\r\n                                          <div className=\"\">\r\n                                            <p className=\"text-secondary font-weight-bold font-size-h6 m-0\">\r\n                                              Posts: {kFormatter(e.totalPostCount)}\r\n\r\n                                              { e.difference ?  \r\n                                                <PercentDifference difference={e.difference} flag={e.flagColor} /> : null }  \r\n                                            </p>\r\n                                          </div>\r\n                                        </div>\r\n                                        {e.feedList &&\r\n                                        Object.keys(e.feedList).length ? (\r\n                                          <div className=\"created-walls-network mb-8\">\r\n                                            <ul className=\"m-0\">\r\n                                              {e.feedList.map((fdata, key) => {\r\n                                                return (\r\n                                                  <li className=\"d-flex align-items-center mb-4 \">\r\n                                                    <NetworkIcon\r\n                                                      isDashboard={\r\n                                                        \"me-2 text-center text-white\"\r\n                                                      }\r\n                                                      icon={fdata.socialIcon}\r\n                                                    />\r\n                                                    { fdata.name.replace(/<i[^>]*>(.*?)<\\/i>/g, '') }\r\n                                                  </li>\r\n                                                );\r\n                                              })}\r\n                                            </ul>\r\n                                          </div>\r\n                                        ) : null}\r\n                                      </div>\r\n\r\n                                      <div className=\"d-flex align-items-center justify-content-between mb-3\">\r\n                                        <div className=\"created-walls-report d-flex align-items-center\">\r\n                                          <a\r\n                                            onClick={() =>\r\n                                              nevigationRedirect(activewallIndex,e.id, 1)\r\n                                            }\r\n                                            href=\"#\"\r\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\r\n                                          >\r\n                                            <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              className=\"me-2\"\r\n                                              width={\"24px\"}\r\n                                              height={\"24px\"}\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M6.99979 7V3C6.99979 2.44772 7.4475 2 7.99979 2H20.9998C21.5521 2 21.9998 2.44772 21.9998 3V16C21.9998 16.5523 21.5521 17 20.9998 17H17V20.9925C17 21.5489 16.551 22 15.9925 22H3.00728C2.45086 22 2 21.5511 2 20.9925L2.00276 8.00748C2.00288 7.45107 2.4518 7 3.01025 7H6.99979ZM8.99979 7H15.9927C16.549 7 17 7.44892 17 8.00748V15H19.9998V4H8.99979V7ZM15 9H4.00255L4.00021 20H15V9ZM8.50242 18L4.96689 14.4645L6.3811 13.0503L8.50242 15.1716L12.7451 10.9289L14.1593 12.3431L8.50242 18Z\"></path>\r\n                                            </svg>{\" \"}\r\n                                            Moderate\r\n                                          </a>\r\n                                          <a\r\n                                            href=\"#\"\r\n                                            onClick={() =>\r\n                                              nevigationRedirect(activewallIndex,e.id, 2)\r\n                                            }\r\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\r\n                                          >\r\n                                            <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              className=\"me-2\"\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              width={\"24px\"}\r\n                                              height={\"24px\"}\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M2 13H8V21H2V13ZM16 8H22V21H16V8ZM9 3H15V21H9V3ZM4 15V19H6V15H4ZM11 5V19H13V5H11ZM18 10V19H20V10H18Z\"></path>\r\n                                            </svg>{\" \"}\r\n                                            Analytics\r\n                                          </a>\r\n                                          <a\r\n                                            href=\"#\"\r\n                                            onClick={() =>\r\n                                              nevigationRedirect(activewallIndex,e.id, 3)\r\n                                            }\r\n                                            className=\"btn btn-secondary d-flex align-items-center text-secondary me-2 border-0\"\r\n                                          >\r\n                                            <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              className=\"me-2\"\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              width={\"24px\"}\r\n                                              height={\"24px\"}\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M4 16H20V5H4V16ZM13 18V20H17V22H7V20H11V18H2.9918C2.44405 18 2 17.5511 2 16.9925V4.00748C2 3.45107 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44892 22 4.00748V16.9925C22 17.5489 21.5447 18 21.0082 18H13Z\"></path>\r\n                                            </svg>{\" \"}\r\n                                            Display\r\n                                          </a>\r\n                                        </div>\r\n                                        <div className=\"\">\r\n                                          <button\r\n                                            type=\"button\"\r\n                                            className=\"p-0 border-0 bg-transparent\"\r\n                                          >\r\n                                            <div className=\"card-toolbar\">\r\n                                              <Dropdown\r\n                                                onClick={() =>\r\n                                                  nevigationRedirect(activewallIndex)\r\n                                                }\r\n                                                align={\"end\"}\r\n                                              >\r\n                                                <Dropdown.Toggle className=\"btn btn-link btn-icon btn-sm btn-clean btn-after-none w-auto\">\r\n                                                  <svg\r\n                                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                    height={\"20px\"}\r\n                                                    width={\"20px\"}\r\n                                                    viewBox=\"0 0 24 24\"\r\n                                                    fill=\"currentColor\"\r\n                                                  >\r\n                                                    <path d=\"M12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5C14 3.9 13.1 3 12 3ZM12 17C10.9 17 10 17.9 10 19C10 20.1 10.9 21 12 21C13.1 21 14 20.1 14 19C14 17.9 13.1 17 12 17ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"></path>\r\n                                                  </svg>\r\n                                                </Dropdown.Toggle>\r\n                                                <Dropdown.Menu\r\n                                                  style={{ width: 175 }}\r\n                                                >\r\n                                                  <DropdownComponet\r\n                                                    callbackWall={callbackWall}\r\n                                                    props={{\r\n                                                      wallsData: e,\r\n                                                      clickToUpdateState:\r\n                                                        clickToUpdateState,\r\n                                                    }}\r\n                                                    clickToUpdateState={\r\n                                                      clickToUpdateState\r\n                                                    }\r\n                                                    ownerId={user.ownerId}\r\n                                                    userData={props.userData}\r\n                                                  />\r\n                                                </Dropdown.Menu>\r\n                                              </Dropdown>\r\n                                            </div>\r\n                                          </button>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </SplideSlide>\r\n                        );\r\n                      })}\r\n                    </SlideSection>\r\n                  </>\r\n                )}\r\n              </CardBody>\r\n            </>\r\n          ) : (\r\n            <div className=\"col-12\">\r\n              <div className=\"d-flex justify-content-center w-100\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() =>\r\n                    clickToUpdateState({\r\n                      modalShow: true,\r\n                      wall_id: null,\r\n                      autoUpdate: 1,\r\n                      callbackWall: 1,\r\n                    })\r\n                  }\r\n                  className=\"btn btn-link d-flex flex-wrap flex-column align-content-center add_card_button create-new-wall cursor-pointer px-5 w-100\">\r\n                  <CreateWall\r\n                    firstWall={1}\r\n                    widgetWallsData={allWalllist}\r\n                    modalData={modalData}\r\n                    upgrade={upgrade}\r\n                    clickToUpdateState={clickToUpdateState}\r\n                    setUpgrade={setUpgrade}\r\n                    setupdateWall={\"\"}\r\n                    setModalData={setModalData}\r\n                    isCollaboratorRole={JSON.parse(\r\n                      localStorage.getItem(\"isCollaborator\")\r\n                    )}\r\n                  />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default React.memo(CreatedWalls);\r\n"],"names":["NetworkIcon","props","includes","icon","_jsxs","id","xmlns","width","height","viewBox","children","_jsx","d","fill","transform","className","isDashboard","size","React","PercentDifference","difference","flag","class","kFormatter","Math","abs","_ref","setactiveWall","section","totalRecord","splideRef","currentSlide","setCurrentSlide","useState","useEffect","_splideRef$current","current","splide","on","e","go","index","newIndex","manageSlider","_splideRef$current2","arguments","length","undefined","totalList","toggleDisplay","displayStyle","slideWalls","document","getElementsByClassName","i","updateKey","elementNew","getElementById","style","display","Ispreview","splideListUl","Isnext","querySelector","createBreakpointSettings","perPage","isWall","clones","postCount","autoplay","drag","totalPost","loop","perPagePost","settings","start","type","speed","perMove","lazyLoad","interval","autoWidth","gap","pagination","arrows","fixedHeight","breakpoints","Splide","ref","hasTrack","options","SplideTrack","role","disabled","Network","Action","WallsSkeleton","map","paddingBottom","CreatedWalls","allWalllist","loader","userData","useSelector","state","wallReducer","authenticated","shallowEqual","useRef","dispatch","useDispatch","navigate","useNavigate","upgrade","setUpgrade","modalData","setModalData","profanity","modalShow","name","url","wall_id","autoUpdate","rename_status","callbackWall","activeWall","user","UserPlan","status","nevigationRedirect","activeIndex","wallId","nevigation","feedId","localStorage","setItem","analyticPath","planId","getWidgetWallData","ownerId","getWallFeeds","displayWindowOpen","toggleAddFeedsSection_D","clickToUpdateState","data","event","openCreateNewWallPopup","UserRule","walls","Card","Object","keys","_Fragment","Header","Link","to","CardBody","onClick","startIndex","CreateWall","widgetWallsData","setupdateWall","isCollaboratorRole","JSON","parse","getItem","SlideSection","activewallIndex","SplideSlide","feedList","muted","autoPlay","src","baseUrl","signageTheme","paddingTop","HoverVideoPlayer","videoSrc","alt","activeScreen","themeName","themeLayout","totalPostCount","flagColor","fdata","key","socialIcon","replace","href","Dropdown","align","Toggle","Menu","DropdownComponet","wallsData","firstWall"],"sourceRoot":""}