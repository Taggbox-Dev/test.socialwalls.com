{"version":3,"file":"static/js/1294.b5c5b40e.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/graph/sentimentChart.js","app/Display/analytics-new/content/components/sentimentAnalytics.js","app/Display/analytics-new/layout/common/filterModeration.js","app/Display/analytics-new/layout/common/sectionHeading.js","app/Display/analytics-new/layout/skeleton/imageSkeleton.js","app/Display/analytics-new/utils/index.js"],"sourcesContent":["\r\nimport React, { PureComponent } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport ApexCharts from \"apexcharts\";\r\nimport moment from \"moment\";\r\nexport default class SentimentChart extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const getData = this.props.contentAnalyticsData.newSeries[0]['data']\r\n    const lastCategory = getData && Object.keys(getData).length && getData.length-1; // Use dynamic category if needed\r\n    const seriesData   = getData && Object.keys(getData).length && getData;\r\n    const maxData = getData && Object.keys(getData).length && getData.some(value => value[1] > 0) ? 1 : 0;\r\n\r\n    const uniqueData = getData && Object.keys(getData).length && getData.reduce((acc, item) => {\r\n      let getItem = Number(item[1])\r\n       if (!acc.includes(getItem)) {\r\n        acc.push(getItem);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    \r\n   \r\n    this.state = {\r\n      series: this.props.contentAnalyticsData.newSeries,\r\n      options: {\r\n        colors: [\"#546FED\"],\r\n        chart: {\r\n          id: \"area-datetime\",\r\n          toolbar: { show: false },\r\n          type: \"line\",\r\n          animations: {\r\n            enabled: true,\r\n            easing: \"linear\",\r\n            dynamicAnimation: {\r\n              speed: 1000,\r\n            },\r\n          },\r\n          height: 350,\r\n          zoom: { enabled: false },\r\n        },\r\n        legend: {\r\n          show: true,\r\n          position: \"top\",\r\n          itemMargin: {\r\n            horizontal: 20,\r\n            vertical: 0,\r\n          },\r\n        },\r\n        dataLabels: { enabled: false },\r\n        markers: { \r\n        size: maxData && uniqueData.length>1 ? 4 : 0, style: \"hollow\" },\r\n        stroke: {\r\n          width: [maxData ? 4 : 0],\r\n          curve: \"straight\",\r\n        },\r\n        xaxis: {\r\n          type: \"datetime\", \r\n          min: this.props.contentAnalyticsData?.unixDate[0],\r\n          max: (this.props.contentAnalyticsData?.unixDate[lastCategory]) + (2 * 60 * 60 * 1000), // Subtract 2 hours from the end time\r\n          labels: {  \r\n            formatter: (value) => {\r\n              console.log(moment(value).format('HH:mm'),'valuevaluevalue')\r\n              return moment(value).format('HH:mm')\r\n            }\r\n          },\r\n          tooltip: {\r\n            shared: true,\r\n            intersect: false, // Allows tooltip to show when hovering near the points\r\n            formatter: function (value) {\r\n              return moment(value).format('DD-MM-YY HH:mm')\r\n            },\r\n            \r\n          }\r\n          ,tickPlacement: 'on', // Optional: places ticks directly on the x-axis labels\r\n\r\n        },\r\n        yaxis: {\r\n          min: 0,   // Fixing the y-axis minimum value to 0\r\n          max: 100, // Fixing the y-axis maximum value to 100\r\n          labels: {\r\n            formatter: function (value) {\r\n              return Math.round(value); // Rounds the value to the nearest integer\r\n            }\r\n          }\r\n        },\r\n      \r\n        annotations: {\r\n          points: [\r\n            {\r\n              x: seriesData ? lastCategory && seriesData[lastCategory][0]-1 : 0, // Dynamically set based on last category\r\n              y: seriesData ? lastCategory && seriesData[lastCategory][1] : 0, // Last data point\r\n              marker: {\r\n                size: maxData ? 10 : 0, // Highlight the last marker\r\n                fillColor: \"#546FED\",\r\n                strokeColor: \"#2545d7\",\r\n                shape: \"circle\",\r\n                cssClass: \"blinking-marker\", // Apply custom CSS class for blinking effect\r\n              },\r\n              label: {\r\n                borderColor: \"#546FED\",\r\n                offsetY: -10, // Move the label higher to avoid overlap\r\n                offsetX: -10, // Move the label higher to avoid overlap\r\n                style: {\r\n                  color: \"#546FED\",\r\n                  background: \"transparent\", // Make label background transparent\r\n                  zIndex: 0, // Lower z-index to ensure marker is on top\r\n                },\r\n                //text: `${lastCategory && seriesData[lastCategory][1]}`,\r\n              },\r\n            }],\r\n          yaxis: [\r\n            {\r\n              y: 30,\r\n              y2: 0,\r\n              borderColor: \"transparent\",\r\n              fillColor: \"#f7caca\", // Color for 0-30 range\r\n            },\r\n            {\r\n              y: 60,\r\n              y2: 30,\r\n              borderColor: \"transparent\",\r\n              fillColor: \"#f9debe\", // Color for 30-60 range\r\n            },\r\n            {\r\n              y: 100,\r\n              y2: 60,\r\n              borderColor: \"transparent\",\r\n              fillColor: \"#cfe7d5\", // Color for 60-100 range\r\n            },\r\n          ],\r\n        },\r\n        tooltip: {\r\n          enabled: true,\r\n          x: { format: \"dd MMM yyyy\" },\r\n          custom: ({ series, seriesIndex, dataPointIndex, w }) => {\r\n\r\n             const seriesData = series[0][dataPointIndex]\r\n              return (!maxData ? \"\" : \r\n                seriesData<=30 ?\r\n                `<div class=\"apexcharts-tooltip-item bg-red\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji5.svg\">` +\r\n                `<div><strong>Negative</strong><br/>` + `${seriesData}%` +`</div></div>`\r\n                  : seriesData<=60 ? \r\n                `<div class=\"apexcharts-tooltip-item bg-yelow\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji3.svg\">` + \r\n                `<div><strong>Neutral</strong><br/>` + `${seriesData}%` + `</div></div>`\r\n                  :\r\n                `<div class=\"apexcharts-tooltip-item bg-green\"><img src=\"https://cloud.tagbox.com/react-app/media/icons/emoji/emoji1.svg\">` +\r\n                `<div><strong>Positive</strong><br/>` + `${seriesData}%` + `</div></div>`\r\n              )\r\n          },\r\n        },\r\n        grid: {\r\n          show: false, // Enable or disable the entire grid (optional)\r\n        },\r\n      },\r\n      responsive: [\r\n        {\r\n          // breakpoint: 991,\r\n          options: {\r\n            chart: {\r\n              height: 300,\r\n            },\r\n          },\r\n          // breakpoint: 767,\r\n          options: {\r\n            chart: {\r\n              height: 280,\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { contentAnalyticsData } = this.props;\r\n\r\n    const lastDate =\r\n      contentAnalyticsData?.unixDate[\r\n        contentAnalyticsData?.unixDate?.length - 1\r\n      ];\r\n    if (lastDate) {\r\n      const chart = ApexCharts.getChartByID(\"area-datetime2\");\r\n      if (chart) {\r\n        chart.zoomX(\r\n          contentAnalyticsData?.unixDate[0],\r\n          contentAnalyticsData?.unixDate[lastDate - 1]\r\n        );\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n     <> \r\n      <ReactApexChart\r\n        options={this.state.options}\r\n        series={this.state.series}\r\n        type=\"line\"\r\n        height={350}\r\n      />\r\n           \r\n     </> \r\n    );\r\n  }\r\n}\r\n","import { Card, CardBody, Form, Tab, Tabs } from \"react-bootstrap\";\r\nimport { toAbsoluteUrl } from \"../../utils\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport React, { useState } from \"react\";\r\nimport { reArrangeSeriesSentiment } from \"../../../../../utils\";\r\nimport SentimentChart from \"../../layout/common/graph/sentimentChart\";\r\nimport ImageSkeleton from \"../../layout/skeleton/imageSkeleton\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getsentimentLiveTrenddateRange } from \"../../../../../actions/analyticsNew\";\r\nimport FilterModeration from \"../../layout/common/filterModeration\";\r\nimport SectionHeading from \"../../layout/common/sectionHeading\";\r\n\r\nconst SentimentAnalytics = (props) => {\r\n\r\n  const setntimentY= [0,10,20,30,40,50,60,70,80,90,100]\r\n\r\n  const { live_trend, sentimentPost, loader, dateFilter, selectedWallFeed } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const [activeTab, setactiveTab] = useState(\"trends\");\r\n  const [activeTime, setactiveTime] = useState(0);\r\n \r\n  const getinitiallastScore =  live_trend.initiallastScore && Object.keys(live_trend.initiallastScore.length) ? live_trend.initiallastScore[0] : []\r\n \r\n   if(getinitiallastScore && getinitiallastScore.sentiment>0){\r\n        live_trend.data[0] =   Number(getinitiallastScore.sentiment)\r\n    }\r\n\r\n  const sentimentAnalytics = live_trend && Object.keys(live_trend).length ? reArrangeSeriesSentiment([live_trend],1) : [];\r\n  const { data } = sentimentPost && Object.keys(sentimentPost).length ? sentimentPost[0] : [];\r\n\r\n  \r\n  const SentimentsData = data && Object.keys(data).length ? [\r\n    { post: data[0]['Strongly Positive'], type:'Strongly Positive', icon: \"/emojis/emoji1.svg\", value: 0, color: \"#25cb6b\" },\r\n    { post: data[0]['Positive'], type:'Positive', icon: \"/emojis/emoji2.svg\", value: 0, color: \"#50dca1\" },\r\n    { post: data[0]['Neutral'], type:'Neutral', icon: \"/emojis/emoji3.svg\", value: 0, color: \"#ffb143\" },\r\n    { post: data[0]['Negative'], type:'Negative', icon: \"/emojis/emoji4.svg\", value: 0, color: \"#ff6c7c\" },\r\n    { post: data[0]['Strongly Negative'], type:'Strongly Negative', icon: \"/emojis/emoji5.svg\", value: 0, color: \"#ff293a\" },\r\n  ] : [];\r\n\r\n  const handleSelect = (e) => {\r\n     setactiveTab(e)\r\n  }\r\n\r\n  const getSentimentData=(value)=>{  \r\n      setactiveTime(value)\r\n      dispatch(getsentimentLiveTrenddateRange(value))\r\n  }\r\n\r\n  return (\r\n    <Card className=\"sw-card-custom gutter-b px-5 py-8 card-shadow mb-5\">\r\n        <SectionHeading cardTitleCss={`p-0 border-0`} headingMargin={1} selectedWallFeed={selectedWallFeed} section={1} iconFull={'https://socialwalls.com/wp-content/themes/socialwalls/assets/section-library/images/home/new/ai.svg'} title={'Sentiments Analysis'} />\r\n      <CardBody className=\"p-0 position-relative\">\r\n         { activeTab=='trends' ?\r\n            <div className=\"date-filter position-absolute end-0 top-0\">\r\n              <Form.Select value={activeTime} onChange={(e)=>getSentimentData(e.target.value)} size=\"md\">\r\n                <option value={24}>Last 24 Hours</option>\r\n                <option value={48}>Last 48 Hours</option>\r\n              </Form.Select>\r\n            </div>  : null }\r\n            <Tabs activeKey={activeTab} onSelect={handleSelect} defaultActiveKey=\"trends\" id=\"uncontrolled-tab-example\" className=\"nav-tabs-line sw-custom-nav nav nav-tabs mb-5\">\r\n              <Tab eventKey=\"trends\" title=\"Live Trends\">\r\n                <div className=\"card-body p-0 mb-0\">\r\n                    { loader ?\r\n                     <ImageSkeleton img={4} />\r\n                        :\r\n                      <SentimentChart contentAnalyticsData={sentimentAnalytics} type={\"line\"} /> \r\n                  }\r\n                </div>\r\n              </Tab>\r\n              <Tab eventKey=\"statistics\" title=\"Statistics\">\r\n                <div className=\"card-body p-0 mb-0\">\r\n                  \r\n                  <div className=\"sentiment-statistics py-8\">\r\n                      \r\n                    <div className=\"d-flex\">\r\n                      <div className=\"col-md-3 col-2\">\r\n\r\n\r\n                        {SentimentsData &&\r\n                            Object.keys(SentimentsData).length &&\r\n                            SentimentsData.map((data, index) => {\r\n                              return (\r\n                                <div className=\"mb-7\">\r\n                                  <div className=\"d-flex align-items-center me-10 col-2\">\r\n                                   <FilterModeration isClass={'d-flex align-items-center d-block'} dateFilter={dateFilter} selectedWallFeed={selectedWallFeed} link={`sentiments=${(index+1)}`}> \r\n                                      <div className=\"svg-icon svg-icon-3x me-3\">\r\n                                        <SVG src={toAbsoluteUrl(SentimentsData[index].icon)} ></SVG>\r\n                                      </div> <strong className=\"text-dark d-md-block d-none text-nowrap\">{data.type}</strong>\r\n                                  </FilterModeration>\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            })}\r\n                      </div>\r\n\r\n                      \r\n                      <div className=\"col-md-9 col-10\">\r\n                        <div className=\"position-relative d-flex flex-column h-100 justify-content-between\">\r\n                          <div className=\"chart-bg d-flex\">\r\n                            { setntimentY.map((data)=>{  return  <span>{data}</span> }) }\r\n                        </div>\r\n                        {SentimentsData &&  \r\n                          Object.keys(SentimentsData).length &&\r\n                          SentimentsData.map((data, index) => {\r\n\r\n                            let total = [SentimentsData[0]['post'],SentimentsData[1]['post'],SentimentsData[2]['post'],SentimentsData[3]['post'],SentimentsData[4]['post']].reduce((a, b) => a + b, 0);\r\n                            let percent = parseInt(data.post) > 0 ? (data.post / total * 100) : 0;\r\n                            percent = percent.toFixed(1);\r\n\r\n                            return (\r\n                              <div className=\"d-flex align-items-center mb-7 w-100\">\r\n                                <div className=\"w-0 opacity-0 d-flex align-items-center\">\r\n                                  <div className=\"svg-icon svg-icon-3x me-3\">\r\n                                    <SVG src={toAbsoluteUrl(SentimentsData[index].icon)} ></SVG>\r\n                                  </div>\r\n                                </div>\r\n                                <div\r\n                                  className={`progress_sentiment progress w-100 h-auto position-relative pro_${index} ${percent>86 ? 'progress-tooltip-over' : ''} `}\r\n                                  now={percent}\r\n                                  label={percent}\r\n                                  style={{background : 'none'}}\r\n                                >\r\n                                  <div\r\n                                    role=\"progressbar\"\r\n                                    className=\"progress-bar me-5\"\r\n                                    aria-valuenow={percent}\r\n                                    aria-valuemin=\"0\"\r\n                                    aria-valuemax=\"100\"\r\n                                    style={{\r\n                                      width: `${percent}%`,\r\n                                      backgroundColor: SentimentsData[index].color,\r\n                                    }}\r\n                                  >\r\n                                    <div className=\"progress-tooltip-box progress_label d-flex align-items-start border-0 text-dark text-start shadow\">\r\n                                      <SVG src={toAbsoluteUrl(SentimentsData[index].icon)} width={20} height={20} className=\"me-2\" ></SVG>\r\n                                      <div className=\"toolitp-content\">\r\n                                      <div className=\"font-size-xs\">{SentimentsData[index].type}</div>\r\n                                      <strong className=\"font-size-sm\">{SentimentsData[index].post} Posts<text style={{color: SentimentsData[index].color}}>({percent}%)</text></strong>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                  <strong className=\"font-size-sm\">{data.post} Posts ({`${percent}%`})</strong>\r\n                                </div>\r\n                              </div>\r\n                               \r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Tab>\r\n            </Tabs>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default React.memo(SentimentAnalytics);\r\n","import moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst FilterModeration = (props) => {\r\n\r\n  const { children, dateFilter, selectedWallFeed, link, isClass } = props  \r\n\r\n  return (\r\n    <Link className={`${isClass ? isClass : `mb-4 last-child-mb-0 d-block`}`} to={selectedWallFeed.length ? `/moderation/index/${localStorage.getItem('wallId')}?${link}/${moment(dateFilter.startDate).format(\"YYYY-MM-DD\")}/${moment(dateFilter.endDate).format(\"YYYY-MM-DD\")}` : `#`}>\r\n        {children}\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default FilterModeration\r\n","import { Button, CardHeader, CardTitle } from \"react-bootstrap\";\r\nimport { baseUrl } from \"../../../../../utils\";\r\n\r\nconst SectionHeading = (props) => {\r\n\r\n  const { title, section, cardTitleCss, icon, iconFull, selectedWallFeed, moreData, total, handlePopup, headingMargin } = props\r\n\r\n  // && selectedWallFeed && Object.keys(selectedWallFeed).length\r\n\r\n  return (\r\n    <CardHeader className={`${section==1 ? 'p-0 border-0' : section==2 ? 'p-5' : section==3 ? 'p-0 pb-3' : 'px-5 pt-5 border-0 pb-0'}`}>\r\n      <CardTitle className={cardTitleCss ? cardTitleCss : `mb-0 d-flex align-items-center justify-content-between`}>\r\n        <h6 class={`card-label font-weight-bolder ${!headingMargin ? 'm-0' : ''} `}>\r\n         { icon ? <img src={baseUrl(`dashboard/analytic/${icon}.svg`)}  height={\"20px\"} width={\"20px\"} /> : null }\r\n         { iconFull ? <img src={iconFull}  height={\"20px\"} width={\"20px\"} />  : null }   {title}</h6>\r\n         { (total > 5) || moreData ? (\r\n          <Button\r\n            variant=\"link\"\r\n            className=\"p-0\"\r\n            onClick={() => handlePopup(true)}\r\n          >\r\n            See More\r\n          </Button>\r\n        ) : null}\r\n      </CardTitle>\r\n    </CardHeader>\r\n  );\r\n};\r\n\r\nexport default SectionHeading;\r\n","import React from \"react\";\r\nimport { baseUrl } from \"../../../../../utils\";\r\n\r\nconst ImageSkeleton = (props) => {\r\n  return (\r\n    <div className=\"py-1 text-center\">\r\n      <img className=\"img-fluid\" src={baseUrl(`dashboard/analytic/content-analytis-${props.img}.svg`)} width={\"100%\"} height={\"403px\"}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ImageSkeleton)","import axios from 'axios';\r\nimport { GET_INSTAGRAM_IMAGE } from '../../../../actions/display/analytics';\r\nimport store from '../../../../redux/store';\r\nimport { ENV, INSTAGRAM_IMAGE_VIDEO_UPDATE, NoCameraImgPost } from '../../../../actions/api';\r\nimport moment from 'moment';\r\n\r\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\r\n\r\nexport const ordinal_suffix_of = (i) => {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j == 1 && k != 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j == 2 && k != 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j == 3 && k != 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}\r\n\r\nexport const secondsToTime = (secs) => {\r\n    // var hours = Math.floor(secs / (60 * 60));\r\n    // var divisor_for_minutes = secs % (60 * 60);\r\n    // var minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    // var divisor_for_seconds = divisor_for_minutes % 60;\r\n    // var seconds = Math.ceil(divisor_for_seconds);\r\n    // return `${hours}:${minutes}:${seconds}`;\r\n\r\n    var sec_num = parseInt(secs, 10); // don't forget the second param\r\n    var hours = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours < 10) { hours = \"0\" + hours; }\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n\r\n\r\n}\r\n\r\nexport const getTimeTypeSecondToTime = (secs, type) => {\r\n    let dataTime = secondsToTime(secs);\r\n    let acrtualTime = dataTime.split(':')\r\n    if (type == 1) {\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\r\n        else return 0;\r\n    }\r\n    else if (type == 2) {\r\n\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\r\n        else return 0;\r\n    }\r\n    else if (type == 3) {\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\r\n        else return 0;\r\n    }\r\n}\r\nexport const validURL = (str) => {\r\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\r\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\r\n    return !!pattern.test(str);\r\n}\r\n\r\nexport const convertIntToBool = (value) => {\r\n    if (value) return Boolean(value)\r\n    else return value;\r\n\r\n}\r\n\r\n\r\nexport const customClass = {\r\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\r\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\r\n}\r\n\r\n\r\nexport const updateURLForIframe = (url) => {\r\n    if (url && url.includes('youtube.com')) {\r\n        const urlSplits = url.split('?v=');\r\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\r\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\r\n        }\r\n    }\r\n    else if (url && url.includes('vimeo.com')) {\r\n        const urlSplits = url.split('/');\r\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\r\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\r\n        }\r\n    }\r\n    return url;\r\n}\r\n\r\nexport const getSecondsFromTime = (time) => {\r\n    let actualTime = time.split(':');\r\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\r\n    return totalSeconds;\r\n}\r\n\r\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\r\nexport const getPosition = (partitions, currentSceneContent) => {\r\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\r\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\r\n    return filterData;\r\n}\r\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\r\n\r\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\r\n\r\n    if (actualLayout && actualLayout[0]) {\r\n\r\n\r\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\r\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\r\n        if (actualDefault && Object.keys(actualDefault).length) {\r\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\r\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\r\n            }\r\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\r\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\r\n            }\r\n            else {\r\n                if (mixContentType == 1) {\r\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\r\n                }\r\n                else {\r\n                    return { height: 0, width: 0 }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return currentHeightWidth;\r\n        }\r\n    }\r\n}\r\n\r\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\r\n    const cData = cssStyle.split(\"#zone\");\r\n\r\n    var height = \"\"; var width = \"\";\r\n    if (cData && cData.length) {\r\n        cData.map((item, index) => {\r\n            const trimContent = item.trim()\r\n            const firstValue = trimContent.charAt(0);\r\n            if (firstValue == position[0].position) {\r\n                const replaceValue = item.split(\";\")\r\n                if (replaceValue && replaceValue.length) {\r\n                    replaceValue.map((rItem) => {\r\n                        const getHeightWidth = rItem.split(\":\");\r\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\r\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return { height, width, }\r\n}\r\n\r\nexport const convertHMS = (timeString) => {\r\n    const arr = timeString.split(\":\");\r\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\r\n    return seconds;\r\n}\r\n\r\n\r\n\r\n\r\nexport const getRandomArbitrary = (min, max) => {\r\n    return parseInt(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport const additionArrayData = (data) => {\r\n    if (data && data.length > 0) {\r\n        return data.reduce((total, num) => total + num)\r\n    }\r\n    else return 0\r\n}\r\n\r\nexport const kFormatter = (value) => {\r\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\r\n\r\n\r\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\r\n    try {\r\n\r\n\r\n        var newValue = value;\r\n        if (value >= 1000) {\r\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\r\n            var suffixNum = Math.floor((\"\" + value).length / 3);\r\n            var shortValue = '';\r\n            for (var precision = 2; precision >= 1; precision--) {\r\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\r\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\r\n                if (dotLessShortValue.length <= 2) { break; }\r\n            }\r\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\r\n            newValue = shortValue + suffixes[suffixNum];\r\n        }\r\n        return newValue;\r\n    }\r\n    catch (ex) {\r\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\r\n    }\r\n\r\n}\r\nexport const OverviewChartFormatting = (formattingData) => {\r\n    let data = [];\r\n    if (formattingData && formattingData.length > 0) {\r\n        formattingData.map((item) => {\r\n            data.push({\r\n                name: item.name,\r\n                type: 'line',\r\n                data: dataConvertToInt(item.data)\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n    else return formattingData;\r\n}\r\n\r\nexport const dataConvertToInt = (formateIntData) => {\r\n    let updateData = [];\r\n    if (formateIntData && formateIntData.length > 0) {\r\n        formateIntData.map((item) => {\r\n            updateData.push(parseInt(item))\r\n\r\n        })\r\n        return updateData\r\n\r\n\r\n    }\r\n    else return formateIntData\r\n\r\n}\r\n\r\n\r\nexport const networkURLIsValid = (str) => {\r\n    let output = str;\r\n    let matches;\r\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\r\n    if (matches && matches.length > 0) return true\r\n    else return false;\r\n}\r\n\r\nexport const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${ENV}.taggbox.com/display/post/update`;\r\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\r\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\r\n    const { moderation, authenticated } = store.getState();\r\n    const { details, listData } = moderation;\r\n    const { userData } = authenticated;\r\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\r\n    const url = details?.wall?.url;\r\n    const table = userData.UserPlan.db_table;\r\n    let dataFormatted = {\r\n        wallId: wallId,\r\n        postId: postId,\r\n        table_name: table,\r\n        ownerId: localStorage.getItem('ownerId'),\r\n        feedId: postData.length > 0 ? postData[0].feedId : '',\r\n        type: postData.length > 0 ? postData[0].type : '',\r\n        link: postData.length > 0 ? postData[0].link : '',\r\n        postFile: postData.length > 0 ? postData[0].postFile : '',\r\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\r\n        url: url\r\n    }\r\n    axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\r\n        e.target.src = data.media;\r\n        e.target.attributes[\"data-load\"].value = \"1\";\r\n    })\r\n}\r\n\r\nexport const updateInstagramPostImage = (data) => {\r\n    const { authenticated } = store.getState();\r\n    const { userData } = authenticated;\r\n    const table = userData.UserPlan.db_table;\r\n\r\n    let dataFormatted = {\r\n        ...data,\r\n        table_name: table\r\n    }\r\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\r\n        .then((response) => { })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n};\r\n\r\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\r\n    let html = response.data;\r\n    if (html) {\r\n        var regex = /_sharedData = ({.*);<\\/script>/m,\r\n            json = JSON.parse(regex.exec(html)[1]);\r\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\r\n            if (type == 'video') {\r\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\r\n                return videoPath;\r\n            } else {\r\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\r\n                return imagePath;\r\n            }\r\n        }\r\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\r\n\r\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\r\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\r\n            }\r\n        }\r\n        else {\r\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\r\n        }\r\n    }\r\n\r\n}).catch((error) => {\r\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\r\n    else return NO_CAMERA_IMAGE;\r\n})\r\n\r\n\r\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\r\n    // return\r\n    e.persist()\r\n   \r\n    const { userData } = store.getState().authenticated;\r\n    const table_name = userData.UserPlan.db_table;\r\n    const network = e.target.getAttribute(\"data-network\")\r\n    const wallId = e.target.getAttribute(\"data-wall-id\");\r\n    const postId = e.target.getAttribute(\"data-item-id\");\r\n    const filterId = e.target.getAttribute(\"data-filter-id\");\r\n    let links = e.target.getAttribute(\"data-link\");\r\n    let image_update = '';\r\n    let video_update = '';\r\n    // const UserDetail = store.getState();\r\n    if (network) {\r\n        const dataSrc = e.target.src;\r\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\r\n            if ((network == 2 || network == 18)) {\r\n                let postLinkId = links.split('/');\r\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\r\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\r\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\r\n                    updateStatusRenewImage(wallId, postId, table_name, e)\r\n                }\r\n                else {\r\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\r\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\r\n                        image_update = IMG_URL_UPDATE;\r\n                        e.target.attributes[\"data-load\"].value = \"1\";\r\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\r\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\r\n                        }\r\n                        e.target.style = \"\";\r\n                    }\r\n                    else {\r\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\r\n                            updateStatusRenewImage(wallId, postId, table_name, e)\r\n                        }\r\n                        else {\r\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\r\n                            image_update = IMG_URL_UPDATE.display_url;\r\n                            video_update = IMG_URL_UPDATE.video_url;\r\n                            e.target.attributes[\"data-load\"].value = \"1\";\r\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\r\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\r\n                            }\r\n                            e.target.style = \"\";\r\n                        }\r\n                    }\r\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\r\n\r\n                        updateInstagramPostImage({\r\n                            ownerId: localStorage.getItem('ownerId'),\r\n                            wallId: wallId,\r\n                            postFile: image_update,\r\n                            video: video_update,\r\n                            type: 2,\r\n                            postId: postId,\r\n                            table_name: table_name\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n            else {\r\n                const { details, listData } = store.getState().moderation;\r\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\r\n                const url = details?.wall?.url;\r\n\r\n                let dataFormatted = {\r\n                    wallId: wallId,\r\n                    postId: postId,\r\n                    table_name: table_name,\r\n                    ownerId: localStorage.getItem('ownerId'),\r\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\r\n                    type: postData.length > 0 ? postData[0].type : '',\r\n                    link: postData.length > 0 ? postData[0].link : '',\r\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\r\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\r\n                    url: url\r\n                }\r\n                axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\r\n                    e.target.src = data.media;\r\n                    e.target.attributes[\"data-load\"].value = \"1\";\r\n\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            if (dataSrc.includes(\"no-camera.svg\")) {\r\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n            }\r\n            else {\r\n                e.target.src = NO_CAMERA_IMAGE;\r\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n\r\n            }\r\n            e.target.attributes[\"data-load\"].value = \"1\";\r\n        }\r\n\r\n    }\r\n    else {\r\n        e.target.src = NO_CAMERA_IMAGE;\r\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const removeHttp = (str) => {\r\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\r\n}\r\n\r\n\r\nexport const dateFormat = (date) =>{\r\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\r\n}\r\n\r\n\r\n "],"names":["SentimentChart","PureComponent","constructor","props","_this$props$contentAn","_this$props$contentAn2","super","getData","this","contentAnalyticsData","newSeries","lastCategory","Object","keys","length","seriesData","maxData","some","value","uniqueData","reduce","acc","item","getItem","Number","includes","push","state","series","options","colors","chart","id","toolbar","show","type","animations","enabled","easing","dynamicAnimation","speed","height","zoom","legend","position","itemMargin","horizontal","vertical","dataLabels","markers","size","style","stroke","width","curve","xaxis","min","unixDate","max","labels","formatter","console","log","moment","format","tooltip","shared","intersect","tickPlacement","yaxis","Math","round","annotations","points","x","y","marker","fillColor","strokeColor","shape","cssClass","label","borderColor","offsetY","offsetX","color","background","zIndex","y2","custom","_ref","seriesIndex","dataPointIndex","w","grid","responsive","render","_contentAnalyticsData","lastDate","ApexCharts","zoomX","_jsx","_Fragment","children","ReactApexChart","SentimentAnalytics","live_trend","sentimentPost","loader","dateFilter","selectedWallFeed","dispatch","useDispatch","activeTab","setactiveTab","useState","activeTime","setactiveTime","getinitiallastScore","initiallastScore","sentiment","data","sentimentAnalytics","reArrangeSeriesSentiment","SentimentsData","post","icon","_jsxs","Card","className","SectionHeading","cardTitleCss","headingMargin","section","iconFull","title","CardBody","Form","Select","onChange","e","getSentimentData","target","getsentimentLiveTrenddateRange","Tabs","activeKey","onSelect","defaultActiveKey","Tab","eventKey","ImageSkeleton","img","map","index","FilterModeration","isClass","link","SVG","src","toAbsoluteUrl","total","a","b","percent","parseInt","toFixed","now","role","backgroundColor","React","Link","to","localStorage","startDate","endDate","moreData","handlePopup","CardHeader","CardTitle","class","baseUrl","Button","variant","onClick","pathname","kFormatter","newValue","suffixNum","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","ex","abs","sign","dateFormat","date"],"sourceRoot":""}