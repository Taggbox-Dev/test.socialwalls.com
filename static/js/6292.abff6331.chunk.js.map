{"version":3,"file":"static/js/6292.abff6331.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/skeleton/screenoverviewSkeleton.js","app/Display/analytics-new/activityHub/display/components/screensOverview.js","app/Display/analytics-new/layout/common/noData.js"],"sourcesContent":["import React from \"react\";\n\nconst List = () => {\n  return (\n    <td>\n      <div>\n        <div className=\"sk_line sk_line_30 sk_line_height_16\"></div>\n      </div>\n    </td>\n  );\n};\n\nconst ScreenoverviewSkeleton = () => {\n  return [1, 2, 3, 4].map(() => {\n    return (\n      <tr>\n        <List />\n        <List />\n        <List />\n        <List />\n        <List />\n        <List />\n      </tr>\n    );\n  });\n};\n\nexport default React.memo(ScreenoverviewSkeleton);\n","import React, { Suspense, useState } from \"react\";\nimport { Card, CardBody, Table } from \"react-bootstrap\"\nimport ScreenoverviewSkeleton from \"../../../layout/skeleton/screenoverviewSkeleton\";\nimport NoData from \"../../../layout/common/noData\";\nimport SectionHeading from \"../../../layout/common/sectionHeading\";\n\nconst PopupModal = React.lazy(() =>\n  import(\"../../../layout/common/popup/popupModal\")\n);\n\nconst ScreenOverview = React.lazy(() =>\n  import(\"../../../layout/popup/screenOverview\")\n);\n\n\nconst ScreensOverview = (props) => {\n\n  const { data, total, loader } = props\n\n  const [show, setShow] = useState(false)\n\n  const handlePopup = event => {\n    setShow(event)\n  }\n\n  return (\n    <>\n      <Card className=\"sw-card-custom gutter-b card-shadow\">\n        <SectionHeading section={2} moreData={total > 15 ? 1 : null} handlePopup={handlePopup} title={'Screens Overview'} />\n        <CardBody className=\"py-5 px-0\">\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Screen Name\n                </th>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Screen IP\n                </th>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Device Location\n                </th>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Status\n                </th>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Last Refresh Time\n                </th>\n                <th className=\"text-muted\" style={{ width: \"16%\" }}>\n                  Daily Active Hours\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n\n\n              {loader ? <ScreenoverviewSkeleton /> : data && Object.keys(data).length ? data.map((e) => {\n\n                return (<tr className=\"border-top\">\n                  <td>\n                    <strong>{e.screenName}</strong>\n                  </td>\n                  <td><div className=\"\">{e.screenIp}</div></td>\n                  <td>\n                    {e.deviceLocation}\n                  </td>\n                  <td>\n                    <label className={`mx-width-80 alert ${e.status == \"Inactive\" ? 'alert-danger' : 'alert-success'} m-0 rounded-0 px-3 py-1`}>\n                      {e.status}\n                    </label>\n                  </td>\n                  <td>\n                    {e.lastRefreshTime}\n                  </td>\n                  <td>\n                    {e.activeHours} Hours\n                  </td>\n                </tr>\n                )\n              })\n                : <NoData status={1} col={6} />\n              }\n            </tbody>\n          </Table>\n        </CardBody>\n      </Card>\n\n\n      {total > 15 ?\n        <PopupModal size={'xl'} showHide={show} handlePopup={handlePopup} title={'Screens Overview'}>\n          <Suspense>\n            <ScreenOverview total={total} {...props} />\n          </Suspense>\n        </PopupModal> : null}\n    </>\n  )\n}\n\nexport default React.memo(ScreensOverview);","import React from \"react\";\nimport { baseUrl } from \"../../../../../utils\";\n\nconst GetData = () => {\n  return (\n    <div className=\"placeholder-image py-10 d-flex flex-column justify-content-center\">\n      <div className=\"mb-3 text-center\">\n        <img\n          className=\"img-fluid graph-bg\"\n          src={baseUrl(`dashboard/analytic/image-placeholder.svg`)}\n          width={\"80px\"}\n          height={\"80px\"}\n        />\n      </div>\n      <div className=\"\">\n        <h5 class=\"text-gray-dark text-center\">No Data Available</h5>\n      </div>\n    </div>\n  );\n};\n\nconst NoData = (props) => {\n\n  return props.status ? (\n    <tr>\n      <td colSpan={props.col}>\n        <GetData />\n      </td>\n    </tr>\n  ) : (\n    <GetData />\n  );\n};\n\nexport default React.memo(NoData);\n"],"names":["List","_jsx","children","className","ScreenoverviewSkeleton","map","_jsxs","React","PopupModal","ScreenOverview","ScreensOverview","props","data","total","loader","show","setShow","useState","handlePopup","event","_Fragment","Card","SectionHeading","section","moreData","title","CardBody","Table","responsive","style","width","Object","keys","length","e","screenName","screenIp","deviceLocation","status","lastRefreshTime","activeHours","NoData","col","size","showHide","Suspense","GetData","src","baseUrl","height","class","colSpan"],"sourceRoot":""}