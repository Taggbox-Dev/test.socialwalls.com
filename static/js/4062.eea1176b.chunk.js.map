{"version":3,"file":"static/js/4062.eea1176b.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/popup/paggination.js","app/Display/analytics-new/layout/common/popup/popupSearch.js","app/Display/analytics-new/utils/index.js"],"sourcesContent":["    import React from \"react\";\r\n\r\n    const PN = (props) => {\r\n\r\n    const { paginateData, isLoading, total, currentPage, limit } = props  \r\n\r\n    const onNextNavigateClick = (event) => {  \r\n        \r\n        const {total,limit, maxPage, paginateData,  managePagging } = props  \r\n\r\n        let page = 1;\r\n        if (\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.currentPage\r\n        ) {\r\n        page = paginateData.currentPage + 1;\r\n        if (page <= paginateData.totalPages) {\r\n            managePagging(1,currentPage,0,0,0,0,0)\r\n        }\r\n        }\r\n\r\n        if (\r\n        page &&\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.totalPages >= page\r\n        ) {\r\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n            const offset = parseInt(limit) * pageCount;\r\n            managePagging(2,0,total, page, limit, maxPage, offset)\r\n        }\r\n    };\r\n\r\n    const onPrevNavigateClick = (event) => {  \r\n        const { total,limit, maxPage, paginateData, managePagging } = props  \r\n        let page = 1;\r\n        if (\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.currentPage\r\n        ) {\r\n        page = paginateData.currentPage - 1;\r\n        if (page != 0) {\r\n            managePagging(1,page,0,0,0,0,0)\r\n        }\r\n        }\r\n\r\n        if (page && page > 0) {\r\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n            const offset = parseInt(limit) * pageCount;\r\n            managePagging(2,0,total, page, limit, maxPage, offset)\r\n        }\r\n    };\r\n\r\n    const onUpdatePage = (page) => { \r\n        const { total,limit, maxPage, managePagging } = props  \r\n        const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n        const offset = parseInt(limit) * parseInt(pageCount);\r\n        managePagging(3,0,total, page, limit, maxPage, offset)\r\n    };\r\n\r\n    const onUpdateDataLimit = (event) => {  \r\n        const { total, maxPage, managePagging } = props  \r\n\r\n        const currentPage = 1;\r\n        const pageCount = 0;\r\n        const offset = parseInt(event.target.value) * pageCount;\r\n        managePagging(4,currentPage,total, 0, event.target.value, maxPage, offset)\r\n    };\r\n\r\n    return (\r\n        <>\r\n        {!isLoading &&\r\n        total > 0 &&\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 ? (\r\n            <div class=\"w-100 d-flex justify-content-lg-between justify-content-center align-items-center flex-wrap py-sm-4 px-0 pt-3 \">\r\n                <div class=\"d-flex flex-wrap py-sm-2 me-sm-3 justify-content-sm-normal justify-content-center\">\r\n                    <a class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\" onClick={(e) => onPrevNavigateClick(e)}>\r\n                    <i class=\"ki ki-bold-arrow-back icon-xs\"></i>\r\n                    </a>\r\n\r\n                    {paginateData.pages && paginateData.pages.length > 0\r\n                    ? paginateData.pages.map((item, pagesIndex) => {\r\n                        return parseInt(pagesIndex) < 3 ? (\r\n                            <a\r\n                            onClick={() => onUpdatePage(item)}\r\n                            className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                            }  me-2 my-1`}\r\n                            >\r\n                            {item}\r\n                            </a>\r\n                        ) : parseInt(pagesIndex) < 4 ? (\r\n                            currentPage < 6 ? (\r\n                            <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                            >\r\n                                {item}\r\n                            </a>\r\n                            ) : (\r\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\r\n                                ...\r\n                            </a>\r\n                            )\r\n                        ) : parseInt(pagesIndex) < 5 ? (\r\n                            currentPage < 6 ? (\r\n                            <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                            >\r\n                                {item}\r\n                            </a>\r\n                            ) : (\r\n                            parseInt(paginateData.pages.length) > currentPage && (\r\n                                <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                    paginateData.currentPage ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                                >\r\n                                {currentPage}\r\n                                </a>\r\n                            )\r\n                            )\r\n                        ) : parseInt(paginateData.pages.length) - 2 == pagesIndex ? (\r\n                            parseInt(paginateData.pages.length) - 1 > currentPage && (\r\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\r\n                                ...\r\n                            </a>\r\n                            )\r\n                        ) : parseInt(paginateData.pages.length) - 1 == pagesIndex ? (\r\n                            <a\r\n                            onClick={() => onUpdatePage(item)}\r\n                            className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                            }  me-2 my-1`}\r\n                            >\r\n                            {item}\r\n                            </a>\r\n                        ) : null;\r\n                        })\r\n                    : null}\r\n                    <a\r\n                    class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\"\r\n                    onClick={(e) => onNextNavigateClick(e)}\r\n                    >\r\n                    <i class=\"ki ki-bold-arrow-next icon-xs\"></i>\r\n                    </a>\r\n                </div>\r\n                <div class=\"d-flex align-items-center py-1 shwoing-filter\">\r\n                    <select\r\n                    class=\"form-control form-control-sm font-weight-bold me-4 border-0 bg-light false\"\r\n                    style={{ width: 75 }}\r\n                    onChange={(e)=>onUpdateDataLimit(e)}\r\n                    value={limit}\r\n                    >\r\n                    <option class=\"\" value={10}>\r\n                        10\r\n                    </option>\r\n                    <option class=\"\" value={20}>\r\n                        20\r\n                    </option>\r\n                    <option class=\"\" value={50}>\r\n                        50\r\n                    </option>\r\n                    </select>\r\n                    <span class=\"react-bootstrap-table-pagination-total\">\r\n                    &nbsp;Showing rows {paginateData.currentPage} to&nbsp;\r\n                    {paginateData.totalPages} of&nbsp;{total}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        ) : null}\r\n        </>\r\n    );\r\n    };\r\n\r\n    const Paggination = React.memo(PN);\r\n\r\n    export default Paggination;\r\n","    import { Button } from \"react-bootstrap\";\r\n    import Loader from \"react-loader-spinner\";\r\n    import SVG from \"react-inlinesvg\";\r\n    import React, { useEffect } from \"react\";\r\n    import { toAbsoluteUrl } from \"../../../utils\";\r\n\r\n    const PS = (props) => {\r\n    const { isPdfDownloading, analyticsStatus, updateSearchText } = props;\r\n\r\n    const onSearchText = () => {\r\n        let textInput = document.getElementById(\"searchTextInfluencer\");\r\n        let timeout = null;\r\n        textInput.addEventListener(\"input\", (e) => {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => updateSearchText(textInput.value), 1000);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        onSearchText()\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"d-flex align-items-center justify-content-end mb-3\">\r\n        <Button\r\n            variant=\"dark me-4 px-4 px-sm-5 export-pdf d-flex align-items-center\"\r\n            size=\"sm\"\r\n            className={\r\n            isPdfDownloading\r\n                ? `d-flex pdf-loading`\r\n                : `d-flex ,${analyticsStatus?.trialAccessAPI ? `disabled` : ``}`\r\n            }\r\n            disabled={isPdfDownloading ? `disabled` : \"\"}\r\n        >\r\n            <span className=\"svg-icon svg-icon-sm\">\r\n            <SVG\r\n                className=\"h-75 align-self-end\"\r\n                src={toAbsoluteUrl(\"/svg/export.svg\")}\r\n            ></SVG>\r\n            </span>\r\n            <span className=\"btn_txt\">\r\n            {isPdfDownloading ? (\r\n                <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#333333\"\r\n                height={15}\r\n                width={25}\r\n                style={{ marginRight: 5 }}\r\n                />\r\n            ) : (\r\n                `Export`\r\n            )}\r\n            </span>\r\n        </Button>\r\n\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n            <div class=\"form-group m-0\">\r\n            <div class=\"input-icon input-icon-right position-relative\">\r\n                <input\r\n                class=\"form-control search-input\"\r\n                id=\"searchTextInfluencer\"\r\n                type=\"text\"\r\n                placeholder=\"Search Post...\"\r\n                />\r\n                <span>\r\n                <i class=\"fa fa-search icon-md text-muted\"></i>\r\n                </span>\r\n            </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    );\r\n    };\r\n\r\n    const PopupSearch = React.memo(PS);\r\n    export default PopupSearch;\r\n","import axios from 'axios';\r\nimport { GET_INSTAGRAM_IMAGE } from '../../../../actions/display/analytics';\r\nimport store from '../../../../redux/store';\r\nimport { ENV, INSTAGRAM_IMAGE_VIDEO_UPDATE, NoCameraImgPost } from '../../../../actions/api';\r\nimport moment from 'moment';\r\n\r\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\r\n\r\nexport const ordinal_suffix_of = (i) => {\r\n    var j = i % 10,\r\n        k = i % 100;\r\n    if (j == 1 && k != 11) {\r\n        return i + \"st\";\r\n    }\r\n    if (j == 2 && k != 12) {\r\n        return i + \"nd\";\r\n    }\r\n    if (j == 3 && k != 13) {\r\n        return i + \"rd\";\r\n    }\r\n    return i + \"th\";\r\n}\r\n\r\nexport const secondsToTime = (secs) => {\r\n    // var hours = Math.floor(secs / (60 * 60));\r\n    // var divisor_for_minutes = secs % (60 * 60);\r\n    // var minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    // var divisor_for_seconds = divisor_for_minutes % 60;\r\n    // var seconds = Math.ceil(divisor_for_seconds);\r\n    // return `${hours}:${minutes}:${seconds}`;\r\n\r\n    var sec_num = parseInt(secs, 10); // don't forget the second param\r\n    var hours = Math.floor(sec_num / 3600);\r\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours < 10) { hours = \"0\" + hours; }\r\n    if (minutes < 10) { minutes = \"0\" + minutes; }\r\n    if (seconds < 10) { seconds = \"0\" + seconds; }\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n\r\n\r\n}\r\n\r\nexport const getTimeTypeSecondToTime = (secs, type) => {\r\n    let dataTime = secondsToTime(secs);\r\n    let acrtualTime = dataTime.split(':')\r\n    if (type == 1) {\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\r\n        else return 0;\r\n    }\r\n    else if (type == 2) {\r\n\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\r\n        else return 0;\r\n    }\r\n    else if (type == 3) {\r\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\r\n        else return 0;\r\n    }\r\n}\r\nexport const validURL = (str) => {\r\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\r\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\r\n    return !!pattern.test(str);\r\n}\r\n\r\nexport const convertIntToBool = (value) => {\r\n    if (value) return Boolean(value)\r\n    else return value;\r\n\r\n}\r\n\r\n\r\nexport const customClass = {\r\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\r\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\r\n}\r\n\r\n\r\nexport const updateURLForIframe = (url) => {\r\n    if (url && url.includes('youtube.com')) {\r\n        const urlSplits = url.split('?v=');\r\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\r\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\r\n        }\r\n    }\r\n    else if (url && url.includes('vimeo.com')) {\r\n        const urlSplits = url.split('/');\r\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\r\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\r\n        }\r\n    }\r\n    return url;\r\n}\r\n\r\nexport const getSecondsFromTime = (time) => {\r\n    let actualTime = time.split(':');\r\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\r\n    return totalSeconds;\r\n}\r\n\r\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\r\nexport const getPosition = (partitions, currentSceneContent) => {\r\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\r\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\r\n    return filterData;\r\n}\r\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\r\n\r\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\r\n\r\n    if (actualLayout && actualLayout[0]) {\r\n\r\n\r\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\r\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\r\n        if (actualDefault && Object.keys(actualDefault).length) {\r\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\r\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\r\n            }\r\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\r\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\r\n            }\r\n            else {\r\n                if (mixContentType == 1) {\r\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\r\n                }\r\n                else {\r\n                    return { height: 0, width: 0 }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return currentHeightWidth;\r\n        }\r\n    }\r\n}\r\n\r\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\r\n    const cData = cssStyle.split(\"#zone\");\r\n\r\n    var height = \"\"; var width = \"\";\r\n    if (cData && cData.length) {\r\n        cData.map((item, index) => {\r\n            const trimContent = item.trim()\r\n            const firstValue = trimContent.charAt(0);\r\n            if (firstValue == position[0].position) {\r\n                const replaceValue = item.split(\";\")\r\n                if (replaceValue && replaceValue.length) {\r\n                    replaceValue.map((rItem) => {\r\n                        const getHeightWidth = rItem.split(\":\");\r\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\r\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return { height, width, }\r\n}\r\n\r\nexport const convertHMS = (timeString) => {\r\n    const arr = timeString.split(\":\");\r\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\r\n    return seconds;\r\n}\r\n\r\n\r\n\r\n\r\nexport const getRandomArbitrary = (min, max) => {\r\n    return parseInt(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport const additionArrayData = (data) => {\r\n    if (data && data.length > 0) {\r\n        return data.reduce((total, num) => total + num)\r\n    }\r\n    else return 0\r\n}\r\n\r\nexport const kFormatter = (value) => {\r\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\r\n\r\n\r\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\r\n    try {\r\n\r\n\r\n        var newValue = value;\r\n        if (value >= 1000) {\r\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\r\n            var suffixNum = Math.floor((\"\" + value).length / 3);\r\n            var shortValue = '';\r\n            for (var precision = 2; precision >= 1; precision--) {\r\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\r\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\r\n                if (dotLessShortValue.length <= 2) { break; }\r\n            }\r\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\r\n            newValue = shortValue + suffixes[suffixNum];\r\n        }\r\n        return newValue;\r\n    }\r\n    catch (ex) {\r\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\r\n    }\r\n\r\n}\r\nexport const OverviewChartFormatting = (formattingData) => {\r\n    let data = [];\r\n    if (formattingData && formattingData.length > 0) {\r\n        formattingData.map((item) => {\r\n            data.push({\r\n                name: item.name,\r\n                type: 'line',\r\n                data: dataConvertToInt(item.data)\r\n            })\r\n        })\r\n        return data;\r\n    }\r\n    else return formattingData;\r\n}\r\n\r\nexport const dataConvertToInt = (formateIntData) => {\r\n    let updateData = [];\r\n    if (formateIntData && formateIntData.length > 0) {\r\n        formateIntData.map((item) => {\r\n            updateData.push(parseInt(item))\r\n\r\n        })\r\n        return updateData\r\n\r\n\r\n    }\r\n    else return formateIntData\r\n\r\n}\r\n\r\n\r\nexport const networkURLIsValid = (str) => {\r\n    let output = str;\r\n    let matches;\r\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\r\n    if (matches && matches.length > 0) return true\r\n    else return false;\r\n}\r\n\r\nexport const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${ENV}.taggbox.com/display/post/update`;\r\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\r\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\r\n    const { moderation, authenticated } = store.getState();\r\n    const { details, listData } = moderation;\r\n    const { userData } = authenticated;\r\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\r\n    const url = details?.wall?.url;\r\n    const table = userData.UserPlan.db_table;\r\n    let dataFormatted = {\r\n        wallId: wallId,\r\n        postId: postId,\r\n        table_name: table,\r\n        ownerId: localStorage.getItem('ownerId'),\r\n        feedId: postData.length > 0 ? postData[0].feedId : '',\r\n        type: postData.length > 0 ? postData[0].type : '',\r\n        link: postData.length > 0 ? postData[0].link : '',\r\n        postFile: postData.length > 0 ? postData[0].postFile : '',\r\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\r\n        url: url\r\n    }\r\n    axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\r\n        e.target.src = data.media;\r\n        e.target.attributes[\"data-load\"].value = \"1\";\r\n    })\r\n}\r\n\r\nexport const updateInstagramPostImage = (data) => {\r\n    const { authenticated } = store.getState();\r\n    const { userData } = authenticated;\r\n    const table = userData.UserPlan.db_table;\r\n\r\n    let dataFormatted = {\r\n        ...data,\r\n        table_name: table\r\n    }\r\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\r\n        .then((response) => { })\r\n        .catch((error) => {\r\n            console.log(\"axios\", error.response)\r\n            console.error(error);\r\n        });\r\n};\r\n\r\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\r\n    let html = response.data;\r\n    if (html) {\r\n        var regex = /_sharedData = ({.*);<\\/script>/m,\r\n            json = JSON.parse(regex.exec(html)[1]);\r\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\r\n            if (type == 'video') {\r\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\r\n                return videoPath;\r\n            } else {\r\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\r\n                return imagePath;\r\n            }\r\n        }\r\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\r\n\r\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\r\n                // console.log({video_url : json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url})\r\n                // alert(json.entry_data.PostPage[0].graphql.shortcode_media.display_url)\r\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\r\n            }\r\n        }\r\n        else {\r\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\r\n        }\r\n    }\r\n\r\n}).catch((error) => {\r\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\r\n    else return NO_CAMERA_IMAGE;\r\n})\r\n\r\n\r\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\r\n    // return\r\n    e.persist()\r\n   \r\n    const { userData } = store.getState().authenticated;\r\n    const table_name = userData.UserPlan.db_table;\r\n    const network = e.target.getAttribute(\"data-network\")\r\n    const wallId = e.target.getAttribute(\"data-wall-id\");\r\n    const postId = e.target.getAttribute(\"data-item-id\");\r\n    const filterId = e.target.getAttribute(\"data-filter-id\");\r\n    let links = e.target.getAttribute(\"data-link\");\r\n    let image_update = '';\r\n    let video_update = '';\r\n    // const UserDetail = store.getState();\r\n    if (network) {\r\n        const dataSrc = e.target.src;\r\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\r\n            if ((network == 2 || network == 18)) {\r\n                let postLinkId = links.split('/');\r\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\r\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\r\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\r\n                    updateStatusRenewImage(wallId, postId, table_name, e)\r\n                }\r\n                else {\r\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\r\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\r\n                        image_update = IMG_URL_UPDATE;\r\n                        e.target.attributes[\"data-load\"].value = \"1\";\r\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\r\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\r\n                        }\r\n                        e.target.style = \"\";\r\n                    }\r\n                    else {\r\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\r\n                            updateStatusRenewImage(wallId, postId, table_name, e)\r\n                        }\r\n                        else {\r\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\r\n                            image_update = IMG_URL_UPDATE.display_url;\r\n                            video_update = IMG_URL_UPDATE.video_url;\r\n                            e.target.attributes[\"data-load\"].value = \"1\";\r\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\r\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\r\n                            }\r\n                            e.target.style = \"\";\r\n                        }\r\n                    }\r\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\r\n\r\n                        updateInstagramPostImage({\r\n                            ownerId: localStorage.getItem('ownerId'),\r\n                            wallId: wallId,\r\n                            postFile: image_update,\r\n                            video: video_update,\r\n                            type: 2,\r\n                            postId: postId,\r\n                            table_name: table_name\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n            else {\r\n                const { details, listData } = store.getState().moderation;\r\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\r\n                const url = details?.wall?.url;\r\n\r\n                let dataFormatted = {\r\n                    wallId: wallId,\r\n                    postId: postId,\r\n                    table_name: table_name,\r\n                    ownerId: localStorage.getItem('ownerId'),\r\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\r\n                    type: postData.length > 0 ? postData[0].type : '',\r\n                    link: postData.length > 0 ? postData[0].link : '',\r\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\r\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\r\n                    url: url\r\n                }\r\n                axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\r\n                    e.target.src = data.media;\r\n                    e.target.attributes[\"data-load\"].value = \"1\";\r\n\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            if (dataSrc.includes(\"no-camera.svg\")) {\r\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n            }\r\n            else {\r\n                e.target.src = NO_CAMERA_IMAGE;\r\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n\r\n            }\r\n            e.target.attributes[\"data-load\"].value = \"1\";\r\n        }\r\n\r\n    }\r\n    else {\r\n        e.target.src = NO_CAMERA_IMAGE;\r\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const removeHttp = (str) => {\r\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\r\n}\r\n\r\n\r\nexport const dateFormat = (date) =>{\r\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\r\n}\r\n\r\n\r\n "],"names":["PN","props","paginateData","isLoading","total","currentPage","limit","onUpdatePage","page","maxPage","managePagging","pageCount","parseInt","_jsx","_Fragment","children","Object","keys","length","_jsxs","class","onClick","e","event","onPrevNavigateClick","pages","map","item","pagesIndex","className","totalPages","onNextNavigateClick","style","width","onChange","offset","target","value","onUpdateDataLimit","React","PS","isPdfDownloading","analyticsStatus","updateSearchText","useEffect","onSearchText","textInput","document","getElementById","timeout","addEventListener","clearTimeout","setTimeout","Button","variant","size","trialAccessAPI","disabled","SVG","src","toAbsoluteUrl","Loader","type","color","height","marginRight","onSubmit","preventDefault","id","placeholder","pathname","kFormatter","newValue","suffixNum","Math","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date","moment","format"],"sourceRoot":""}