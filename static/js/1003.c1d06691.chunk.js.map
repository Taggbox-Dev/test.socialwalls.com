{"version":3,"file":"static/js/1003.c1d06691.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/popup/PopupSearch.js","app/Display/analytics-new/layout/common/popup/paggination.js","app/Display/analytics-new/layout/popup/leaderbordPopup.js"],"sourcesContent":["    import { Button } from \"react-bootstrap\";\r\n    import Loader from \"react-loader-spinner\";\r\n    import SVG from \"react-inlinesvg\";\r\n    import React, { useEffect } from \"react\";\r\n    import { toAbsoluteUrl } from \"../../../utils\";\r\n\r\n    const PS = (props) => {\r\n    const { isPdfDownloading, analyticsStatus, updateSearchText } = props;\r\n\r\n    const onSearchText = () => {\r\n        let textInput = document.getElementById(\"searchTextInfluencer\");\r\n        let timeout = null;\r\n        textInput.addEventListener(\"input\", (e) => {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => updateSearchText(textInput.value), 1000);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        onSearchText()\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"d-flex align-items-center justify-content-end mb-3\">\r\n        <Button\r\n            variant=\"dark me-4 px-4 px-sm-5 export-pdf d-flex align-items-center\"\r\n            size=\"sm\"\r\n            className={\r\n            isPdfDownloading\r\n                ? `d-flex pdf-loading`\r\n                : `d-flex ,${analyticsStatus?.trialAccessAPI ? `disabled` : ``}`\r\n            }\r\n            disabled={isPdfDownloading ? `disabled` : \"\"}\r\n        >\r\n            <span className=\"svg-icon svg-icon-sm\">\r\n            <SVG\r\n                className=\"h-75 align-self-end\"\r\n                src={toAbsoluteUrl(\"/svg/export.svg\")}\r\n            ></SVG>\r\n            </span>\r\n            <span className=\"btn_txt\">\r\n            {isPdfDownloading ? (\r\n                <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#333333\"\r\n                height={15}\r\n                width={25}\r\n                style={{ marginRight: 5 }}\r\n                />\r\n            ) : (\r\n                `Export`\r\n            )}\r\n            </span>\r\n        </Button>\r\n\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n            <div class=\"form-group m-0\">\r\n            <div class=\"input-icon input-icon-right position-relative\">\r\n                <input\r\n                class=\"form-control search-input\"\r\n                id=\"searchTextInfluencer\"\r\n                type=\"text\"\r\n                placeholder=\"Search Post...\"\r\n                />\r\n                <span>\r\n                <i class=\"fa fa-search icon-md text-muted\"></i>\r\n                </span>\r\n            </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    );\r\n    };\r\n\r\n    const PopupSearch = React.memo(PS);\r\n    export default PopupSearch;\r\n","    import React from \"react\";\r\n\r\n    const PN = (props) => {\r\n\r\n    const { paginateData, isLoading, total, currentPage, limit } = props  \r\n\r\n    const onNextNavigateClick = (event) => {  \r\n        \r\n        const {total,limit, maxPage, paginateData,  managePagging } = props  \r\n\r\n        let page = 1;\r\n        if (\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.currentPage\r\n        ) {\r\n        page = paginateData.currentPage + 1;\r\n        if (page <= paginateData.totalPages) {\r\n            managePagging(1,currentPage,0,0,0,0,0)\r\n        }\r\n        }\r\n\r\n        if (\r\n        page &&\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.totalPages >= page\r\n        ) {\r\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n            const offset = parseInt(limit) * pageCount;\r\n            managePagging(2,0,total, page, limit, maxPage, offset)\r\n        }\r\n    };\r\n\r\n    const onPrevNavigateClick = (event) => {  \r\n        const { total,limit, maxPage, paginateData, managePagging } = props  \r\n        let page = 1;\r\n        if (\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 &&\r\n        paginateData.currentPage\r\n        ) {\r\n        page = paginateData.currentPage - 1;\r\n        if (page != 0) {\r\n            managePagging(1,page,0,0,0,0,0)\r\n        }\r\n        }\r\n\r\n        if (page && page > 0) {\r\n            const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n            const offset = parseInt(limit) * pageCount;\r\n            managePagging(2,0,total, page, limit, maxPage, offset)\r\n        }\r\n    };\r\n\r\n    const onUpdatePage = (page) => { \r\n        const { total,limit, maxPage, managePagging } = props  \r\n        const pageCount = parseInt(page) == 1 ? 0 : parseInt(page) - 1;\r\n        const offset = parseInt(limit) * parseInt(pageCount);\r\n        managePagging(3,0,total, page, limit, maxPage, offset)\r\n    };\r\n\r\n    const onUpdateDataLimit = (event) => {  \r\n        const { total, maxPage, managePagging } = props  \r\n\r\n        const currentPage = 1;\r\n        const pageCount = 0;\r\n        const offset = parseInt(event.target.value) * pageCount;\r\n        managePagging(4,currentPage,total, 0, event.target.value, maxPage, offset)\r\n    };\r\n\r\n    return (\r\n        <>\r\n        {!isLoading &&\r\n        total > 0 &&\r\n        paginateData &&\r\n        Object.keys(paginateData).length > 0 ? (\r\n            <div class=\"w-100 d-flex justify-content-lg-between justify-content-center align-items-center flex-wrap py-sm-4 px-0 pt-3 \">\r\n                <div class=\"d-flex flex-wrap py-sm-2 me-sm-3 justify-content-sm-normal justify-content-center\">\r\n                    <a class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\" onClick={(e) => onPrevNavigateClick(e)}>\r\n                    <i class=\"ki ki-bold-arrow-back icon-xs\"></i>\r\n                    </a>\r\n\r\n                    {paginateData.pages && paginateData.pages.length > 0\r\n                    ? paginateData.pages.map((item, pagesIndex) => {\r\n                        return parseInt(pagesIndex) < 3 ? (\r\n                            <a\r\n                            onClick={() => onUpdatePage(item)}\r\n                            className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                            }  me-2 my-1`}\r\n                            >\r\n                            {item}\r\n                            </a>\r\n                        ) : parseInt(pagesIndex) < 4 ? (\r\n                            currentPage < 6 ? (\r\n                            <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                            >\r\n                                {item}\r\n                            </a>\r\n                            ) : (\r\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\r\n                                ...\r\n                            </a>\r\n                            )\r\n                        ) : parseInt(pagesIndex) < 5 ? (\r\n                            currentPage < 6 ? (\r\n                            <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                            >\r\n                                {item}\r\n                            </a>\r\n                            ) : (\r\n                            parseInt(paginateData.pages.length) > currentPage && (\r\n                                <a\r\n                                onClick={() => onUpdatePage(item)}\r\n                                className={`btn btn-icon btn-sm border-0 btn-light btn-hover-dark ${\r\n                                    paginateData.currentPage ? `active` : ``\r\n                                }  me-2 my-1`}\r\n                                >\r\n                                {currentPage}\r\n                                </a>\r\n                            )\r\n                            )\r\n                        ) : parseInt(paginateData.pages.length) - 2 == pagesIndex ? (\r\n                            parseInt(paginateData.pages.length) - 1 > currentPage && (\r\n                            <a class=\"btn btn-icon btn-sm border-0 btn-hover-dark me-2 my-1\">\r\n                                ...\r\n                            </a>\r\n                            )\r\n                        ) : parseInt(paginateData.pages.length) - 1 == pagesIndex ? (\r\n                            <a\r\n                            onClick={() => onUpdatePage(item)}\r\n                            className={`btn btn-icon btn-sm border-0 btn-light  btn-hover-dark ${\r\n                                paginateData.currentPage == item ? `active` : ``\r\n                            }  me-2 my-1`}\r\n                            >\r\n                            {item}\r\n                            </a>\r\n                        ) : null;\r\n                        })\r\n                    : null}\r\n                    <a\r\n                    class=\"btn btn-icon btn-sm btn-light btn-hover-dark me-2 my-1\"\r\n                    onClick={(e) => onNextNavigateClick(e)}\r\n                    >\r\n                    <i class=\"ki ki-bold-arrow-next icon-xs\"></i>\r\n                    </a>\r\n                </div>\r\n                <div class=\"d-flex align-items-center py-1 shwoing-filter\">\r\n                    <select\r\n                    class=\"form-control form-control-sm font-weight-bold me-4 border-0 bg-light false\"\r\n                    style={{ width: 75 }}\r\n                    onChange={(e)=>onUpdateDataLimit(e)}\r\n                    value={limit}\r\n                    >\r\n                    <option class=\"\" value={10}>\r\n                        10\r\n                    </option>\r\n                    <option class=\"\" value={20}>\r\n                        20\r\n                    </option>\r\n                    <option class=\"\" value={50}>\r\n                        50\r\n                    </option>\r\n                    </select>\r\n                    <span class=\"react-bootstrap-table-pagination-total\">\r\n                    &nbsp;Showing rows {paginateData.currentPage} to&nbsp;\r\n                    {paginateData.totalPages} of&nbsp;{total}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        ) : null}\r\n        </>\r\n    );\r\n    };\r\n\r\n    const Paggination = React.memo(PN);\r\n\r\n    export default Paggination;\r\n","import React, { Component, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { kFormatter, dateFormat } from \"../../utils\"; \r\nimport { paginate } from '../../../../../utils/paginate';\r\nimport DataNotFound from \"../../../analytics/components/notfound\";\r\nimport Paggination from \"../common/popup/paggination\";\r\nimport PopupSearch from \"../common/popup/PopupSearch\";\r\nimport ConnectButton from \"../common/connectButton\";\r\nimport AuthorInfo from \"../../components/content/authorInfo\";\r\nimport MultiPostMedia from \"../common/multiPostMedia\";\r\nconst LeaderbordSkeleton = React.lazy(() =>\r\n  import(\"../skeleton/leaderbordSkeleton\")\r\n);\r\n\r\n\r\nclass LeaderbordPopup extends Component {\r\n  state = {\r\n    fetchRecord: null,\r\n    isLoading: true,\r\n    total: 0,\r\n    limit: 10,\r\n    offset: 0,\r\n    paginateData: {},\r\n    currentPage: 1,\r\n    maxPage: 10,\r\n    username: null\r\n  }\r\n\r\n  componentDidMount() {\r\n     const { moreleaderBoard } = this.props;\r\n     const { limit, currentPage, maxPage } = this.state;\r\n      if (moreleaderBoard && moreleaderBoard.data) {\r\n        this.setState({ total: moreleaderBoard.total, paginateData: paginate(moreleaderBoard.total, currentPage, limit, maxPage) }, () => this.onLoadFilterData())\r\n      }\r\n   }\r\n\r\n\r\n  onLoadFilterData = (isSearch=0) => { \r\n    \r\n    const { analyticwall, moreleaderBoard, moreData } = this.props;\r\n    const { selectedWallFeed, dateFilter, selectedFeed } = analyticwall;\r\n    const { currentPage, limit, offset, username, maxPage } = this.state;\r\n\r\n    let wallData = selectedWallFeed.wall.id;\r\n    let startDate = dateFilter.startDate;\r\n    let endDate = dateFilter.endDate;\r\n\r\n    let feedIDs = [];\r\n    if (selectedFeed && selectedFeed.length > 0) {\r\n      selectedFeed.map((fItem) => {\r\n        feedIDs.push(fItem.value);\r\n      })\r\n    }\r\n\r\n    this.setState({ isLoading: true })\r\n       moreData(wallData, dateFormat(startDate), dateFormat(endDate), feedIDs.join(), isSearch ? username && username.length > 0 ? moreleaderBoard.total : limit  :  offset, isSearch ? username.length > 0 ? 0 : offset : limit, 0, username)\r\n      .then((response) => {\r\n      const { responseData } = response.data;\r\n\r\n        if(!isSearch) this.setState({ fetchRecord: responseData.data, isLoading: false })\r\n          else\r\n        this.setState({ total: responseData.total, paginateData: paginate(responseData.total, currentPage, limit, maxPage), fetchRecord: responseData.data, isLoading: false })\r\n    })\r\n      .catch((error) => {\r\n        console.error(\"LAYOUT ISSUE\", error)\r\n      });\r\n   }   \r\n\r\n\r\n  managePagging=(pageClick,currentPage=0,total=0,page=0,limit=0,maxPage=0,offset=0)=>{\r\n      if(pageClick==1)\r\n          this.setState({ currentPage: currentPage });\r\n          else if(pageClick==2)\r\n          this.setState(\r\n            { paginateData: paginate(total, page, limit, maxPage), offset: offset },\r\n            () => this.onLoadFilterData()\r\n        );\r\n         else if(pageClick==3)\r\n          this.setState(\r\n            {\r\n                currentPage: page,\r\n                paginateData: paginate(total, page, limit, maxPage),\r\n                offset: offset,\r\n            },\r\n            () => this.onLoadFilterData()\r\n            );\r\n        else if(pageClick==4)\r\n        this.setState(\r\n          {\r\n              limit: limit,\r\n              paginateData: paginate(total, currentPage, limit, maxPage),\r\n              offset: offset,\r\n          },\r\n          () => this.onLoadFilterData()\r\n        );\r\n     }\r\n\r\n\r\n  updateSearchText = (value) => {\r\n    this.setState({ username: value, currentPage: 1 }, () => this.onLoadFilterData(1))\r\n  }\r\n  \r\n  render() {\r\n    const {  analyticsStatus, isPdfDownloading, maxPage  } = this.props;\r\n    const { isLoading, fetchRecord, total, limit, paginateData, currentPage } = this.state;\r\n\r\n    return (\r\n      <div class=\"influential_contributors_custom_modal px-5\">\r\n        <PopupSearch isPdfDownloading={isPdfDownloading} analyticsStatus={analyticsStatus} updateSearchText={this.updateSearchText}/>\r\n        <div className=\"influential-data-list sw_theme \">\r\n        <Table responsive>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={{ width: \"10%\" }}>\r\n                      S No.\r\n                    </th>\r\n                    <th style={{ width: \"25%\" }}>\r\n                      Name\r\n                    </th>\r\n                    <th style={{ width: \"15%\" }}>\r\n                      No. of Followres\r\n                    </th>\r\n                    <th style={{ width: \"10%\" }}>\r\n                      No. of Posts\r\n                    </th>\r\n                    <th style={{ width: \"25%\" }}>\r\n                      Recent Posts\r\n                    </th>\r\n                    <th style={{ width: \"15%\" }}></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                      isLoading ? <Suspense fallback={<></>}> <LeaderbordSkeleton/> </Suspense> : \r\n                      (fetchRecord && fetchRecord.length > 0) ? fetchRecord.map((mItem, mIndex) =>  <tr>\r\n                      <td>{mIndex+1}</td>\r\n                      <td>\r\n                        <AuthorInfo picture={mItem.image} username={mItem.author.username} isIcon={mItem.network.icon}/>\r\n                      </td>\r\n                      <td>\r\n                        <p className={`mb-0 ${parseInt(mItem.author.follower) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(mItem.author.follower)}</strong> {mItem.author.follower && parseInt(mItem.author.follower) > 1 ? `Followers` : `Follower`}</p>\r\n                      </td>\r\n                      <td>\r\n                        <p className={`mb-lg-3 mt-sm-2 mb-0 ${parseInt(mItem.postCount) > 0 ? '' : 'd-none'}`}><strong className=\"text-dark\">{kFormatter(mItem.postCount)}</strong> {mItem.postCount && parseInt(mItem.postCount) > 1 ? `Posts` : `Post`}</p>\r\n                      </td>\r\n                      <td>\r\n                        <MultiPostMedia postsData={mItem.postsData} /> \r\n                      </td>\r\n                      <td>\r\n                        <div className=\"conn_status connnected\">\r\n                          <ConnectButton link={mItem.links} />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                      ) : <DataNotFound />\r\n                    }\r\n                 \r\n                </tbody>\r\n              </Table>\r\n\r\n        </div>\r\n          <Paggination isLoading={isLoading} total={total} paginateData={paginateData} maxPage={maxPage} currentPage={currentPage} limit={limit}  managePagging={this.managePagging} />\r\n       </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {    \r\n  return {\r\n    analyticwall: state.analyticwall,\r\n    moreleaderBoard: state.analyticsRecords.leaderBoard,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LeaderbordPopup);"],"names":["PS","props","isPdfDownloading","analyticsStatus","updateSearchText","useEffect","onSearchText","textInput","document","getElementById","timeout","addEventListener","e","clearTimeout","setTimeout","value","_jsxs","className","children","Button","variant","size","trialAccessAPI","disabled","_jsx","SVG","src","toAbsoluteUrl","Loader","type","color","height","width","style","marginRight","onSubmit","preventDefault","class","id","placeholder","React","PN","paginateData","isLoading","total","currentPage","limit","onUpdatePage","page","maxPage","managePagging","pageCount","parseInt","_Fragment","Object","keys","length","onClick","event","onPrevNavigateClick","pages","map","item","pagesIndex","totalPages","onNextNavigateClick","onChange","offset","target","onUpdateDataLimit","LeaderbordSkeleton","LeaderbordPopup","Component","constructor","_this","arguments","this","state","fetchRecord","username","onLoadFilterData","isSearch","undefined","analyticwall","moreleaderBoard","moreData","selectedWallFeed","dateFilter","selectedFeed","wallData","wall","startDate","endDate","feedIDs","fItem","push","setState","dateFormat","join","then","response","responseData","data","paginate","catch","error","console","pageClick","componentDidMount","render","PopupSearch","Table","responsive","Suspense","fallback","mItem","mIndex","AuthorInfo","picture","image","author","isIcon","network","icon","follower","kFormatter","postCount","MultiPostMedia","postsData","ConnectButton","link","links","DataNotFound","Paggination","connect","analyticsRecords","leaderBoard"],"sourceRoot":""}