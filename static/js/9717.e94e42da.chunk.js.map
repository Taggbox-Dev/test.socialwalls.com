{"version":3,"file":"static/js/9717.e94e42da.chunk.js","mappings":"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","sources":["app/Display/analytics-new/components/content/TopeventVoice.js","app/Display/analytics-new/components/content/authorInfo.js","app/Display/analytics-new/layout/common/NoData.js","app/Display/analytics-new/layout/common/connectButton.js"],"sourcesContent":["    import { Splide, SplideSlide, SplideTrack } from \"@splidejs/react-splide\";\r\n    import { Card, Table, Button } from \"react-bootstrap\";\r\n    import \"../../assets/css/slide.scss\";\r\n    import React from \"react\";  \r\n    import { NoCameraImgPost } from \"../../../../../actions/api\";\r\n    import ConnectButton from \"../../layout/common/connectButton\";\r\n    import AuthorInfo from \"./authorInfo\";\r\n    import NoData from \"../../layout/common/NoData\";\r\n    const TopeventSekleton = React.lazy(() =>\r\n        import(\"../../layout/skeleton/TopeventSekleton\")\r\n        );\r\n\r\n    const TopeventVoice = (props) => {\r\n    const settings = {\r\n        type: \"slide\",\r\n        rewind: false,\r\n        speed: 1000,\r\n        loop: true,\r\n        interval: 7000,\r\n        drag: true,\r\n        perPage: 4,\r\n        gap: 5,\r\n        autoplay: false,\r\n        padding: \"0\",\r\n        pagination: false,\r\n        arrows: true,\r\n    };\r\n\r\n    const { topeventVoices, top_event_loader } = props;\r\n\r\n    return (\r\n        <>\r\n        <Card className=\"sw-card-custom gutter-b card-shadow mb-5\">\r\n        <Card.Header className=\"px-5 pt-5 border-0 pb-0 d-flex align-items-center justify-content-between\">\r\n            <h6 class=\"card-label font-weight-bolder m-0\">Top Event Voices</h6>\r\n            { topeventVoices.total>6 ?  <Button variant=\"link\" className=\"p-0\">See More</Button> : null }\r\n        </Card.Header>\r\n          <Card.Body className=\"py-5 px-0\">\r\n            <Table className=\"mb-0\" responsive>\r\n            <thead>\r\n                <tr>\r\n                <th style={{ width: \"10%\" }}>\r\n                    S No.\r\n                </th>\r\n                <th style={{ width: \"20%\" }}>\r\n                    Name\r\n                </th>\r\n                <th style={{ width: \"15%\" }}>\r\n                    No. of Posts\r\n                </th>\r\n                <th style={{ width: \"15%\" }}>\r\n                    Social Accout\r\n                </th>\r\n                <th style={{ width: \"30%\" }}>\r\n                    Recent Posts\r\n                </th>\r\n                <th style={{ width: \"10%\" }}></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                { top_event_loader ? <TopeventSekleton/> : topeventVoices && Object.keys(topeventVoices.data).length\r\n                ? topeventVoices.data.map((data,key) => {\r\n                    return (\r\n                        <tr className=\"border-top\">\r\n                            <td>\r\n                                <strong>{key+1}</strong>\r\n                            </td>\r\n                        <td>\r\n                          <AuthorInfo picture={data.image} username={data.author.name} date={''} />\r\n                        </td>\r\n                        <td>\r\n                            <strong>{data.postCount}</strong>\r\n                        </td>\r\n                        <td>\r\n                            <i className={`fab ${data.network.icon} font-size-h2`}></i>\r\n                        </td>\r\n                        <td>\r\n\r\n                         { data.postsData && Object.keys(data.postsData).length && data.postsData.filter(obj => obj.postFile!=\"\").length ?                                 \r\n                            <Splide\r\n                            className=\"recent-post m-0\"\r\n                            hasTrack={false}\r\n                            options={settings}\r\n                            >\r\n                            <SplideTrack>\r\n                              { data.postsData.map((asset, index) => {\r\n                                return (\r\n                                    <SplideSlide key={index}>\r\n                                       <img id={`post_${asset.postId}`} onError={e => e.target.src = NoCameraImgPost}\r\n                                        src={asset.postFile}\r\n                                        className=\"img-fluid\"\r\n                                        width={\"20px\"}\r\n                                        height={\"20px\"}\r\n                                    />\r\n                                    </SplideSlide>\r\n                                );\r\n                                })}\r\n                            </SplideTrack>\r\n                            </Splide> : null }\r\n                        </td>\r\n                        <td>\r\n                          <ConnectButton link={data.links}/>\r\n                        </td>\r\n                        </tr>\r\n                    );\r\n                    })\r\n                  : <NoData status={1} col={5}/>\r\n                }\r\n            </tbody>\r\n            </Table>\r\n  \r\n        </Card.Body>\r\n        </Card>\r\n        </>\r\n    );\r\n    };\r\n\r\n    export default React.memo(TopeventVoice);;\r\n","import React from \"react\";\r\nimport { manageSpace } from \"../../../../../utils\";\r\nimport moment from \"moment\";\r\n\r\nconst AuthorInfo = (props) => {\r\n  return (\r\n    <div className=\"d-flex align-items-center w-50\">\r\n      <div className=\"position-relative\">\r\n        <div className=\"symbol symbol-35 symbol-light me-3 con_user_img cursor-pointer rounded-circle overflow-hidden\">\r\n          <div className=\"symbol-image\">p</div>\r\n          {/* <img\r\n            src={props.picture}\r\n            className=\"img-fluid\"\r\n            width={\"20px\"}\r\n            height={\"20px\"}\r\n          /> */}\r\n        </div>\r\n        { props.isIcon ?  <div className=\"m_social_icon_new card-shadow position-absolute bg-white rounded-circle d-flex align-items-center justify-content-center\">\r\n                <i className={`fab ${props.isIcon}`}></i>\r\n            </div> : null }\r\n      </div>\r\n      <div class=\"d-flex text-left flex-column conn_user_info cursor-pointer\">\r\n        <p class=\"text-dark mb-0 font-weight-boldest overflow-hidden text-nowrap text-ellipsis author_name text-capitalize\">\r\n          {props.username}\r\n        </p>\r\n        <p class=\"m-0\">\r\n          <small class=\"text-muted overflow-hidden text-nowrap text-ellipsis post_count me-2 \">\r\n            { props.username ? `@${manageSpace(props.username)}` : null}\r\n          </small>\r\n          <small class=\"text-muted overflow-hidden text-nowrap text-ellipsis followers_count \">\r\n              {  moment(new Date(props.date * 1000)).fromNow() }\r\n          </small>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AuthorInfo);\r\n","import React from \"react\";\r\nimport { baseUrl } from \"../../../../../utils\";\r\n\r\nconst GetData = () => {\r\n  return (\r\n    <div className=\"placeholder-image py-10 d-flex flex-column justify-content-center\">\r\n      <div className=\"mb-3 text-center\">\r\n        <img\r\n          className=\"img-fluid graph-bg\"\r\n          src={baseUrl(`dashboard/analytic/image-placeholder.svg`)}\r\n          width={\"80px\"}\r\n          height={\"80px\"}\r\n        />\r\n      </div>\r\n      <div className=\"\">\r\n        <h5 class=\"text-gray-dark text-center\">No Data Available</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst NoData = (props) => {\r\n\r\n  return props.status ? (\r\n    <tr>\r\n      <td colSpan={props.col}>\r\n        <GetData />\r\n      </td>\r\n    </tr>\r\n  ) : (\r\n    <GetData />\r\n  );\r\n};\r\n\r\nexport default React.memo(NoData);\r\n","    const ConnectButton = (props) => {\r\n\r\n    return (\r\n        <div className=\"conn_status_wrap\">\r\n        <button\r\n            onClick={() => window.open(props.link)}\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-min-w btn-sm rounded\"\r\n        >\r\n            <span className=\"position-relative\">\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"22.213\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 22.213 18\"\r\n                className=\"h-75 align-self-end w-20 me-1\"\r\n            >\r\n                <g id=\"noun-talk-2902544\" transform=\"translate(-98.007 -75.786)\">\r\n                <path\r\n                    id=\"Path_6701\"\r\n                    data-name=\"Path 6701\"\r\n                    d=\"M103.686,84.417a1.084,1.084,0,1,1-.317-.766A1.084,1.084,0,0,1,103.686,84.417Zm2.9-1.084h0a1.084,1.084,0,1,0,.766.317,1.084,1.084,0,0,0-.766-.317Zm3.979,0h0a1.084,1.084,0,1,0,.766.317,1.084,1.084,0,0,0-.766-.317Zm9.659-5.711v8.172a1.839,1.839,0,0,1-1.616,1.823l.625,2.7a.617.617,0,0,1-1,.608l-3.07-2.625v.2a1.838,1.838,0,0,1-1.836,1.836h-9.463L100,93.638a.617.617,0,0,1-1-.608l.625-2.7A1.838,1.838,0,0,1,98.007,88.5V80.331a1.838,1.838,0,0,1,1.836-1.836h3.226v-.873a1.838,1.838,0,0,1,1.836-1.836h13.478a1.838,1.838,0,0,1,1.836,1.836Zm-6.3,2.709a.6.6,0,0,0-.6-.6H99.843a.6.6,0,0,0-.6.6V88.5a.6.6,0,0,0,.6.6h.552a.617.617,0,0,1,.6.756l-.375,1.621,2.607-2.229a.618.618,0,0,1,.4-.148h9.691a.6.6,0,0,0,.6-.6Zm5.063-2.709a.6.6,0,0,0-.6-.6H104.906a.6.6,0,0,0-.6.6V78.5h9.017a1.838,1.838,0,0,1,1.836,1.836v6.35l2.448,2.093-.375-1.621a.617.617,0,0,1,.6-.756h.553a.6.6,0,0,0,.6-.6Z\"\r\n                    fill=\"#ffffff\"\r\n                ></path>\r\n                </g>\r\n            </svg> \r\n            Connect \r\n            </span>\r\n        </button>\r\n        </div>\r\n    );\r\n    };\r\n\r\n    export default ConnectButton"],"names":["TopeventSekleton","React","TopeventVoice","props","settings","type","rewind","speed","loop","interval","drag","perPage","gap","autoplay","padding","pagination","arrows","topeventVoices","top_event_loader","_jsx","_Fragment","children","_jsxs","Card","className","Header","class","total","Button","variant","Body","Table","responsive","style","width","Object","keys","data","length","map","key","AuthorInfo","picture","image","username","author","name","date","postCount","network","icon","postsData","filter","obj","postFile","Splide","hasTrack","options","SplideTrack","asset","index","SplideSlide","id","postId","onError","e","target","src","NoCameraImgPost","height","ConnectButton","link","links","NoData","status","col","isIcon","manageSpace","moment","Date","fromNow","GetData","baseUrl","colSpan","onClick","window","open","xmlns","viewBox","transform","d","fill"],"sourceRoot":""}