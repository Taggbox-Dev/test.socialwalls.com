{"version":3,"file":"static/js/7744.7575273e.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/feedsList.js","app/Display/analytics-new/layout/common/subheader/subHeader.js","app/Display/analytics-new/utils/index.js"],"sourcesContent":["import React, { Component, memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport ReactHtmlParser from 'react-html-parser';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport { feedsNetworksPrefix, networkIcon } from '../../../../../utils';\nimport { activeTab, swithcWall, updateSelectedFeed } from \"../../../../../actions/analyticsNew\";\nimport { useLocation } from \"react-router-dom\";\n\nconst FeedsList=(props)=>{\n  const location = useLocation()\n   return <FL location={location} {...props}></FL>\n}\n\nclass FL extends Component {\n  state = { feed: [], wallID: null, getwallID: null, updateFeedList: [], refreshing: true, spece: `-` }\n  componentDidMount() {\n    const { analyticwall, analyticsStatus } = this.props\n    const { spece } = this.state\n    let updateFeedList = []; let wallID = 0;\n    if (analyticwall.selectedWallFeed && Object.keys(analyticwall.selectedWallFeed).length > 0) {\n      if (analyticwall.selectedWallFeed && analyticwall.selectedWallFeed.feeds.length > 0) {\n        wallID = analyticwall.selectedWallFeed.wall.id;\n        analyticwall.selectedWallFeed.feeds.map((item) => {\n          updateFeedList.push({ value: item.id, label: ReactHtmlParser(`${item.Network.icon ? networkIcon(item.Network.icon) : \"\"}  ${feedsNetworksPrefix(item.filterId)}  ${item.name}  ${item.filterIdName ? spece : ''} ${item.filterIdName ? item.filterIdName : ''}`) })\n        })\n      }\n    }\n\n\n    if(analyticwall.selectedWallFeed.wall.id!=localStorage.getItem('wallId')){\n        this.props.swithcWall()\n    }\n\n    this.setState({ getwallID : analyticwall.selectedWallFeed.wall.id})\n    this.setState({ updateFeedList, wallID, feed: this.state.wallID != wallID ? updateFeedList : this.state.feed }, () => this.props.updateSelectedFeed(this.state.feed, analyticsStatus.trialAccessAPI))\n  }\n\n  changeFeedsFilters = (event) => {\n    const { analyticsStatus } = this.props;\n     if(event.length>0) this.setState({ feed: event }, () => this.props.updateSelectedFeed(this.state.feed, analyticsStatus.trialAccessAPI))\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { analyticwall, wallRefresh } = nextProps\n    const { refreshing, spece } = this.state;\n    let updateFeedList = []; let wallID = 0;\n    if (analyticwall.selectedWallFeed && Object.keys(analyticwall.selectedWallFeed).length > 0) {\n      if (analyticwall.selectedWallFeed && analyticwall.selectedWallFeed.feeds.length > 0) {\n        wallID = analyticwall.selectedWallFeed.wall.id;\n        analyticwall.selectedWallFeed.feeds.map((item) => {\n          updateFeedList.push({ value: item.id, label: ReactHtmlParser(`${item.Network.icon ? networkIcon(item.Network.icon) : \"\"}  ${feedsNetworksPrefix(item.filterId)}  ${item.name}  ${item.filterIdName ? spece : ''} ${item.filterIdName ? item.filterIdName : ''}`) })\n        })\n\n      }\n    }\n    if (updateFeedList != this.state.updateFeedList && wallRefresh && wallRefresh.refreshing && refreshing) {\n      this.setState({ updateFeedList, wallID, feed: updateFeedList, refreshing: false })\n    }\n    else {\n      this.setState({ updateFeedList, wallID, feed: this.state.wallID != wallID ? updateFeedList : this.state.feed }, () => setTimeout(() => this.setState({ refreshing: true }), 2000))\n    }\n  }\n\n  render() {\n\n    const { updateFeedList, feed } = this.state;\n\n    return <div className=\"w-auto react-search-feed filter_btn_wrap\">\n      <ReactMultiSelectCheckboxes\n        classNamePrefix={`check-feed`}\n        value={feed}\n        onChange={this.changeFeedsFilters}\n        options={updateFeedList}\n      />\n    </div>\n  }\n}\n\n \nconst mapStateToProps = (state) => {  \n  return {\n    analyticwall: state.analyticwall,\n    analyticsStatus: state.analyticsStatusD,\n    wallRefresh: state.wallRefresh\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    activeTab: (data) => dispatch(activeTab(data)),\n    updateSelectedFeed: (data, isTrial) => dispatch(updateSelectedFeed(data, isTrial)),\n    swithcWall: () => dispatch(swithcWall()),\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(FeedsList));","import React, { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport SVG from \"react-inlinesvg\";\nimport { toAbsoluteUrl } from \"../../../utils\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport FeedsList from \"../feedsList\";\nimport DateRangePicker from \"react-bootstrap-daterangepicker\";\nimport \"bootstrap-daterangepicker/daterangepicker.css\";\nimport { shallowEqual, useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\nimport { activeTab, refreshButton, updateFilterDate, updateSelectedFeed } from \"../../../../../../actions/analyticsNew\";\nimport { useEffect } from \"react\";\n\nconst Subheader = (props) => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const { analyticwall, analyticsStatus, pageRefresh, analytics_status_loader, getactiveTab, analyticsRecords, dateFilter } = useSelector(\n    ({ analyticwallD, analyticsStatusD, analyticsRecords }) => ({\n      analyticwall: analyticwallD,\n      analyticsStatus: analyticsStatusD,\n      pageRefresh: analyticsRecords.page_refresh,\n      analytics_status_loader: analyticsRecords.analytics_status_loader,\n      dateFilter: analyticsRecords.dateFilter,\n      getactiveTab: analyticsRecords.activeTab,\n      analyticsRecords: analyticsRecords\n    }),\n    shallowEqual\n  );\n\n  const trialAccessAPI = !analyticwall.selectedFeed.length ? true : analyticsStatus.trialAccessAPI\n\n\n  const filterDate =\n    analyticwall && Object.keys(analyticwall).length > 0\n      ? analyticwall.dateFilter\n      : null;\n  let startdateupdate =\n    filterDate && Object.keys(filterDate).length > 0 && filterDate.startDate\n      ? filterDate.startDate\n      : moment().subtract(29, \"days\").format(\"DD-MM-YYYY\");\n  let enddateupdate =\n    filterDate && Object.keys(filterDate).length > 0 && filterDate.endDate\n      ? filterDate.endDate\n      : moment().format(\"DD-MM-YYYY\");\n  const parsed = queryString.parse(location.search);\n  if (parsed.startdate) {\n    startdateupdate = moment.unix(parsed.startdate).format(\"DD-MM-YYYY\");\n  }\n  if (parsed.enddate) {\n    enddateupdate = moment.unix(parsed.enddate).format(\"DD-MM-YYYY\");\n  }\n\n  const [startDate, setStartDate] = useState(startdateupdate);\n  const [endDate, setEndDate] = useState(enddateupdate);\n  const [maxDate, setMaxDate] = useState(\n    moment().endOf(\"month\").format(\"DD-MM-YYYY\")\n  );\n\n  const handleOnApply = (event, picker) => {\n\n    dispatch(\n      updateSelectedFeed(analyticsRecords.selected_feed_data, trialAccessAPI,\n        { startDate: picker.startDate, endDate: picker.endDate }\n      )\n    )\n\n    setStartDate(picker.startDate.format(\"DD-MM-YYYY\"));\n    setEndDate(picker.endDate.format(\"DD-MM-YYYY\"));\n    // dispatch(updateFilterDate({startDate: picker.startDate, endDate: picker.endDate }));\n  }\n\n  // const callbackFeed=()=>{  \n  //   dispatch(\n  //     updateSelectedFeed(analyticwall.selectedFeed,trialAccessAPI,\n  //       { startDate: dateFilter.startDate, endDate: dateFilter.endDate }\n  //     )\n  //   );\n  //   setStartDate(dateFilter.startDate.format(\"DD-MM-YYYY\"));\n  //   setEndDate(dateFilter.endDate.format(\"DD-MM-YYYY\"));\n  // }\n\n  useEffect(() => {\n    dispatch(activeTab(location.pathname))\n  }, []);\n\n\n  const onClickRefreshButton = event => {\n    dispatch(refreshButton(trialAccessAPI))\n  }\n\n  return (\n    <div>\n      <div id=\"sw_subheader\" className=\"subheader analytics_subheader\">\n        <div className=\"container-fluid\">\n          <div className=\"row align-items-center justify-content-between flex-wrap position-relative\">\n            <div className=\"col-md-4 col-8 ps-0\">\n              <div className=\"d-flex align-items-center flex-grow-1\">\n                <button type=\"button\" className=\"btn btn-icon btn-clean btn-lg border-right btn-square back_btn me-4\" style={{ height: \"50px\" }}>\n                  <Link to={`/wall/index/${localStorage.getItem('wallId')}`}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><g id=\"Group_5147\" data-name=\"Group 5147\" transform=\"translate(-282 -85)\">\n                    <rect id=\"Rectangle_2245\" data-name=\"Rectangle 2245\" width=\"32\" height=\"32\" transform=\"translate(282 85)\" fill=\"none\"></rect>\n                    <g id=\"_15\" data-name=\"15\" transform=\"translate(292.278 91)\">\n                      <path id=\"Path_5609\" data-name=\"Path 5609\" d=\"M18.238,25.487a1.463,1.463,0,0,0,1.039-2.5l-7.755-7.74L19.277,7.5A1.469,1.469,0,0,0,17.2,5.426L8.42,14.206a1.463,1.463,0,0,0,0,2.063L17.2,25.048a1.463,1.463,0,0,0,1.039.439Z\" transform=\"translate(-7.994 -4.996)\" fill=\"#545454\"></path>\n                    </g></g></svg>\n                  </Link>\n                </button>\n                <ul className=\"nav sw-anlts-nav-tabs\">\n                  <li className=\"me-3\">\n                    <Link\n                      to={`/analytic-new/${localStorage.getItem('wallId')}`}\n                      className={`nav-link ${location.pathname.includes(localStorage.getItem('wallId')) ? `active` : ``\n                        }`}\n                    >\n                      Content\n                    </Link>\n                  </li>\n                  <li className=\"me-3\">\n                    <Link\n                      to={\"/analytic-new/activityHub/widget\"}\n                      className={`nav-link ${location.pathname.includes(\"activityHub\")\n                          ? `active`\n                          : ``\n                        }`}\n                    >\n                      Activity Hub\n                    </Link>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"col-md-8 col-4\">\n              <div className=\"d-flex justify-content-end pe-3\">\n\n                <div className=\"option-list active\">\n                  <div className=\"d-flex justify-content-md-end\">\n                    <div className=\"ms-3\">\n                      <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={<Tooltip className=\"my-custom-tooltip\">Reffresh</Tooltip>}\n                      >\n                        <button\n                          onClick={() => onClickRefreshButton()}\n                          className=\"btn btn-outline-secondary py-2 px-4\"\n                          type=\"button\"\n                        >\n                          <span className={`svg-icon svg-icon-sm svg-icon-dark-75 me-0 ${(pageRefresh && pageRefresh) ? `fa fa-spin` : ``}`}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\">\n                              <g id=\"Group_4474\" data-name=\"Group 4474\" transform=\"translate(10951 -4712)\">\n                                <rect id=\"Rectangle_2094\" data-name=\"Rectangle 2094\" width=\"24\" height=\"24\" transform=\"translate(-10951 4712)\" fill=\"none\" opacity=\"0\"></rect>\n                                <g id=\"Group_1\" data-name=\"Group 1\" transform=\"translate(-10950 4715)\">\n                                  <path\n                                    id=\"Path_17\"\n                                    data-name=\"Path 17\"\n                                    d=\"M17.617,40.968a6.864,6.864,0,0,1-3.843,1.155,6.966,6.966,0,0,1-6.929-6.059H8a1.027,1.027,0,0,0,.869-.474.9.9,0,0,0,0-.967L6.656,30.974a1,1,0,0,0-.869-.474h0a1.027,1.027,0,0,0-.869.474c-.778,1.25-1.933,3.277-2.122,3.556a1.344,1.344,0,0,0-.189.566.916.916,0,0,0,.961.967H4.814a8.994,8.994,0,0,0,8.962,7.993,8.833,8.833,0,0,0,4.9-1.438.955.955,0,0,0,.283-1.344,1.02,1.02,0,0,0-1.342-.307Z\"\n                                    transform=\"translate(-2.605 -26.138)\"\n                                    fill=\"#545454\"\n                                  ></path>\n                                  <path\n                                    id=\"Path_18\"\n                                    data-name=\"Path 18\"\n                                    d=\"M42.874,19.993h-1.25A8.993,8.993,0,0,0,32.666,12a8.833,8.833,0,0,0-4.9,1.438.971.971,0,1,0,1.061,1.626,6.864,6.864,0,0,1,3.843-1.155A6.966,6.966,0,0,1,39.6,19.969H38.444a1.027,1.027,0,0,0-.869.474.9.9,0,0,0,0,.967l2.213,3.654a1,1,0,0,0,.869.474h0a1.027,1.027,0,0,0,.869-.474c.778-1.25,1.933-3.277,2.122-3.556a1.344,1.344,0,0,0,.189-.566.923.923,0,0,0-.963-.949Z\"\n                                    transform=\"translate(-21.494 -12)\"\n                                    fill=\"#545454\"\n                                  ></path>\n                                </g>\n                              </g>\n                            </svg>\n                          </span>\n                        </button>\n                      </OverlayTrigger>\n                    </div>\n\n\n                    {!props.activeTab && ![3].includes(getactiveTab) ? <div className=\"ms-3\">\n                      {analytics_status_loader ? <FeedsList /> : null}\n                    </div> : null}\n                    {/* <div className=\"ms-3\">\n                          <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip className=\"my-custom-tooltip\">Print</Tooltip>}\n                          >\n                            <button\n                              className=\"btn btn-outline-secondary py-2 px-4\"\n                              type=\"button\"\n                            >\n                              <SVG\n                                className=\"me-1\"\n                                height={\"16px\"}\n                                width={\"16px\"}\n                                src={toAbsoluteUrl(\"/svg/print.svg\")}\n                              ></SVG>{\" \"}\n                              Print\n                            </button>\n                          </OverlayTrigger>\n                        </div> */}\n\n                    {![3].includes(getactiveTab) ?\n                      <div className=\"ms-3\">\n                        <DateRangePicker\n                          onApply={handleOnApply}\n                          startDate={startDate}\n                          endDate={endDate}\n                          initialSettings={{\n                            locale: { format: \"DD-MM-YYYY\", separator: \"-\" },\n                            maxDate: maxDate,\n                            showDropdowns: true,\n                            startDate: startDate,\n                            endDate: endDate,\n                            ranges: {\n                              Today: [\n                                moment().format(\"DD-MM-YYYY\"),\n                                moment().format(\"DD-MM-YYYY\"),\n                              ],\n                              Yesterday: [\n                                moment().subtract(1, \"days\").format(\"DD-MM-YYYY\"),\n                                moment().subtract(1, \"days\").format(\"DD-MM-YYYY\"),\n                              ],\n                              \"Last 7 Days\": [\n                                moment().subtract(6, \"days\").format(\"DD-MM-YYYY\"),\n                                moment().format(\"DD-MM-YYYY\"),\n                              ],\n                              \"Last 30 Days\": [\n                                moment().subtract(29, \"days\").format(\"DD-MM-YYYY\"),\n                                moment().format(\"DD-MM-YYYY\"),\n                              ],\n                              \"This Month\": [\n                                moment().startOf(\"month\").format(\"DD-MM-YYYY\"),\n                                moment().endOf(\"month\").format(\"DD-MM-YYYY\"),\n                              ],\n                              \"Last Month\": [\n                                moment()\n                                  .subtract(1, \"month\")\n                                  .startOf(\"month\")\n                                  .format(\"DD-MM-YYYY\"),\n                                moment()\n                                  .subtract(1, \"month\")\n                                  .endOf(\"month\")\n                                  .format(\"DD-MM-YYYY\"),\n                              ],\n                            },\n                          }}\n                        // onCallback={handleCallback}\n                        >\n                          <button type=\"button\" className=\"btn btn-outline-secondary py-2 px-4 btn-icon\" id=\"reportrange\">\n                            <OverlayTrigger\n                              placement=\"bottom\"\n                              overlay={<Tooltip className=\"my-custom-tooltip\">Date Filter</Tooltip>}\n                            >\n                              <div className=\"btn btn-outline-secondary py-2 px-4 btn-icon\">\n                                <span className=\"svg-icon svg-icon-sm svg-icon-dark-75\">\n                                  <SVG\n                                    className=\"h-75 align-self-end\"\n                                    src={toAbsoluteUrl(\"/svg/calendar-new.svg\")}\n                                  ></SVG>\n                                </span>\n\n                              </div>\n                            </OverlayTrigger>\n                          </button>\n                        </DateRangePicker>\n                      </div> : null}\n\n                    {/* <div className=\"ms-3\">\n                          <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip className=\"my-custom-tooltip\">Export</Tooltip>}\n                          >\n                            <button\n                              className=\"btn btn-outline-secondary py-2 px-4\"\n                              type=\"button\"\n                            >\n                              <SVG\n                                className=\"me-1\"\n                                height={\"16px\"}\n                                width={\"16px\"}\n                                src={toAbsoluteUrl(\"/svg/export.svg\")}\n                              ></SVG>{\" \"}\n                              Export\n                            </button>\n                          </OverlayTrigger>\n                        </div> */}\n                  </div>\n                </div>\n\n                <div className=\"ms-3 more-option\">\n                  <button\n                    className=\"btn btn-outline-secondary py-2 px-4\"\n                    type=\"button\"\n                  >\n                    <SVG\n                      height={\"16px\"}\n                      width={\"16px\"}\n                      src={toAbsoluteUrl(\"/svg/more.svg\")}\n                    ></SVG>\n                  </button>\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n\n      {/* <div  className=\"d-flex flex-column-fluid main_content\">\n            <div className=\"py-5 w-100\">\n                <div className=\"container-fluid px-xl-5\">\n                      <div className=\"row\">\n                        <div className=\"col-lg-12 col-xxl-12\">\n                            <div className=\"alert custom-alert\">\n                                <span>This is a demo data. You cannot see live data because you haven't added a post yet. Please add posts to see real time analytics.</span>\n                                  <a className=\"free-trial-upgrade cursor-pointer\" onClick={()=>dispatch(togglePlanSection(true))}>\n                                    Upgrade Now\n                                </a> \n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n        </div>           */}\n    </div>\n  );\n};\n\nexport default Subheader;\n","import axios from 'axios';\nimport { GET_INSTAGRAM_IMAGE } from '../../../../actions/display/analytics';\nimport store from '../../../../redux/store';\nimport { ENV, INSTAGRAM_IMAGE_VIDEO_UPDATE, NoCameraImgPost } from '../../../../actions/api';\nimport moment from 'moment';\n\nexport const toAbsoluteUrl = pathname => `https://cloud.tagbox.com/app/analytics` + pathname;\n\nexport const ordinal_suffix_of = (i) => {\n    var j = i % 10,\n        k = i % 100;\n    if (j == 1 && k != 11) {\n        return i + \"st\";\n    }\n    if (j == 2 && k != 12) {\n        return i + \"nd\";\n    }\n    if (j == 3 && k != 13) {\n        return i + \"rd\";\n    }\n    return i + \"th\";\n}\n\nexport const secondsToTime = (secs) => {\n    // var hours = Math.floor(secs / (60 * 60));\n    // var divisor_for_minutes = secs % (60 * 60);\n    // var minutes = Math.floor(divisor_for_minutes / 60);\n\n    // var divisor_for_seconds = divisor_for_minutes % 60;\n    // var seconds = Math.ceil(divisor_for_seconds);\n    // return `${hours}:${minutes}:${seconds}`;\n\n    var sec_num = parseInt(secs, 10); // don't forget the second param\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n\n\n}\n\nexport const getTimeTypeSecondToTime = (secs, type) => {\n    let dataTime = secondsToTime(secs);\n    let acrtualTime = dataTime.split(':')\n    if (type == 1) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[0];\n        else return 0;\n    }\n    else if (type == 2) {\n\n        if (acrtualTime && acrtualTime.length) return acrtualTime[1];\n        else return 0;\n    }\n    else if (type == 3) {\n        if (acrtualTime && acrtualTime.length) return acrtualTime[2];\n        else return 0;\n    }\n}\nexport const validURL = (str) => {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertIntToBool = (value) => {\n    if (value) return Boolean(value)\n    else return value;\n\n}\n\n\nexport const customClass = {\n    confirmButton: 'btn-primary btn-min-w btn btn-primary',\n    cancelButton: 'border-btn btn-outline-dark me-4 btn-min-w btn btn-primary',\n}\n\n\nexport const updateURLForIframe = (url) => {\n    if (url && url.includes('youtube.com')) {\n        const urlSplits = url.split('?v=');\n        if (urlSplits && urlSplits.length && urlSplits[1]) {\n            url = `https://www.youtube.com/embed/${urlSplits[1]}`;\n        }\n    }\n    else if (url && url.includes('vimeo.com')) {\n        const urlSplits = url.split('/');\n        if (urlSplits && urlSplits.length && urlSplits[urlSplits.length - 1]) {\n            url = `https://player.vimeo.com/video/${urlSplits[urlSplits.length - 1]}?autoplay=1&loop=1&autopause=0`;\n        }\n    }\n    return url;\n}\n\nexport const getSecondsFromTime = (time) => {\n    let actualTime = time.split(':');\n    let totalSeconds = (+actualTime[0]) * 60 * 60 + (+actualTime[1]) * 60 + (+actualTime[2]);\n    return totalSeconds;\n}\n\nexport const loaderCircleStyle = { padding: 1, color: '#545454', fontSize: 10 }\nexport const getPosition = (partitions, currentSceneContent) => {\n    const getPartitions = Object.keys(partitions).map((item) => ({ position: item, name: partitions[item] }))\n    const filterData = getPartitions.filter((item) => item.name == currentSceneContent.name);\n    return filterData;\n}\nexport const GET_HEIGHT_WIDTH = (cssStyle, position, layouts, mixContentType) => {\n\n    const actualLayout = layouts.filter((item) => item.id == mixContentType)\n\n    if (actualLayout && actualLayout[0]) {\n\n\n        const currentHeightWidth = GET_DYNAMIC_HEIGHT_WIDTH(cssStyle, position);\n        const actualDefault = GET_DYNAMIC_HEIGHT_WIDTH(actualLayout[0].css, position);\n        if (actualDefault && Object.keys(actualDefault).length) {\n            if (parseInt(actualDefault.height) > parseInt(actualDefault.width)) {\n                return { width: currentHeightWidth.width, height: 0, label: \"Width\" }\n            }\n            else if (parseInt(actualDefault.height) < parseInt(actualDefault.width)) {\n                return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n            }\n            else {\n                if (mixContentType == 1) {\n                    return { height: currentHeightWidth.height, width: 0, label: \"Height\" }\n                }\n                else {\n                    return { height: 0, width: 0 }\n                }\n            }\n        }\n        else {\n            return currentHeightWidth;\n        }\n    }\n}\n\nconst GET_DYNAMIC_HEIGHT_WIDTH = (cssStyle, position) => {\n    const cData = cssStyle.split(\"#zone\");\n\n    var height = \"\"; var width = \"\";\n    if (cData && cData.length) {\n        cData.map((item, index) => {\n            const trimContent = item.trim()\n            const firstValue = trimContent.charAt(0);\n            if (firstValue == position[0].position) {\n                const replaceValue = item.split(\";\")\n                if (replaceValue && replaceValue.length) {\n                    replaceValue.map((rItem) => {\n                        const getHeightWidth = rItem.split(\":\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"height\") height = getHeightWidth[1].replace(\"%\", \"\");\n                        if (getHeightWidth && getHeightWidth[0] && getHeightWidth[0] == \"width\") width = getHeightWidth[1].replace(\"%\", \"\");\n                    })\n                }\n            }\n        })\n    }\n    return { height, width, }\n}\n\nexport const convertHMS = (timeString) => {\n    const arr = timeString.split(\":\");\n    const seconds = arr[0] * 3600 + arr[1] * 60 + (+arr[2]);\n    return seconds;\n}\n\n\n\n\nexport const getRandomArbitrary = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const additionArrayData = (data) => {\n    if (data && data.length > 0) {\n        return data.reduce((total, num) => total + num)\n    }\n    else return 0\n}\n\nexport const kFormatter = (value) => {\n    // return Math.abs(num) > 999 ? Math.sign(num) * ((Math.abs(num) / 1000).toFixed(1)) + 'k' : Math.sign(num) * Math.abs(num)\n\n\n    // return Math.abs(Number(num)) >= 1.0e+9 ? (Math.abs(Number(num)) / 1.0e+9).toFixed(2) + \"B\" : Math.abs(Number(num)) >= 1.0e+6 ? (Math.abs(Number(num)) / 1.0e+6).toFixed(2) + \"M\" : Math.abs(Number(num)) >= 1.0e+3 ? (Math.abs(Number(num)) / 1.0e+3).toFixed(2) + \"K\" : Math.abs(Number(num));\n    try {\n\n\n        var newValue = value;\n        if (value >= 1000) {\n            var suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n            var suffixNum = Math.floor((\"\" + value).length / 3);\n            var shortValue = '';\n            for (var precision = 2; precision >= 1; precision--) {\n                shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000, suffixNum)) : value).toPrecision(precision));\n                var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n                if (dotLessShortValue.length <= 2) { break; }\n            }\n            if (shortValue % 1 != 0) shortValue = shortValue.toFixed(1);\n            newValue = shortValue + suffixes[suffixNum];\n        }\n        return newValue;\n    }\n    catch (ex) {\n        return Math.abs(value) > 999 ? Math.sign(value) * ((Math.abs(value) / 1000).toFixed(1)) + 'k' : Math.sign(value) * Math.abs(value)\n    }\n\n}\nexport const OverviewChartFormatting = (formattingData) => {\n    let data = [];\n    if (formattingData && formattingData.length > 0) {\n        formattingData.map((item) => {\n            data.push({\n                name: item.name,\n                type: 'line',\n                data: dataConvertToInt(item.data)\n            })\n        })\n        return data;\n    }\n    else return formattingData;\n}\n\nexport const dataConvertToInt = (formateIntData) => {\n    let updateData = [];\n    if (formateIntData && formateIntData.length > 0) {\n        formateIntData.map((item) => {\n            updateData.push(parseInt(item))\n\n        })\n        return updateData\n\n\n    }\n    else return formateIntData\n\n}\n\n\nexport const networkURLIsValid = (str) => {\n    let output = str;\n    let matches;\n    matches = str.match(/(?:https?:\\/\\/)?(?:www.)?(?:twitter|medium|facebook|vimeo|instagram|google|pinterest|flickr|youtube|linkedin|vkontakte|vk|tiktok|soundcloud|giphy|airbnb|yammer|slack|yelp|workplace|rss|tumblr)(?:.com\\/)?([@a-zA-Z0-9-_]+)/im);\n    if (matches && matches.length > 0) return true\n    else return false;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst UPDATE_INSTAGRAM_IMAGE_VIDEO = `https://${ENV}.taggbox.com/display/post/update`;\nconst NO_CAMERA_IMAGE = NoCameraImgPost;\nconst updateStatusRenewImage = (wallId, postId, table_name, e) => {\n    const { moderation, authenticated } = store.getState();\n    const { details, listData } = moderation;\n    const { userData } = authenticated;\n    const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n    const url = details?.wall?.url;\n    const table = userData.UserPlan.db_table;\n    let dataFormatted = {\n        wallId: wallId,\n        postId: postId,\n        table_name: table,\n        ownerId: localStorage.getItem('ownerId'),\n        feedId: postData.length > 0 ? postData[0].feedId : '',\n        type: postData.length > 0 ? postData[0].type : '',\n        link: postData.length > 0 ? postData[0].link : '',\n        postFile: postData.length > 0 ? postData[0].postFile : '',\n        mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n        url: url\n    }\n    axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n        e.target.src = data.media;\n        e.target.attributes[\"data-load\"].value = \"1\";\n    })\n}\n\nexport const updateInstagramPostImage = (data) => {\n    const { authenticated } = store.getState();\n    const { userData } = authenticated;\n    const table = userData.UserPlan.db_table;\n\n    let dataFormatted = {\n        ...data,\n        table_name: table\n    }\n    axios.post(`${UPDATE_INSTAGRAM_IMAGE_VIDEO}`, dataFormatted)\n        .then((response) => { })\n        .catch((error) => {\n            console.error(error);\n        });\n};\n\nconst FETCH_LINK = (fetchUrl, postId, dataSrc, type) => GET_INSTAGRAM_IMAGE(fetchUrl).then((response) => {\n    let html = response.data;\n    if (html) {\n        var regex = /_sharedData = ({.*);<\\/script>/m,\n            json = JSON.parse(regex.exec(html)[1]);\n        if (typeof json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children !== 'undefined') {\n            if (type == 'video') {\n                const videoPath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.video_url\n                return videoPath;\n            } else {\n                const imagePath = json.entry_data.PostPage[0].graphql.shortcode_media.edge_sidecar_to_children.edges.filter((item) => item.node.shortcode == postId[4])[0].node.display_url\n                return imagePath;\n            }\n        }\n        else if (json.entry_data.PostPage[0].graphql.shortcode_media.__typename === 'GraphVideo') {\n\n            if (json.entry_data.PostPage[0].graphql.shortcode_media.is_video) {\n                return { video_url: json.entry_data.PostPage[0].graphql.shortcode_media.video_url, display_url: json.entry_data.PostPage[0].graphql.shortcode_media.display_url }\n            }\n        }\n        else {\n            return json.entry_data.PostPage[0].graphql.shortcode_media.display_url;\n        }\n    }\n\n}).catch((error) => {\n    if (dataSrc.includes(\"cdn.taggbox.com\")) return NO_CAMERA_IMAGE;\n    else return NO_CAMERA_IMAGE;\n})\n\n\nexport const IMG_LOAD_AFTER_COMPLETE_LAYOUT = async (e) => {\n    // return\n    e.persist()\n   \n    const { userData } = store.getState().authenticated;\n    const table_name = userData.UserPlan.db_table;\n    const network = e.target.getAttribute(\"data-network\")\n    const wallId = e.target.getAttribute(\"data-wall-id\");\n    const postId = e.target.getAttribute(\"data-item-id\");\n    const filterId = e.target.getAttribute(\"data-filter-id\");\n    let links = e.target.getAttribute(\"data-link\");\n    let image_update = '';\n    let video_update = '';\n    // const UserDetail = store.getState();\n    if (network) {\n        const dataSrc = e.target.src;\n        if ((network == 2 || network == 18 || network == 3 || network == 28) && (dataSrc.includes(\"cloud.taggbox.com\") || dataSrc.includes(\"cdn.taggbox.com\") || dataSrc.includes(\"cdninstagram.com\") || dataSrc.includes(\"no-camera.svg\") || dataSrc.includes(\"instagram-no-image\") || network == 3 || network == 28) && e.target.getAttribute(\"data-load\") == 0 && filterId != \"34\") {\n            if ((network == 2 || network == 18)) {\n                let postLinkId = links.split('/');\n                let fetchUrl = `https://images${~~(Math.random() * 3333)}-focus-opensocial.googleusercontent.com/gadgets/proxy?container=none&url=${links}`;\n                let IMG_URL_UPDATE = await FETCH_LINK(fetchUrl, postLinkId, dataSrc, 'image')\n                if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string' && (IMG_URL_UPDATE.includes(\"no-camera.svg\") || IMG_URL_UPDATE.includes(\"lookaside.instagram.com\"))) {\n                    updateStatusRenewImage(wallId, postId, table_name, e)\n                }\n                else {\n                    if (IMG_URL_UPDATE && IMG_URL_UPDATE != null && IMG_URL_UPDATE.length > 0 && typeof IMG_URL_UPDATE === 'string') {\n                        e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE}`;\n                        image_update = IMG_URL_UPDATE;\n                        e.target.attributes[\"data-load\"].value = \"1\";\n                        if (IMG_URL_UPDATE.includes(\"no-camera.svg\")) {\n                            e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                        }\n                        e.target.style = \"\";\n                    }\n                    else {\n                        if (IMG_URL_UPDATE.display_url && IMG_URL_UPDATE.display_url.includes(\"lookaside.instagram.com\")) {\n                            updateStatusRenewImage(wallId, postId, table_name, e)\n                        }\n                        else {\n                            e.target.src = `https://images.taggbox.com/${IMG_URL_UPDATE.display_url}`;\n                            image_update = IMG_URL_UPDATE.display_url;\n                            video_update = IMG_URL_UPDATE.video_url;\n                            e.target.attributes[\"data-load\"].value = \"1\";\n                            if (IMG_URL_UPDATE.display_url.includes(\"no-camera.svg\")) {\n                                e.target.style = \"visibility:visible!important;width:180px;margin:20px auto;object-fit: contain;\";\n                            }\n                            e.target.style = \"\";\n                        }\n                    }\n                    if (!image_update.includes(\"no-camera.svg\") && !image_update.includes(\"cdn.taggbox.com\") && !image_update.includes(\"lookaside.instagram.com\")) {\n\n                        updateInstagramPostImage({\n                            ownerId: localStorage.getItem('ownerId'),\n                            wallId: wallId,\n                            postFile: image_update,\n                            video: video_update,\n                            type: 2,\n                            postId: postId,\n                            table_name: table_name\n                        });\n                    }\n                }\n\n            }\n            else {\n                const { details, listData } = store.getState().moderation;\n                const postData = listData.length > 0 ? listData.filter((val) => val.id == postId) : []\n                const url = details?.wall?.url;\n\n                let dataFormatted = {\n                    wallId: wallId,\n                    postId: postId,\n                    table_name: table_name,\n                    ownerId: localStorage.getItem('ownerId'),\n                    feedId: postData.length > 0 ? postData[0].feedId : '',\n                    type: postData.length > 0 ? postData[0].type : '',\n                    link: postData.length > 0 ? postData[0].link : '',\n                    postFile: postData.length > 0 ? postData[0].postFile : '',\n                    mediaFile: postData.length > 0 ? postData[0].mediaFile : '',\n                    url: url\n                }\n                axios.post(INSTAGRAM_IMAGE_VIDEO_UPDATE, dataFormatted).then(({ data }) => {\n                    e.target.src = data.media;\n                    e.target.attributes[\"data-load\"].value = \"1\";\n\n                })\n            }\n        }\n        else {\n            if (dataSrc.includes(\"no-camera.svg\")) {\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n            }\n            else {\n                e.target.src = NO_CAMERA_IMAGE;\n                e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n            }\n            e.target.attributes[\"data-load\"].value = \"1\";\n        }\n\n    }\n    else {\n        e.target.src = NO_CAMERA_IMAGE;\n        e.target.style = \"display:block;min-height:150px;width:80px;height:100%;margin:10px auto;object-fit: contain;\";\n\n    }\n\n}\n\n\nexport const removeHttp = (str) => {\n    return str.split('//')[1].replace(/\\/$/, \"\").replace(/^www\\./, '')\n}\n\n\nexport const dateFormat = (date) =>{\n    return moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\n}\n\n\n "],"names":["FeedsList","props","location","useLocation","_jsx","FL","Component","constructor","arguments","state","feed","wallID","getwallID","updateFeedList","refreshing","spece","changeFeedsFilters","event","analyticsStatus","this","length","setState","updateSelectedFeed","trialAccessAPI","componentDidMount","analyticwall","selectedWallFeed","Object","keys","feeds","wall","id","map","item","push","value","label","ReactHtmlParser","Network","icon","networkIcon","feedsNetworksPrefix","filterId","name","filterIdName","localStorage","getItem","swithcWall","componentWillReceiveProps","nextProps","wallRefresh","setTimeout","render","className","children","ReactMultiSelectCheckboxes","classNamePrefix","onChange","options","connect","analyticsStatusD","dispatch","activeTab","data","isTrial","memo","useDispatch","pageRefresh","analytics_status_loader","getactiveTab","analyticsRecords","dateFilter","useSelector","_ref","analyticwallD","page_refresh","shallowEqual","selectedFeed","filterDate","startdateupdate","startDate","moment","subtract","format","enddateupdate","endDate","parsed","queryString","parse","search","startdate","enddate","setStartDate","useState","setEndDate","maxDate","setMaxDate","endOf","useEffect","pathname","_jsxs","type","style","height","Link","to","xmlns","width","viewBox","transform","fill","d","includes","OverlayTrigger","placement","overlay","Tooltip","onClick","refreshButton","opacity","DateRangePicker","onApply","handleOnApply","picker","selected_feed_data","initialSettings","locale","separator","showDropdowns","ranges","Today","Yesterday","startOf","SVG","src","toAbsoluteUrl","kFormatter","newValue","suffixNum","Math","floor","shortValue","precision","parseFloat","pow","toPrecision","replace","toFixed","ex","abs","sign","dateFormat","date"],"sourceRoot":""}