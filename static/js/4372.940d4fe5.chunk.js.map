{"version":3,"file":"static/js/4372.940d4fe5.chunk.js","mappings":"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","sources":["app/Display/analytics-new/layout/common/networkIcon.js","app/Display/dashboard-new/components/common/slideSection.js","app/Display/dashboard-new/components/skeleton/wallsSkeleton.js","app/Display/dashboard-new/components/createdWalls.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst NetworkIcon = (props) => {\r\n  return (\r\n    ![\"fa-twitter\"].includes(props.icon) ? <i className={`fab ${props.icon} ${props.isDashboard ? props.isDashboard : ''} ${props.size ? props.size : 'font-size-sm'}`}></i> : <svg id=\"twitter\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 44.518 44.518\"><path id=\"Path_5\" data-name=\"Path 5\" d=\"M0,0H44.518V44.518H0Z\" fill=\"none\"></path> <path id=\"Path_7\" data-name=\"Path 7\" d=\"M19.036,13.554,30.942,0H28.121L17.778,11.766,9.523,0H0L12.486,17.794,0,32.006H2.821L13.737,19.578l8.72,12.429H31.98Zm-3.865,4.4L13.9,16.177,3.838,2.083H8.172L16.3,13.462l1.262,1.773L28.12,30.025H23.786Zm0,0\" transform=\"translate(6.313 6.281)\" fill=\"#0f1419\"></path></svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(NetworkIcon);\r\n","        import React, { useEffect } from \"react\";\r\n        import { Splide, SplideTrack } from \"@splidejs/react-splide\";\r\n        import \"../../../analytics-new/assets/css/slide.scss\";\r\n\r\n        const CreatedWalls = ({setactiveWall, section, splideRef, children}) => {\r\n\r\n        useEffect(() => {\r\n\r\n          if(section && setactiveWall){\r\n                if (splideRef.current) {\r\n                // Add event listener to track when the slide changes\r\n                  splideRef.current.splide.on(\"move\", (newIndex) => {\r\n                    setactiveWall(newIndex)\r\n                    console.log(newIndex,'setactiveWallsetactiveWall',section)\r\n                });\r\n              }\r\n          }\r\n        }, []);\r\n        \r\n        const settings = {\r\n            start: 0,\r\n            type: \"loop\",\r\n            //rewind: false,\r\n            speed: 1000,\r\n            perMove: 1,\r\n            loop: true,\r\n            interval: 5000,\r\n            drag: true,\r\n            //clones: 1,\r\n            perPage: section==1 ? 0 : 3,\r\n            autoWidth: section==1 ? true : false,\r\n            gap: section==1 ? 15 : -15,\r\n            autoplay: false,\r\n            pagination: false,\r\n            arrows: true,\r\n            fixedHeight: true,\r\n            breakpoints: {\r\n                0: {\r\n                    perPage: 1\r\n                },\r\n                579: {\r\n                    perPage: 2\r\n                },\r\n                767: {\r\n                    perPage: 2,\r\n                },\r\n                1300: {\r\n                    perPage: 2,\r\n                },\r\n                1600: {\r\n                    perPage: 3,\r\n                }\r\n            }\r\n        };\r\n          \r\n\r\n        return (\r\n            <Splide ref={splideRef} hasTrack={false} options={settings}>\r\n               <SplideTrack>{children}</SplideTrack>\r\n            </Splide>\r\n         );\r\n       };\r\n\r\n export default React.memo(CreatedWalls);\r\n","import React from \"react\";\r\n\r\nconst Network = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-grow-1 mb-3\">\r\n      <div class=\"symbol symbol-45 symbol-light me-2 social_user_img\">\r\n        <span class=\"sk_img\"></span>\r\n      </div>\r\n      <div class=\"d-flex text-left flex-column conn_user_info w-25\">\r\n        <div class=\"sk_line sk_line_height_12\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Action = () => {\r\n  return <div class=\"sk_line sk_line_height_28 me-2\"></div>;\r\n};\r\n\r\nconst WallsSkeleton = () => {\r\n  return (\r\n    <div class=\"d-flex align-items-center flex-wrap justify-content-between\">\r\n      {[1, 2].map(() => {\r\n        return (\r\n          <div className=\"col-6 px-2\">\r\n            <div class=\"ex-graphmin-height w-100\">\r\n              <div class=\"ex-recentwbox d-block p-4\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <div class=\"ex-recentwright w-100 mb-3\">\r\n                      <div\r\n                        class=\"sk_rect btn-min-w sk_img_thumb\"\r\n                        style={{ paddingBottom: \"55%\" }}\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <div class=\"w-100\">\r\n                      <div class=\"ex-recentwleft w-50\">\r\n                        <div class=\"sk_line sk_line_height_12\"></div>\r\n                        <div class=\"sk_line sk_line_80 sk_line_height_8\"></div>\r\n                      </div>\r\n                      <div className=\"mt-5\">\r\n                        <Network />\r\n                        <Network />\r\n                        <Network />\r\n                      </div>\r\n                      <div class=\"ex-recentwright d-flex w-100\">\r\n                        <Action />\r\n                        <Action />\r\n                        <Action />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(WallsSkeleton);\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Card, CardBody, Dropdown } from \"react-bootstrap\";\r\nimport { SplideSlide } from \"@splidejs/react-splide\";\r\nimport SlideSection from \"./common/slideSection\";\r\nimport NetworkIcon from \"../../analytics-new/layout/common/networkIcon\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { getWidgetWallData } from \"../../../../actions/wallDataAction\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getWallFeeds } from \"../../../../actions/display/analytics\";\r\nimport { toggleAddFeedsSection_D } from \"../../../../actions/display/showDisplayModalAction\";\r\nimport CreateWallPopup from \"../../walls/component/modal/CreateNewWallPopup\";\r\nimport { openCreateNewWallPopup } from \"../../../../actions/display/wallsAction\";\r\nimport DropdownComponet from \"../../walls/component/modal/Dropdown\";\r\nimport WallsSkeleton from \"./skeleton/wallsSkeleton\";\r\nimport HoverVideoPlayer from \"react-hover-video-player\";\r\nimport { baseUrl } from \"../../../../utils\";\r\n\r\nconst CreatedWalls = (props) => {\r\n  const { allWalllist, loader } = props;\r\n\r\n  console.log(props,'propsjklskldfjkl')\r\n\r\n  const splideRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [modalData, setModalData] = React.useState({\r\n    profanity: 0,\r\n    modalShow: false,\r\n    name: \"\",\r\n    url: \"\",\r\n    wall_id: null,\r\n    autoUpdate: 1,\r\n    rename_status: 0,\r\n    callbackWall : 0\r\n  });\r\n\r\n  const [activeWall, setactiveWall] = useState(0);\r\n  const [dropDown, setdropDown] = useState(0);\r\n  const [wallactiveStatus, setwallactiveStatus] = useState();\r\n\r\n\r\n  const { user, UserPlan, UserRule } = props.userData;\r\n\r\n  const callbackWall=(status)=>{\r\n  }\r\n\r\n  const handleCategoryClick = (startIndex) => {\r\n    if (splideRef.current) splideRef.current.splide.go(startIndex); // Move to the specific slide\r\n  };\r\n\r\n  const displayWindowOpen = (wallId) => {\r\n    dispatch(getWidgetWallData(user.ownerId, wallId));\r\n    dispatch(getWallFeeds(user.ownerId));\r\n    navigate(`/wall/preview/${wallId}`);\r\n  };\r\n\r\n  const getEditorwall = (feed, id) => {\r\n    if (!feed.length) dispatch(toggleAddFeedsSection_D(true));\r\n    dispatch(getWidgetWallData(user.ownerId, id));\r\n  };\r\n\r\n  const clickToUpdateState = (data) => (event) => {\r\n    dispatch(openCreateNewWallPopup(false));\r\n    setModalData(data);\r\n\r\n    // const widgetCount = (widgetWallsData && widgetWallsData.length) ? widgetWallsData.length : 0;\r\n    // if (widgetCount < UserRule.walls) {\r\n    // setModalData(data)\r\n    // } else {\r\n    // if (data.rename_status == 1) {\r\n    //     setModalData(data)\r\n    // } else {\r\n    //     setUpgrade(true)\r\n    // }\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"created-walls-section mb-5\">\r\n      <Card className=\"p-0 card-custom card-stretch\">\r\n          { allWalllist && Object.keys(allWalllist).length || loader ? (\r\n          <>\r\n            <Card.Header className=\"p-5\">\r\n              <div className=\"m-0 d-flex align-items-center justify-content-between card-title h5 w-100\">\r\n                <h6 class=\"card-label font-weight-bolder m-0 \">\r\n                  Created Walls\r\n                </h6>\r\n               { !loader ? <div className=\"\">\r\n                  <Link to={\"/walls\"} className=\"text-secondary font-size-base\">\r\n                    View All\r\n                  </Link>\r\n                </div> : null }\r\n              </div>\r\n            </Card.Header>\r\n\r\n            <CardBody className=\"p-5\">\r\n\r\n           { loader ?  <WallsSkeleton/> : \r\n             <> \r\n              <div className=\"row mb-5\">\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"custom-pagination\">\r\n                    {allWalllist.map((e, index) => (\r\n                      <button\r\n                        className={`btn ${\r\n                          activeWall == index\r\n                            ? \"btn-primary\"\r\n                            : \"btn-outline-dark\"\r\n                        } me-1 rounded mb-1`}\r\n                        key={index}\r\n                        onClick={() => {\r\n                          handleCategoryClick(index);\r\n                          setactiveWall(index);\r\n                        }}\r\n                      >\r\n                        {e.name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                  <div className=\"d-flex justify-content-sm-end mt-1\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={clickToUpdateState({\r\n                        modalShow: true,\r\n                        wall_id: null,\r\n                        autoUpdate: 1,\r\n                      })}\r\n                      className=\"btn btn-secondary d-flex px-5\"\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        className=\"me-1\"\r\n                        width={\"20px\"}\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"currentColor\"\r\n                      >\r\n                        <path d=\"M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z\"></path>\r\n                      </svg>{\" \"}\r\n                      Create New Wall\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Splide Slider */}\r\n\r\n              <SlideSection section={1} splideRef={splideRef} setactiveWall={setactiveWall}>\r\n                {allWalllist.map((e, index) => {\r\n                  return (\r\n                    <SplideSlide key={index}>\r\n                      <div\r\n                        className=\"created-walls-card h-100\">\r\n                        <div className=\"created-walls-card-inner h-100 p-5\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                               <div  key={index} className=\"wall_cont_wrap innter_wall_cont_wrap_ cursor-pointer created-walls-card-img p-0\">\r\n                                <Link\r\n                                    to={`/wall/index/${e.id}`}\r\n                                    className=\"card card-custom overlay shadow-none overflow-hidden rounded-0\"\r\n                                    onClick={() => {\r\n                                      getEditorwall(e.feedList, e.id);\r\n                                    }}\r\n                                  >\r\n\r\n                                     <HoverVideoPlayer\r\n                                          key={activeWall+index}\r\n                                          videoSrc={`${baseUrl(`theme-media/theme-video/${e.signageTheme}.mp4`)}`}\r\n                                          // pausedOverlay={<img class=\"tb_cp_image\" src={`${baseUrl(`theme-media/theme-thumb/${e.signageTheme}.png`)}`}\r\n                                          // alt={e.name} width={\"100%\"} height={210} />}\r\n                                          width={391} height={300}\r\n                                          style={{\r\n                                            width: '100%',\r\n                                            paddingTop: '-10px',\r\n                                          }}\r\n                                      />\r\n                                  <img\r\n                                    role=\"img\"\r\n                                    src={`${baseUrl(`theme-media/theme-thumb/${e.signageTheme}.png`)}`}\r\n                                    height={250}\r\n                                    width={\"100%\"}\r\n                                  />\r\n\r\n                              <div className=\"overlay-layer\">\r\n                                <img  src={baseUrl(`dashboard/icons/play-icon.svg`)} height={46} width={46} className=\"img-fluid\" alt=\"play\" />\r\n                              </div>\r\n                              </Link>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                              <div className=\"mt-3\">\r\n                                <div className=\"d-flex justify-content-between mb-8\">\r\n                                  <Link\r\n                                    to={`/wall/index/${e.id}`}\r\n                                    onClick={() => {\r\n                                      getEditorwall(e.feedList, e.id);\r\n                                    }}\r\n                                  >\r\n                                    <div className=\"\">\r\n                                      <h5 className=\"mb-2 text-capitalize d-flex align-items-center\">\r\n                                        {e.name}\r\n                                        { e.activeScreen ?  <span className=\"status_active\"></span> : null }\r\n                                      </h5>\r\n                                      <p className=\"text-secondary m-0\">\r\n                                        {e.themeName}\r\n                                      </p>\r\n                                    </div>\r\n                                  </Link>\r\n                                  <div className=\"\">\r\n                                    <p className=\"text-secondary\">\r\n                                      Posts: {e.totalPostCount}\r\n                                    </p>\r\n                                  </div>\r\n                                </div>\r\n                                {e.feedList &&\r\n                                Object.keys(e.feedList).length ? (\r\n                                  <div className=\"created-walls-network mb-8\">\r\n                                    <ul className=\"m-0\">\r\n                                      {e.feedList.map((fdata, key) => {\r\n                                        return (\r\n                                          <li className=\"d-flex align-items-center mb-4 \">\r\n                                            <NetworkIcon\r\n                                              isDashboard={\r\n                                                \"me-2 text-center text-white\"\r\n                                              }\r\n                                              icon={fdata.socialIcon}\r\n                                            />\r\n                                            {fdata.name}\r\n                                          </li>\r\n                                        );\r\n                                      })}\r\n                                    </ul>\r\n                                  </div>\r\n                                ) : null}\r\n                                <div className=\"d-flex align-items-center justify-content-between\">\r\n                                  <div className=\"created-walls-report d-flex align-items-center\">\r\n                                    <Link\r\n                                      to={`/moderation/index/${e.id}`}\r\n                                      onClick={() =>\r\n                                        localStorage.setItem(\"wallId\", e.id)\r\n                                      }\r\n                                      className=\" d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M6.99979 7V3C6.99979 2.44772 7.4475 2 7.99979 2H20.9998C21.5521 2 21.9998 2.44772 21.9998 3V16C21.9998 16.5523 21.5521 17 20.9998 17H17V20.9925C17 21.5489 16.551 22 15.9925 22H3.00728C2.45086 22 2 21.5511 2 20.9925L2.00276 8.00748C2.00288 7.45107 2.4518 7 3.01025 7H6.99979ZM8.99979 7H15.9927C16.549 7 17 7.44892 17 8.00748V15H19.9998V4H8.99979V7ZM15 9H4.00255L4.00021 20H15V9ZM8.50242 18L4.96689 14.4645L6.3811 13.0503L8.50242 15.1716L12.7451 10.9289L14.1593 12.3431L8.50242 18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Moderate\r\n                                    </Link>\r\n                                    <Link\r\n                                      to={`${\r\n                                        ![58].includes(UserPlan.planId)\r\n                                          ? \"/analytic-new/\"\r\n                                          : \"analytic/\"\r\n                                      }${e.id}`}\r\n                                      onClick={() =>\r\n                                        dispatch(\r\n                                          getWidgetWallData(user.ownerId, e.id)\r\n                                        )\r\n                                      }\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M2 13H8V21H2V13ZM16 8H22V21H16V8ZM9 3H15V21H9V3ZM4 15V19H6V15H4ZM11 5V19H13V5H11ZM18 10V19H20V10H18Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Analytic\r\n                                    </Link>\r\n                                    <a\r\n                                      href=\"#\"\r\n                                      onClick={() => displayWindowOpen(e.id)}\r\n                                      className=\"d-flex align-items-center text-secondary me-2\"\r\n                                    >\r\n                                      <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        className=\"me-2\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        width={\"24px\"}\r\n                                        height={\"24px\"}\r\n                                        fill=\"currentColor\"\r\n                                      >\r\n                                        <path d=\"M4 16H20V5H4V16ZM13 18V20H17V22H7V20H11V18H2.9918C2.44405 18 2 17.5511 2 16.9925V4.00748C2 3.45107 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44892 22 4.00748V16.9925C22 17.5489 21.5447 18 21.0082 18H13Z\"></path>\r\n                                      </svg>{\" \"}\r\n                                      Display\r\n                                    </a>\r\n                                  </div>\r\n                                  <div className=\"\">\r\n                                    <button\r\n                                      type=\"button\"\r\n                                      className=\"p-0 border-0 bg-transparent\"\r\n                                    >\r\n                                      <div className=\"card-toolbar\">\r\n                                        <Dropdown align={'end'}>\r\n                                          <Dropdown.Toggle className=\"btn btn-link btn-icon btn-sm btn-clean btn-after-none w-auto\">\r\n                                           <svg\r\n                                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                                              height={\"20px\"}\r\n                                              width={\"20px\"}\r\n                                              viewBox=\"0 0 24 24\"\r\n                                              fill=\"currentColor\"\r\n                                            >\r\n                                              <path d=\"M12 3C10.9 3 10 3.9 10 5C10 6.1 10.9 7 12 7C13.1 7 14 6.1 14 5C14 3.9 13.1 3 12 3ZM12 17C10.9 17 10 17.9 10 19C10 20.1 10.9 21 12 21C13.1 21 14 20.1 14 19C14 17.9 13.1 17 12 17ZM12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z\"></path>\r\n                                            </svg>\r\n                                          </Dropdown.Toggle>\r\n                                          <Dropdown.Menu style={{ width: 175 }}>\r\n                                            <DropdownComponet callbackWall={callbackWall} dropDown={dropDown} setdropDown={setdropDown} setwallactiveStatus={setwallactiveStatus} props={{'wallsData' : e, 'clickToUpdateState' : clickToUpdateState }} clickToUpdateState={clickToUpdateState} ownerId={user.ownerId} userData={props.userData}/>\r\n                                          </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                      </div>\r\n                                    </button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </SplideSlide>\r\n                  );\r\n                })}\r\n              </SlideSection>\r\n             </> \r\n             }\r\n            </CardBody>\r\n          </>\r\n        ) : (\r\n          <div className=\"col-12\">\r\n            <div className=\"d-flex justify-content-center w-100\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={clickToUpdateState({\r\n                  modalShow: true,\r\n                  wall_id: null,\r\n                  autoUpdate: 1,\r\n                  callbackWall : 1\r\n                })}\r\n                className=\"btn btn-link d-flex flex-wrap flex-column align-content-center add_card_button create-new-wall cursor-pointer px-5 w-100\"\r\n              >\r\n                <div className=\"add_wall_icon\">\r\n                  <span className=\"svg-icon\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width={\"20px\"} viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                      <path d=\"M11 11V5H13V11H19V13H13V19H11V13H5V11H11Z\"></path>\r\n                    </svg>{\" \"}\r\n                  </span>\r\n                </div>\r\n                <h5 class=\"text-center mt-5 mb-0\"><span class=\"add_wall_card_txt popUp hide-on-desktop createWallbtn btn-link\">Create New Wall</span></h5>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Card>\r\n\r\n      <CreateWallPopup\r\n        show={modalData.modalShow}\r\n        onHide={() => {\r\n          setModalData({ modalShow: false });\r\n          dispatch(openCreateNewWallPopup(false));\r\n        }}\r\n        {...modalData}\r\n      />\r\n      {/* <UpgradePopUp show={upgrade} onHide={clickToHideUpgrade} {...modalData} onClickUpgrade={onClickUpgrade} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(CreatedWalls);\r\n"],"names":["NetworkIcon","props","includes","icon","_jsxs","id","xmlns","width","height","viewBox","children","_jsx","d","fill","transform","className","isDashboard","size","React","CreatedWalls","_ref","setactiveWall","section","splideRef","useEffect","current","splide","on","newIndex","console","log","settings","start","type","speed","perMove","loop","interval","drag","perPage","autoWidth","gap","autoplay","pagination","arrows","fixedHeight","breakpoints","Splide","ref","hasTrack","options","SplideTrack","Network","class","Action","WallsSkeleton","map","style","paddingBottom","allWalllist","loader","useRef","dispatch","useDispatch","navigate","useNavigate","modalData","setModalData","profanity","modalShow","name","url","wall_id","autoUpdate","rename_status","callbackWall","activeWall","useState","dropDown","setdropDown","wallactiveStatus","setwallactiveStatus","user","UserPlan","UserRule","userData","status","getEditorwall","feed","length","toggleAddFeedsSection_D","getWidgetWallData","ownerId","clickToUpdateState","data","event","openCreateNewWallPopup","Card","Object","keys","_Fragment","Header","Link","to","CardBody","e","index","onClick","startIndex","go","SlideSection","SplideSlide","feedList","HoverVideoPlayer","videoSrc","baseUrl","signageTheme","paddingTop","role","src","alt","activeScreen","themeName","totalPostCount","fdata","key","socialIcon","localStorage","setItem","planId","href","displayWindowOpen","wallId","getWallFeeds","Dropdown","align","Toggle","Menu","DropdownComponet","CreateWallPopup","show","onHide"],"sourceRoot":""}